 <!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <title>VOUCHER DIGITAL</title>
  <link href="https://fonts.googleapis.com/css?family=Roboto:400,700&display=swap" rel="stylesheet">
  <base target="_top">
  <style>
   * { box-sizing: border-box; }
    body {
      margin: 0;
      padding: 0;
      font-family: 'Roboto', sans-serif;
      background: linear-gradient(135deg, #2C3E50, #4CA1AF);
      color: #333;
      overflow-x: auto; /* Permite scroll horizontal en la página si es necesario */
    }
    body::before {
      content: "";
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.15);
      z-index: -1;
    }
    
.container { /* Para el formulario de Voucher principal */
  max-width: 1100px; /* Aumentado de 850px para dar más espacio a las tablas */
  margin: 40px auto;
  background: #fff;
  border-radius: 16px;
  padding: 40px;
  box-shadow: 0 6px 25px rgba(0, 0, 0, 0.15);
  color: #333;
  position: relative;
}
    h1 {
      text-align: center;
      color: #2C3E50;
      font-size: 2rem;
      margin-bottom: 20px;
    }
    .slogan {
      text-align: center;
      font-size: 1rem;
      margin-bottom: 20px;
    }
    h2 {
      margin-bottom: 10px;
      color: #2C3E50;
      border-bottom: 2px solid #2C3E50;
      display: inline-block;
      padding-bottom: 5px;
    }
    .section { margin-bottom: 30px; }
    .section label {
      display: block;
      margin-bottom: 8px;
      font-weight: bold;
      font-size: 0.9rem;
      color: #2C3E50;
    }
    .section.restricciones label,
    .section.restricciones,
    .section.restricciones textarea {
      font-size: 0.8rem;
    }
    .flex-row {
      display: flex;
      justify-content: space-between;
      gap: 20px;
      flex-wrap: wrap;
    }
    .flex-row .half-width { flex: 1 1 45%; }
    .voucher-agencia-container {
      display: flex;
      justify-content: space-between;
      gap: 20px;
      flex-wrap: wrap;
    }
    .voucher-agencia-container .voucher-id-container {
      flex: 1 1 45%;
      margin-bottom: 15px;
    }
    input, select, textarea {
      width: 100%;
      padding: 10px;
      margin-bottom: 15px;
      border: 1px solid #ccc;
      border-radius: 4px;
      font-size: 0.9rem;
      transition: background-color 0.3s, border-color 0.3s;
    }
    textarea { resize: vertical; min-height: 80px; }
    .filled { border-color: #2ECC71; background-color: #e6f9ee; }
    .empty  { border-color: #E74C3C; background-color: #f9e6e6; }
    .balance-positive {
      background-color: #fdecea;
      border-color: #e74c3c;
      color: #e74c3c;
    }
    .balance-zero {
      background-color: #eafaf1;
      border-color: #27ae60;
      color: #27ae60;
    }
    .balance-negative {
      background-color: #e0f2ff;
      border-color: #2980b9;
      color: #2980b9;
    }
    table { /* General table styles, can be overridden by more specific ones */
      width: 100%;
      border-collapse: collapse;
      margin-bottom: 15px;
    }
    table th, table td {
      text-align: left;
      border: 1px solid #ccc;
      padding: 10px;
    }
    table th { background-color: #2C3E50; color: #fff; }
    .button-group {
      display: flex;
      justify-content: center;
      gap: 15px;
      margin-top: 10px;
      flex-wrap: wrap;
    }
    .button-group button { min-width: 150px; }
    .boton, .verde, .rojo-mas, .toggle-button, .purpura, .azul-sri {
      text-align: center;
      text-decoration: none;
      font-family: 'Roboto', sans-serif;
      display: inline-block;
      color: #FFF;
      padding: 12px 30px;
      border: none;
      border-radius: 9999px;
      cursor: pointer;
      transition: all 0.3s ease-in-out;
      font-size: 1rem;
      font-weight: 500;
    }
    .boton {
      background: #7F8C8D;
      box-shadow: 0 4px 0 #666;
    }
    .boton:hover { background: #95A5A6; }
    .boton:active {
      box-shadow: 0 2px 0 #666;
      transform: translateY(2px);
    }
    .verde {
      background: #2ECC71;
      box-shadow: 0 4px 0 #27AE60;
    }
    .verde:hover { background: #32db78; }
    .verde:active {
      box-shadow: 0 2px 0 #27AE60;
      transform: translateY(2px);
    }
    .rojo-mas {
      background: #C0392B;
      box-shadow: 0 4px 0 #A93226;
    }
    .rojo-mas:hover { background: #e74c3c; }
    .rojo-mas:active {
      box-shadow: 0 2px 0 #A93226;
      transform: translateY(2px);
    }
    .purpura {
      background: purple;
      box-shadow: 0 4px 0 #800080;
    }
    .azul-sri {
  background: #3498DB; /* Un azul claro y profesional */
  box-shadow: 0 4px 0 #2980B9;
}
.azul-sri:hover { background: #5DADE2; }
.azul-sri:active {
  box-shadow: 0 2px 0 #2980B9;
  transform: translateY(2px);
}
    .toggle-button { /* Estilo para el botón "Mostrar Todas" y otros similares */
      background: #1FA2A2;
      box-shadow: 0 4px 0 #0D6666;
      padding: 8px 12px; /* Ajuste de padding para este botón específico */
      font-size: 0.85rem; /* Ajuste de fuente */
    }
    .toggle-button:hover { background: #2cc4c4; }
    .toggle-button:active {
      box-shadow: 0 2px 0 #0D6666;
      transform: translateY(2px);
    }
    #overlay {
      position: fixed;
      top: 0; left: 0;
      width: 100%; height: 100%;
      background: rgba(0,0,0,0.5);
      display: none;
      z-index: 9999;
      align-items: center;
      justify-content: center;
      flex-direction: column;
      color: #fff;
      font-size: 1.2rem;
      text-align: center;
    }
    .spinner {
      border: 8px solid #f3f3f3;
      border-top: 8px solid #2C3E50;
      border-radius: 50%;
      width: 60px;
      height: 60px;
      animation: spin 1s linear infinite;
      margin-bottom: 15px;
    }
    @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
    #mensajeFinal {
      display: none;
      position: fixed;
      top: 50%; left: 50%;
      transform: translate(-50%, -50%);
      background: rgba(0,0,0,0.8);
      color: #fff;
      padding: 20px;
      border-radius: 8px;
      z-index: 99999;
      font-size: 1.1rem;
      text-align: center;
    }
    #watermark {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(128, 0, 128, 0.2);
      color: rgba(128, 0, 128, 0.5);
      font-size: 5rem;
      font-weight: bold;
      display: none;
      align-items: center;
      justify-content: center;
      z-index: 999;
      pointer-events: none;
    }
    .passenger-fields {
      display: flex;
      justify-content: space-between;
      gap: 20px;
      flex-wrap: wrap;
    }
    .passenger-fields .half-width {
      flex: 1 1 45%;
      position: relative;
    }
    .payment-container {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 15px;
      width: 100%;
    }
    .payment-field {
      width: 100%;
      max-width: 300px;
      text-align: center;
    }
    .payment-field label {
      margin-bottom: 5px;
      font-weight: bold;
      display: block;
      text-align: center;
    }
    .payment-field input { text-align: center; }

    /* --- ESTILOS PARA EL CONTENEDOR DE LA BITÁCORA --- */
    #bitacoraContainer {
      /* max-width: 850px; /* REMOVED */
      min-width: 850px; /* Un ancho base similar al .container principal */
      width: fit-content; /* Para que el contenedor blanco se ajuste al ancho de #bitacoraSectionInternal */
      max-width: 95vw;  /* Evita que se haga demasiado ancho y genere scroll horizontal excesivo en la PÁGINA */
      margin: 40px auto; /* Centra el contenedor en la página */
      background: #fff;
      border-radius: 16px;
      padding: 40px;
      box-shadow: 0 6px 25px rgba(0, 0, 0, 0.15);
      color: #333;
      position: relative;
      display: flex; /* Usado para centrar #bitacoraSectionInternal si width:fit-content no es suficiente */
      justify-content: center;
    }

    #bitacoraSectionInternal {
      display: flex;
      flex-direction: column;
      align-items: center; /* Centra los bloques hijos horizontalmente */
      width: 100%; /* Toma el ancho que #bitacoraContainer le permita (debido a fit-content) */
                  /* O un ancho fijo si #bitacoraContainer tiene width fijo */
    }

    /* Contenedores para filtros, botón "Mostrar Todas" y botones principales de la bitácora */
    #bitacoraSectionInternal .filtro-container,
    #bitacoraSectionInternal .mostrar-todas-container, /* Clase para el div del botón "Mostrar Todas" */
    #bitacoraSectionInternal > .button-group { /* Botones "Añadir fila", "Guardar cambios" */
      width: 100%; /* Ocupan el ancho de #bitacoraSectionInternal */
      max-width: 770px; /* (850px de #bitacoraContainer - 2*40px de padding) */
                       /* Esto mantiene estos controles con un ancho consistente, centrados */
      margin-bottom: 15px; /* Espaciado vertical entre estos bloques de control */
    }

  #bitacoraSectionInternal .filtro-container {
  display: flex;
  justify-content: center; /* Centra los elementos de filtro si no ocupan todo el max-width */
  align-items: center;
  gap: 15px;
  flex-wrap: nowrap; /* Cambiado de wrap a nowrap para forzar que los filtros permanezcan en una sola línea */
}
    #bitacoraSectionInternal .filtro-container label { margin-bottom: 0; }
    #bitacoraSectionInternal .filtro-container input[type="date"],
    #bitacoraSectionInternal .filtro-container select {
         width: auto;
         margin-bottom: 0;
     }

    /* Contenedor específico para el botón "Mostrar Todas" */
    .mostrar-todas-container { /* Asegúrate de añadir esta clase al div del botón en el HTML */
      display: flex;
      justify-content: flex-end; /* Alinea el botón a la derecha dentro de su espacio (max-width: 770px) */
      /* margin-bottom ya está aplicado por la regla común de arriba */
    }
    /* El botón .toggle-button ya tiene estilos, el padding/font-size inline se puede mover aquí si se desea */


    /* Contenedor del área de la tabla resizable y sus botones de scroll */
    .table-scroll-container { /* ID: bitacoraScrollVerticalContainer */
      position: relative;
      width: 100%; /* Ocupa el ancho que le dé #bitacoraSectionInternal */
      /* NO overflow-x aquí, para que el #bitacoraTableWrapper resizable pueda expandirse */
      display: flex;
      flex-direction: column;
      align-items: center; /* Centra #bitacoraTableWrapper y #bitacoraScrollBtns */
      margin-bottom: 1rem;
    }

.table-wrapper {
  overflow-x: auto; /* ESTA LÍNEA ES CLAVE para el scroll horizontal */
  width: 100%;
  border: 1px solid #e2e8f0;
  border-radius: 8px;
  margin-bottom: 10px;
  scroll-behavior: smooth; /* Opcional, para scroll suave */
  -webkit-overflow-scrolling: touch; /* Para mejor experiencia en iOS */
}

.table-wrapper table {
  width: 100%;
  min-width: max-content; /* IMPORTANTE: permite que la tabla se expanda más allá del wrapper */
  border-collapse: separate; /* o collapse, según prefieras el estilo de borde */
  border-spacing: 0;
}
    /* Wrapper específico de la tabla Bitácora (el elemento resizable) */
    #bitacoraTableWrapper {
      overflow: auto;   /* Scroll interno vertical Y horizontal para la <table> */
      resize: both;     /* Permite al usuario redimensionar este div */
      min-height: 300px; /* Un mínimo razonable */
      min-width: 400px; /* Ancho mínimo al que se puede redimensionar */
      
      /* --- MODIFICACIONES CLAVE AQUÍ --- */
      width: 90vw;      /* ANCHO INICIAL: 90% del ancho de la ventana del navegador. */
      height: 70vh;     /* ALTURA INICIAL: 70% de la altura de la ventana del navegador. */
      /* --- FIN DE MODIFICACIONES --- */

      max-width: 95vw;  /* Límite para el arrastre horizontal (ajustado ligeramente) */
      max-height: 150vh;/* Límite para el arrastre vertical */
      border: 1px solid #ccc;
      margin-bottom: 0.5rem; /* Espacio antes de sus botones de scroll */
    }

  
        .table-wrapper th, .table-wrapper td {
      padding: 6px 8px; /* Reducimos significativamente el padding */
      text-align: left;
      vertical-align: middle;
      font-size: 0.85rem; /* Reducimos un poco la fuente para que quepa mejor */
      border-bottom: 1px solid #e2e8f0;
      white-space: nowrap;
    }

    /* Celdas específicas con truncamiento de texto */
    .table-wrapper td.td-truncate-narrow { max-width: 120px; overflow: hidden; text-overflow: ellipsis; }
    .table-wrapper td.td-truncate-medium { max-width: 200px; overflow: hidden; text-overflow: ellipsis; }
    .table-wrapper td.td-truncate-wide  { max-width: 300px; overflow: hidden; text-overflow: ellipsis; }
    /* Nota: white-space: nowrap; ya está en .table-wrapper td, necesario para ellipsis */


    #bitacoraTable th { /* Sticky header for Bitacora table */
      position: -webkit-sticky;
      position: sticky;
      top: 0;
      background-color: #2C3E50;
      color: #fff;
      z-index: 2;
    }

    .table-scroll-buttons {
      display: none;
      justify-content: center;
      width: 100%;
      max-width: 800px;
      margin: 0.5rem auto 1rem auto;
    }
    .table-scroll-buttons button {
      background: #e9ecef;
      border: 1px solid #dee2e6;
      color: #495057;
      padding: 0.4rem 0.8rem;
      border-radius: 6px;
      cursor: pointer;
      font-size: 1.2rem;
      line-height: 1;
      transition: background-color 0.2s;
    }
    .table-scroll-buttons button:hover { background-color: #dee2e6; }
    .table-scroll-buttons button:disabled { opacity: 0.4; cursor: not-allowed; }


    /* --- ESTILOS PARA SECCIÓN DESCRIPCIÓN (sin cambios relevantes aquí) --- */
    #descripcionTitulo { cursor: pointer; user-select: none; display: inline-block; }
    #descripcionTitulo:hover { color: #4CA1AF; }
    #descripcionClaveContainer, #descripcionContenido { display: none; margin-top: 15px; padding: 15px; border: 1px dashed #ccc; border-radius: 8px; background-color: #f8f9fa; }
    #descripcionClaveContainer label { width: 100px; display: inline-block; margin-right: 10px; }
    #descripcionClaveContainer input[type="password"] { width: calc(100% - 230px); display: inline-block; margin-bottom: 0; }
    #descripcionClaveContainer button { margin-left: 10px; display: inline-block; width: auto; padding: 8px 15px; font-size: 0.85rem; }
    #descripcionContenido .filtro-container { display: flex; align-items: center; gap: 15px; margin-bottom: 15px; flex-wrap: wrap; }
    #descripcionContenido .filtro-container label { margin-bottom: 0; }
    #descripcionContenido .filtro-container input[type="date"] { width: auto; margin-bottom: 0; }
    #descripcionContenido #descripcionAgenciaNombre { font-weight: bold; color: #2C3E50; margin-left: 5px; }
    #descripcionTable { font-size: 0.8rem; margin-top: 15px; }
    #descripcionTable th, #descripcionTable td { padding: 5px; text-align: right; }
        /* Alineación para la tabla de descripción */
        /* --- OPCIÓN 2: Checkbox Personalizado (Recomendado) --- */
    
    /* Primero, centramos el contenido de la celda */
        /* --- Checkbox Personalizado para sección Descripción --- */
    
    /* Centramos el contenido de la celda */
    #descripcionTable th:nth-child(1), 
    #descripcionTable td:nth-child(1) { 
      text-align: center; 
      vertical-align: middle;
    }

    /* Ocultamos el checkbox por defecto y le damos estilo base */
    .sri-checkbox-descripcion {
      appearance: none;
      -webkit-appearance: none;
      -moz-appearance: none;
      margin: 0;
      position: relative;
      width: 20px;
      height: 20px;
      border: 2px solid #bdc3c7;
      border-radius: 4px;
      cursor: pointer;
      transition: background-color 0.2s ease-in-out, border-color 0.2s ease-in-out;
      display: inline-block;
    }

    /* Estilo al pasar el ratón (cuando no está marcado) */
    .sri-checkbox-descripcion:not(:checked):hover {
      border-color: #3498db; /* Azul del botón SRI */
    }

    /* Estilo cuando está marcado (fondo azul) */
    .sri-checkbox-descripcion:checked {
      background-color: #3498DB; /* Azul del botón "Descargar SRI" */
      border-color: #2980B9;     /* Azul más oscuro para el borde */
    }

    /* Creamos la marca de verificación ("visto") de color blanco */
    .sri-checkbox-descripcion:checked::after {
      content: '';
      position: absolute;
      top: 2px;
      left: 6px;
      width: 5px;
      height: 10px;
      border: solid white;
      border-width: 0 3px 3px 0;
      transform: rotate(45deg);
    }
        /* --- Estilos para Checkboxes personalizados en la Bitácora --- */

    /* Centra el contenido de las celdas de los checkboxes */
    #bitacoraTable td[data-colkey="selectPdf"],
    #bitacoraTable td[data-colkey="selectSri"] {
      text-align: center;
      vertical-align: middle;
    }

    /* Oculta los checkboxes por defecto y define el estilo base */
    .pdf-select-checkbox,
    .sri-select-checkbox {
      appearance: none;
      -webkit-appearance: none;
      -moz-appearance: none;
      margin: 0;
      position: relative;
      width: 20px;
      height: 20px;
      border: 2px solid #bdc3c7; /* Borde gris claro */
      border-radius: 4px;
      cursor: pointer;
      transition: all 0.2s ease-in-out;
      display: inline-block;
      transform: scale(1.3); /* Los hacemos un poco más grandes */
    }

        /* Estilo al pasar el ratón (PDF) */
    .pdf-select-checkbox:not(:checked):hover {
      border-color: #8E44AD; /* Púrpura más claro para el hover */
    }
    /* Estilo al pasar el ratón (SRI) */
    .sri-select-checkbox:not(:checked):hover {
      border-color: #3498DB; /* Azul */
    }

    /* Estilo cuando está marcado (PDF - Morado) */
    .pdf-select-checkbox:checked {
      background-color: purple; /* El mismo morado de tu botón */
      border-color: #6A0DAD;    /* Un morado un poco más oscuro para el borde */
    }

    /* Estilo cuando está marcado (SRI - Azul) */
    .sri-select-checkbox:checked {
      background-color: #3498DB; /* Azul */
      border-color: #2980B9;    /* Azul oscuro */
    }

    /* Crea la marca de verificación blanca para ambos */
    .pdf-select-checkbox:checked::after,
    .sri-select-checkbox:checked::after {
      content: '';
      position: absolute;
      top: 2px;
      left: 6px;
      width: 5px;
      height: 10px;
      border: solid white;
      border-width: 0 3px 3px 0;
      transform: rotate(45deg);
    }
    #descripcionTable th:nth-child(3), #descripcionTable td:nth-child(3), /* Fecha Compra */
    #descripcionTable th:nth-child(4), #descripcionTable td:nth-child(4), /* Sucursal */
    #descripcionTable th:nth-child(12), #descripcionTable td:nth-child(12), /* Estado */
    #descripcionTable th:nth-child(13), #descripcionTable td:nth-child(13), /* Usuario */
    #descripcionTable th:nth-child(14), #descripcionTable td:nth-child(14) { text-align: left; } /* Descripción */
    #descripcionTable input[type="number"], #descripcionTable input[type="text"] { font-size: 0.8rem; padding: 4px; margin-bottom: 0; text-align: right; max-width: 90px; box-sizing: border-box; }
    #descripcionTable input.descripcion-texto { text-align: left; max-width: 150px; }
    .clave-change-container { margin-top: 20px; padding-top: 15px; border-top: 1px solid #eee;}
    .clave-change-container label {width: 180px; display: inline-block;}
    .clave-change-container input[type="password"] {width: calc(100% - 320px); display: inline-block; margin-bottom: 0;}
    .clave-change-container button { margin-left: 10px; display: inline-block; width: auto; padding: 8px 15px; font-size: 0.85rem;}
    .highlighted-row { background-color: rgba(128, 0, 128, 0.2); }
    .boton-buscar-morado { background: #8A2BE2; box-shadow: 0 4px 0 #5D3FD3; color: white; padding: 10px 15px; border: none; border-radius: 5px; cursor: pointer; font-size: 0.9rem; font-weight: 500; transition: all 0.3s ease-in-out; flex-shrink: 0; height: 38px; line-height: 1; margin-bottom: 0; }
    .boton-buscar-morado:hover { background: #9932CC; }
    .boton-buscar-morado:active { box-shadow: 0 2px 0 #5D3FD3; transform: translateY(2px); }
    .voucher-id-container.voucher-search-container { display: flex; flex-direction: column; }
    .voucher-id-input-button { display: flex; align-items: flex-end; gap: 10px; width: 100%; }
    .voucher-id-input-button input { flex: 1; margin-bottom: 0; }

    /* Estilos Bitácora (visibilidad, botones, inputs, etc.) */
    .bitacora-header-content { display: flex; align-items: center; justify-content: space-between; gap: 5px; position: relative; }
    .bitacora-header-content .header-text { flex-grow: 1; text-align: inherit; padding-right: 5px; }
    .bitacora-header-content .toggle-visibility { cursor: pointer; font-size: 0.9em; color: #fff; font-family: 'Font Awesome 5 Free'; font-weight: 900; -webkit-font-smoothing: antialiased; display: inline-block; font-style: normal; font-variant: normal; text-rendering: auto; line-height: 1; margin-left: 5px; }
    .toggle-visibility::before { content: "\f06e"; } /* fa-eye */
    .toggle-visibility.hidden-icon::before { content: "\f070"; } /* fa-eye-slash */
    .bitacora-header-content .toggle-visibility:hover { color: #bdc3c7; }
    .bitacora-hidden-column { display: none !important; }
    .asistencia-switch { padding: 5px 10px; border-radius: 4px; cursor: pointer; font-size: 0.85rem; font-weight: bold; text-align: center; min-width: 60px; border: 1px solid transparent; box-sizing: border-box; line-height: 1.2; margin: auto; display: block; }
    .asistencia-switch.si { background-color: #2ECC71; color: white; border-color: #27AE60; }
    .asistencia-switch.no { background-color: #bdc3c7; color: white; border-color: #95a5a6; }
    .asistencia-switch:hover:not(:disabled) { opacity: 0.8; }
    .asistencia-switch:disabled { opacity: 0.5; cursor: not-allowed; }
    .bitacora-readonly-input { background-color: #eee !important; cursor: not-allowed !important; }
    .bitacora-table-numeric-cell { text-align: right; }
    .bitacora-row-deleted { text-decoration: line-through; opacity: 0.6; font-style: italic; background-color: #f9e6e6; }
    .bitacora-row-edited { /* background-color: #e0f2ff; */ }
    .bitacora-row-new { background-color: #e6f9ee; }
    #bitacoraTable input[type="number"], #bitacoraTable input[type="text"], #bitacoraTable input[type="time"] { 
      font-size: 0.85rem; /* Coincide con el nuevo tamaño de fuente de la celda */
      padding: 5px;       /* Un padding interno cómodo para el input */
      margin: 0; 
      width: 100%; 
      box-sizing: border-box; 
      border: 1px solid #ccc; 
      border-radius: 4px; 
    }
    #bitacoraTable input[type="date"].bitacora-readonly-input { width: 100%; box-sizing: border-box; padding: 4px; border: 1px solid #ccc; border-radius: 4px; }


    /* Ajustes finales para móviles */
    @media (max-width: 768px) {
      #bitacoraContainer {
        width: 95%;
        min-width: 0;
        margin: 10px auto; /* Reducido de 20px para dar más espacio vertical */
        padding: 15px; /* Reducido de 20px */
        width: auto;
      }
      #bitacoraSectionInternal > div[style*="text-align: right"],
      #bitacoraSectionInternal .filtro-container,
      #bitacoraSectionInternal > .button-group {
         max-width: none; /* Full width for these control blocks on mobile */
      }
      #bitacoraTableWrapper {
        resize: none;
        width: 100%;
        max-width: none;
        min-width: 0; /* Allow it to be very narrow if needed on small screens */
        max-height: 60vh; /* Reducir un poco más en móvil */
      }
       #descripcionClaveContainer input[type="password"] { width: calc(100% - 120px); }
       .clave-change-container input[type="password"] { width: calc(100% - 120px); }
       #descripcionTable input[type="number"], #descripcionTable input[type="text"] { max-width: 70px; }
       #descripcionTable input.descripcion-texto { max-width: 100px; }

       .voucher-id-container.voucher-search-container {
           flex-direction: column;
           margin-bottom: 10px;
       }
       .voucher-id-input-button {
           flex-direction: column;
           gap: 5px;
           align-items: stretch;
       }
        .voucher-id-input-button input,
        .boton-buscar-morado {
           flex: none;
           width: 100%;
           margin-bottom: 0;
        }
    }
    .input-requerido-vacio {
       border: 1px solid #E74C3C !important; /* Rojo, importante para sobreescribir */
       background-color: #f9e6e6 !important;
   }

   /* Estilo opcional para inputs llenos en Bitácora (si quieres diferenciarlo de '.filled' general) */
   .input-bitacora-lleno {
      border-color: #2ECC71; /* Verde */
      background-color: #e6f9ee;
   }
    /* --- Estilos Mejorados para la sección de Resumen de Bitácora --- */
    #bitacoraSumatoriasContainer {
      width: 100%;
      max-width: 770px; /* Coincide con el ancho de los controles */
      margin-top: 30px; /* Espacio generoso después de los botones */
      padding-top: 20px;
      border-top: 2px solid #e0e0e0; /* Una línea divisoria más visible */
    }

    .sumatoria-titulo {
      text-align: center;
      color: #2C3E50;
      font-size: 1.2rem; /* Un poco más grande */
      font-weight: 500;
      margin-bottom: 20px;
    }

    .sumatoria-wrapper {
      display: flex;
      justify-content: space-around;
      flex-wrap: wrap;
      gap: 15px;
    }

    .sumatoria-item {
      background-color: #f8f9fa;
      padding: 15px 20px;
      border-radius: 12px;
      border: 1px solid #e9ecef;
      box-shadow: 0 3px 10px rgba(0,0,0,0.07);
      text-align: center;
      min-width: 200px; /* Un poco más de ancho base */
      flex-grow: 1;
      display: flex;
      flex-direction: column;
      gap: 5px; /* Espacio entre label y valor */
    }

    .sumatoria-label {
      font-size: 0.9rem;
      color: #495057;
      font-weight: 500;
    }

    .sumatoria-valor {
      font-size: 1.5rem;
      font-weight: 700;
      color: #2C3E50;
    }

    .sumatoria-valor-grande {
      font-size: 1.7rem; /* Hacemos el total general aún más prominente */
      color: #27ae60; /* Verde para el total general */
    }


/* --- ESTILOS ESPECÍFICOS PARA LA TABLA PASAJEROS --- */
#tablaPasajeros th:nth-child(1), #tablaPasajeros td:nth-child(1) { width: 30%; }
#tablaPasajeros th:nth-child(2), #tablaPasajeros td:nth-child(2) { width: 28%; }
#tablaPasajeros th:nth-child(3), #tablaPasajeros td:nth-child(3) { width: 22%; }
#tablaPasajeros th:nth-child(4), #tablaPasajeros td:nth-child(4) { width: 10%; min-width: 60px; } /* text-align: center; ya en cabecera general */
#tablaPasajeros th:nth-child(5), #tablaPasajeros td:nth-child(5) { width: 10%; min-width: 60px; text-align: center;}

/* --- ESTILOS ESPECÍFICOS PARA LA TABLA TOURS (AJUSTADOS) --- */
#tablaTours th:nth-child(1), /* Fecha */
#tablaTours td:nth-child(1) {
  width: 135px;
  min-width: 130px;
}

#tablaTours th:nth-child(2), /* Tour */
#tablaTours td:nth-child(2) {
  width: 230px; /* Reducido */
  min-width: 200px;
}

#tablaTours th:nth-child(3), /* Operador */
#tablaTours td:nth-child(3) {
  width: 170px; /* Reducido significativamente */
  min-width: 150px;
}

#tablaTours th:nth-child(4), /* Hora */
#tablaTours td:nth-child(4) {
  width: 100px; 
  min-width: 95px;
}

#tablaTours th:nth-child(5), /* Cantidad */
#tablaTours td:nth-child(5) {
  width: 80px; 
  min-width: 55px;
}

#tablaTours th:nth-child(6), /* Lugar */
#tablaTours td:nth-child(6) {
  width: 180px; /* Reducido significativamente */
  min-width: 160px;
}

#tablaTours th:nth-child(7), /* Acciones */
#tablaTours td:nth-child(7) {
  width: 60px;
  min-width: 55px;
  text-align: center;
}
/* --- ESTILOS DE VALIDACIÓN PARA LA TABLA BITÁCORA --- */

/* Estilo para campos REQUERIDOS que están VACÍOS (Fondo Rojo Claro) */
.bitacora-input-vacio-requerido {
  border-color: #E74C3C !important; /* Borde rojo fuerte */
  background-color: #f9e6e6 !important; /* Fondo rojo muy pálido */
}

/* Estilo para campos IMPORTANTES que están VACÍOS (Fondo Azul Claro) */
.bitacora-input-vacio-importante {
  border-color: #3498DB !important; /* Borde azul */
  background-color: #eaf5fb !important; /* Fondo azul muy pálido */
}
.bitacora-input-default {
  border-color: #3498DB !important; /* Borde azul */
  background-color: #eaf5fb !important; /* Fondo azul muy pálido */
}
/* --- FIN DE ESTILOS DE VALIDACIÓN --- */
/* En index.html, dentro de <style> */


/* --- AJUSTE IMPORTANTE PARA EL BODY --- */
/* Añadimos un padding-top al body para que el contenido principal
   no quede oculto debajo del nuevo encabezado fijo. */
body {
  padding-top: 60px; /* El alto aproximado de tu header */
  /* ... el resto de tus estilos de body ... */
}
/* ===== ESTILOS PARA EL NUEVO ENCABEZADO Y MENÚ DE PERFIL (MODIFICADO) ===== */
.app-header {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  background: rgba(44, 62, 80, 0.95);
  backdrop-filter: blur(8px);
  -webkit-backdrop-filter: blur(8px);
  padding: 0 25px;
  box-shadow: 0 2px 8px rgba(0,0,0,0.25);
  z-index: 10000;
  color: #ecf0f1;
  height: 60px;
  display: flex;
  align-items: center;
}

.header-content {
  display: flex;
  justify-content: space-between; /* Empuja el placeholder a la izq, perfil a la der */
  align-items: center;
  width: 100%;
  max-width: 1200px; /* O el ancho que prefieras para el contenido centrado */
  margin: 0 auto;
}

.header-left-placeholder { /* Ocupa el espacio izquierdo */
  flex-grow: 1;
}

/* No necesitamos .app-title si lo quitaste */

.profile-menu {
  position: relative;
  display: inline-block;
}

.profile-trigger {
  background-color: transparent;
  color: #ecf0f1;
  padding: 10px 15px; /* Ajusta el padding para el nuevo contenido */
  font-size: 0.95rem; /* Un poco más grande para "Mi Perfil" */
  font-weight: 500;
  border: none;
  cursor: pointer;
  border-radius: 6px;
  transition: background-color 0.2s;
  display: flex;
  align-items: center;
}

.profile-trigger:hover, .profile-trigger.active {
  background-color: rgba(255, 255, 255, 0.15); /* Un poco más visible al pasar el mouse */
}

.profile-icon {
  font-size: 1.3em; /* Tamaño del icono de persona */
  margin-right: 8px;
}

.profile-text {
  margin-right: 8px; /* Espacio entre "Mi Perfil" y la flecha */
}

.profile-caret {
  font-size: 0.8em;
  transition: transform 0.2s;
}

.profile-trigger.active .profile-caret {
  transform: rotate(180deg);
}

.profile-dropdown-content {
  display: none;
  position: absolute;
  background-color: #ffffff; /* Fondo blanco para el dropdown */
  min-width: 220px; /* Ancho del dropdown */
  box-shadow: 0px 8px 20px 0px rgba(0,0,0,0.15); /* Sombra más suave */
  z-index: 1;
  border-radius: 8px; /* Bordes más redondeados */
  right: 0;
  top: calc(100% + 8px); /* Espacio un poco mayor debajo del trigger */
  overflow: hidden;
  border: 1px solid #e0e0e0; /* Borde sutil */
}

.profile-dropdown-content a {
  color: #2c3e50;
  padding: 12px 18px; /* Padding ajustado */
  text-decoration: none;
  display: flex; /* Para alinear icono y texto */
  align-items: center;
  font-size: 0.9rem;
  border-bottom: 1px solid #e7e7e7; /* Separador más claro */
}
.profile-dropdown-content a:last-child {
  border-bottom: none;
}

.profile-dropdown-content a:hover {
  background-color: #f5f5f5; /* Hover más sutil */
}

.dropdown-icon {
  margin-right: 10px;
  width: 16px; /* Ancho fijo para iconos */
  text-align: center;
  color: #555; /* Color para los iconos del dropdown */
}
/* Estilos para el Modal de Cambiar Contraseña */
.profile-modal {
  display: none;
  position: fixed;
  z-index: 10001; /* Encima del overlay pero debajo de mensajes críticos si los hubiera */
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  overflow: auto;
  background-color: rgba(0,0,0,0.6);
  align-items: center;
  justify-content: center;
}

.profile-modal-content {
  background-color: #fff;
  margin: auto;
  padding: 30px;
  border: 1px solid #888;
  width: 90%;
  max-width: 450px;
  border-radius: 12px;
  box-shadow: 0 5px 15px rgba(0,0,0,0.3);
  position: relative;
  color: #333;
}

.profile-modal-close {
  color: #aaa;
  position: absolute;
  top: 10px;
  right: 20px;
  font-size: 28px;
  font-weight: bold;
  transition: color 0.2s;
}

.profile-modal-close:hover,
.profile-modal-close:focus {
  color: #333;
  text-decoration: none;
  cursor: pointer;
}

.profile-modal h3 {
  margin-top: 0;
  margin-bottom: 20px;
  color: #2C3E50;
  text-align: center;
  font-size: 1.5rem;
}

.profile-modal label {
  display: block;
  margin-bottom: 6px;
  font-weight: bold;
  font-size: 0.9rem;
  color: #2C3E50;
}

.profile-modal input[type="password"] {
  width: 100%;
  padding: 10px;
  margin-bottom: 20px; /* Más espacio entre inputs */
  border: 1px solid #ccc;
  border-radius: 4px;
  font-size: 0.9rem;
}

.profile-modal button.verde {
  width: 100%;
  padding: 12px;
  font-size: 1rem;
}
/* Ajuste para que el contenido principal no quede oculto */
body {
  padding-top: 60px; /* Altura del .app-header */
}
.highlighted-error {
  background-color: #fdd8d8 !important; /* Un rojo claro para indicar error */
  transition: background-color 0.5s;
}
  </style>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
</head>
<body>
<header class="app-header">
  <div class="header-content">
    <!-- Elemento vacío a la izquierda para empujar el menú de perfil a la derecha -->
    <div class="header-left-placeholder"></div>

    <div class="profile-menu">
      <button type="button" class="profile-trigger" onclick="toggleProfileDropdown()">
        <i class="fas fa-user-circle profile-icon"></i> <!-- Icono de persona -->
        <span class="profile-text">Mi Perfil</span>
        <i class="fas fa-caret-down profile-caret"></i>
      </button>
     <div class="profile-dropdown-content" id="profileDropdown">
  <a href="#" onclick="mostrarModalCambiarContrasena(); return false;">
    <i class="fas fa-key dropdown-icon"></i> Cambiar Contraseña
  </a>
  
  <!-- ======================= -->
  <!--      NUEVO ENLACE       -->
  <!-- ======================= -->
  <a href="#" onclick="abrirMiCalendario(); return false;">
    <i class="fas fa-calendar-alt dropdown-icon"></i> Mi Calendario
  </a>
  
  <a href="#" onclick="cerrarSesion(); return false;">
    <i class="fas fa-sign-out-alt dropdown-icon"></i> Cerrar Sesión
  </a>
</div>
    </div>
  </div>
</header>

<!-- Modal para Cambiar Contraseña (inicialmente oculto) -->
<div id="modalCambiarContrasena" class="profile-modal">
  <div class="profile-modal-content">
    <span class="profile-modal-close" onclick="cerrarModalCambiarContrasena()">×</span>
    <h3>Cambiar Contraseña</h3>
    <label for="oldPassword">Contraseña Actual:</label>
    <input type="password" id="oldPassword" required>
    <label for="newPassword">Nueva Contraseña:</label>
    <input type="password" id="newPassword" required>
    <label for="confirmNewPassword">Confirmar Nueva Contraseña:</label>
    <input type="password" id="confirmNewPassword" required>
    <button type="button" class="verde" onclick="procesarCambioContrasena()">Guardar Cambios</button>
  </div>
</div>
  <div id="overlay">
    <div class="spinner"></div>
    <div>Cargando, por favor espere</div>
  </div>
  <div id="mensajeFinal">Datos guardados correctamente, creando comprobante...</div>
  <div class="container">
    <div id="watermark">ANULADO</div>
    <h1>Voucher de Servicios</h1>
    <p class="slogan"></p>
    <form>
      <!-- Información General -->
      <div class="section info-general">
        <div class="voucher-agencia-container">
  <!-- Contenedor modificado para incluir el input y el botón de búsqueda -->
 <!-- Contenedor para el campo Voucher ID y el botón de búsqueda -->
<div class="voucher-id-container voucher-search-container">
  <label for="voucherId">Voucher ID:</label>
  
  <div class="voucher-id-input-button">
    <!-- INPUT CORREGIDO:
         - 'list' ahora apunta a "listaVouchers"
         - Se mantiene el autocomplete="new-password"
    -->
    <input type="text" id="voucherId" name="voucherId" list="listaVouchers" class="form-control" placeholder="Escriba para buscar o generar nuevo voucher..." autocomplete="new-password">
    
    <!-- Botón de Búsqueda -->
    <button type="button" class="boton-buscar-morado" onclick="buscarVoucher()">
      Buscar
    </button>
  </div>
  
  <!-- DATALIST ÚNICO Y CORRECTO:
       - Este es el elemento que tu JavaScript llenará con las opciones.
  -->
  <datalist id="listaVouchers"></datalist>
</div>
  <!-- El contenedor de Agencia se queda igual -->
  <div class="voucher-id-container">
    <label for="agencia">Agencia:</label>
    <select id="agencia"></select>
  </div>
</div>
        
         <div class="flex-row">
           <div class="half-width">
             <label for="sucursal">Sucursal:</label>
             <select id="sucursal"></select>
           </div>
           <div class="half-width">
             <label for="salesAgent">Agent Gmail:</label>
             <input type="text" id="salesAgent" placeholder="Correo del agente" readonly>
           </div>
         </div>
         <div class="flex-row">
           <div class="half-width">
             <label for="usuario">Usuario:</label>
             <select id="usuario"></select>
           </div>
         </div>
      </div>
  <!-- Pasajeros -->
      <div class="section">
         <h2>Pasajeros</h2>
         <table id="tablaPasajeros">  <!-- ENVUELVE CON <table> -->
           <thead>
             <tr>
               <th>Nombre</th>
               <th>Pasaporte/ID</th>
               <th>País</th>
               <th>Edad</th>
               <th>Acciones</th>
             </tr>
           </thead>
           <tbody>
             <!-- Las filas se añadirán aquí -->
           </tbody>
         </table>
         <div class="button-group">
           <button type="button" class="verde" onclick="anadirFilaPasajero()">Añadir Pasajero</button>
           <!-- Asegúrate de haber eliminado el botón global "Eliminar Pasajero" de aquí -->
         </div>
      </div>
      <!-- Contacto -->
      <div class="section">
         <div class="passenger-fields">
           <div class="half-width">
             <label for="passengerWsp">Passenger WhatsApp:</label>
             <input type="text" id="passengerWsp" placeholder="+528765432">
           </div>
           <div class="half-width">
             <label for="passengerEmail">Passenger E-mail:</label>
             <input type="email" id="passengerEmail" placeholder="example@gmail">
           </div>
         </div>
      </div>
<!-- Tours -->
<div class="section">
    <h2>Tours</h2>

    <!-- El div .table-wrapper ha sido eliminado. La tabla ahora está directamente aquí. -->
    <table id="tablaTours">
      <thead>
        <tr>
          <th>Fecha</th>
          <th>Tour</th>
          <th>Operador</th>
          <th>Hora</th>
          <th>#Pax</th>
          <th>Lugar</th>
          <th>Acciones</th>
        </tr>
      </thead>
      <tbody>
        <!-- Las filas se añadirán aquí -->
      </tbody>
    </table>

    <div class="button-group">
      <button type="button" class="verde" onclick="anadirFilaTour()">Añadir Tour</button>
    </div>
</div>
      <!-- Restricciones -->
      <div class="section restricciones">
         <label for="restricciones">Observaciones:</label>
         <textarea id="restricciones" rows="3">No necesario</textarea>
      </div>
      <!-- Pago -->
      <div class="section pago">
         <h2>Pago</h2>
   <div class="payment-container">
     <div class="payment-field">
       <label for="total">Total:</label>
       <!-- AÑADIMOS oninput="recalcularPago()" -->
       <input type="number" id="total" step="0.01" placeholder="Total a pagar" oninput="recalcularPago()">
     </div>
     <div class="payment-field">
       <label for="deposito">Depósito:</label>
       <!-- AÑADIMOS oninput="recalcularPago()" -->
       <input type="number" id="deposito" step="0.01" placeholder="Monto del depósito" oninput="recalcularPago()">
     </div>
     <div class="payment-field">
       <label for="balance">Balance:</label>
       <input type="number" id="balance" step="0.01" placeholder="Balance restante" readonly>
     </div>
   </div>
</div>
     <!-- CÓDIGO MODIFICADO (DESPUÉS DEL CAMBIO) -->
<div class="button-group">
   <button type="button" id="btnGuardarYEnviar" class="verde" onclick="guardarYEnviar()">Continuar Venta</button>
   <button type="button" id="btnLimpiar" class="boton" onclick="limpiarFormularioCompleto()">Limpiar Voucher</button>
   <button type="button" id="btnAnular" class="purpura" style="display:none;" onclick="anularVoucherIndex()">Anular Voucher</button>
   
  
   <!-- ===================================== -->
</div>
      <!-- Sección Descripción -->
<div class="section">
  <h2 id="descripcionTitulo" onclick="toggleDescripcionClave()">Mi agencia 🔑</h2>
  <div id="descripcionClaveContainer">
    <label for="descripcionClaveInput">Clave:</label>
    <input type="password" id="descripcionClaveInput" placeholder="Ingrese clave unica de agencia">
    <button type="button" class="verde" onclick="verificarClaveDescripcion()">Desbloquear</button>
  </div>
  <div id="descripcionContenido">
     <div class="filtro-container">
       <h3>Agencia: <span id="descripcionAgenciaNombre"></span></h3>
       <label for="descripcionFechaFiltro">Filtrar por Fecha de Compra:</label>
       <input type="date" id="descripcionFechaFiltro" onchange="cargarDatosDescripcion()">
    </div>
     <!-- Envolvemos la tabla de descripción en contenedor de scroll -->
     <div class="table-scroll-container">
       <div class="table-wrapper" id="descripcionTableWrapper">
         <table id="descripcionTable">
            <thead>
               <tr>
                  <th>SRI</th>
                  <th>ID Voucher</th>
                  <th>Fecha Compra</th>
                  <th>Sucursal</th>
                  <th>Balance</th>
                  <th>Depósito</th>
                  <th>Total</th>
                  <th>Costos Op.</th>
                  <th>Comisión Total</th>
                  <th>Comisión Agente</th>
                  <th>Comisión Agencia</th>
                  <th>Estado</th>
                  <th>Usuario</th>
                  <th>Descripción</th>
               </tr>
            </thead>
            <tbody id="descripcionTableBody">
               <!-- Las filas se cargarán dinámicamente con JavaScript -->
            </tbody>
         </table>
       </div>
       <!-- Botones de scroll horizontal -->
       <div class="table-scroll-buttons" id="descripcionScrollBtns">
         <button type="button" onclick="scrollTable('descripcionTableWrapper', -150)" title="Scroll Izquierda">‹</button>
         <button type="button" onclick="scrollTable('descripcionTableWrapper', 150)" title="Scroll Derecha">›</button>
       </div>
     </div>
     <div class="button-group">
       <button type="button" class="verde" onclick="guardarDatosDescripcion()">Guardar Cambios Agencia</button>
       <button type="button" class="azul-sri" onclick="descargarSRIDescripcionExcel()" title="Descargar filas seleccionadas para SRI a un archivo Excel">
  <i class="fas fa-file-excel"></i> Descargar SRI
</button>
     </div>
     <div class="clave-change-container">
       <h4>Cambiar Clave de Agecia</h4>
       <label for="nuevaClaveDescripcionInput">Nueva Clave:</label>
       <input type="password" id="nuevaClaveDescripcionInput" placeholder="Ingrese nueva clave">
       <button type="button" class="boton" onclick="cambiarClaveDescripcion()">Actualizar Clave</button>
     </div>
  </div>
</div>

    </form>
  </div> <!-- FIN DE .container -->

<!-- ================================================== -->
<!--    CONTENEDOR INDEPENDIENTE PARA LA BITÁCORA       -->
<!-- ================================================== -->
<div id="bitacoraContainer" style="display:none;">
  <div class="section" id="bitacoraSectionInternal">
    <h2>Bitácora</h2>
<!-- Cerca de la línea 818 de tu código original -->
<div class="filtro-container">
  <label for="bitacoraFechaFiltro">Filtrar por Fecha:</label>
  <input type="date" id="bitacoraFechaFiltro" onchange="cargarBitacora()">

  <label for="bitacoraTourFiltro">Filtrar por Tour:</label>
  <!-- MODIFICACIÓN AQUÍ -->
  <select id="bitacoraTourFiltro" onchange="actualizarFiltroOperador(); cargarBitacora();">
    <option value="">— Todos —</option>
  </select>

  <label for="bitacoraOperadorFiltro">Filtrar por Operador:</label>
  <!-- MODIFICACIÓN AQUÍ -->
  <select id="bitacoraOperadorFiltro" onchange="cargarBitacora()" disabled>
    <option value="">— Todos —</option>
  </select>
</div>
          <div class="mostrar-todas-container">
      <!-- ===== NUEVO BOTÓN REFRESH ===== -->
      <button type="button" class="toggle-button" onclick="refrescarBitacora()" title="Refrescar datos de la bitácora y descartar cambios no guardados" style="margin-right: 10px;">
          <i class="fas fa-sync-alt"></i> Refresh
      </button>
      <!-- ===== FIN NUEVO BOTÓN REFRESH ===== -->
      <button type="button" class="toggle-button" onclick="mostrarTodasLasColumnasBitacora()" title="Mostrar todas las columnas ocultas">
          <i class="fas fa-eye"></i> Mostrar Todas
      </button>
    </div>
    <div class="table-scroll-container" id="bitacoraScrollVerticalContainer"> 
      <div class="table-wrapper" id="bitacoraTableWrapper">
        <table id="bitacoraTable">
<!-- REEMPLAZA EL thead COMPLETO DE LA TABLA BITÁCORA CON ESTE ORDEN FINAL -->
<thead>
  <tr>
    <th><div class="bitacora-header-content"><span>PDF</span></div></th>
    <th><div class="bitacora-header-content"><span>SRI</span></div></th>
    <th><div class="bitacora-header-content"><span>Fecha Tour</span><span class="toggle-visibility fas" data-colkey="fechaTour"></span></div></th>
    <th><div class="bitacora-header-content"><span>Hora Tour</span><span class="toggle-visibility fas" data-colkey="time"></span></div></th>
    <th><div class="bitacora-header-content"><span>Agencia</span><span class="toggle-visibility fas" data-colkey="agencia"></span></div></th>
    <th><div class="bitacora-header-content"><span>Sucursal</span><span class="toggle-visibility fas" data-colkey="sucursal"></span></div></th>
    <th><div class="bitacora-header-content"><span>Usuario</span><span class="toggle-visibility fas" data-colkey="usuario"></span></div></th>
    <th><div class="bitacora-header-content"><span>Pasaporte/ID</span><span class="toggle-visibility fas" data-colkey="passportId"></span></div></th>
    <th><div class="bitacora-header-content"><span>Nombre Pasajero</span><span class="toggle-visibility fas" data-colkey="nombre"></span></div></th>
    <th><div class="bitacora-header-content"><span>WhatsApp</span><span class="toggle-visibility fas" data-colkey="whatsapp"></span></div></th>
    <th><div class="bitacora-header-content"><span>Tour</span><span class="toggle-visibility fas" data-colkey="tour"></span></div></th>
    <th><div class="bitacora-header-content"><span>Operador</span><span class="toggle-visibility fas" data-colkey="operador"></span></div></th>
    <th><div class="bitacora-header-content"><span>Whatsapp Agente</span><span class="toggle-visibility fas" data-colkey="whatsappAgente"></span></div></th>
    <th><div class="bitacora-header-content"><span>Email</span><span class="toggle-visibility fas" data-colkey="email"></span></div></th>
    <th><div class="bitacora-header-content"><span>#PAX</span><span class="toggle-visibility fas" data-colkey="pax"></span></div></th>
    <th><div class="bitacora-header-content"><span>Niños/Mayores</span><span class="toggle-visibility fas" data-colkey="ninosAdultosMayores"></span></div></th>
    <th><div class="bitacora-header-content"><span>Adultos</span><span class="toggle-visibility fas" data-colkey="adultos"></span></div></th>
    <th><div class="bitacora-header-content"><span>Ingreso</span><span class="toggle-visibility fas" data-colkey="ingreso"></span></div></th>
    <th><div class="bitacora-header-content"><span>Gastos</span><span class="toggle-visibility fas" data-colkey="gastos"></span></div></th>
    <th><div class="bitacora-header-content"><span>Total</span><span class="toggle-visibility fas" data-colkey="total"></span></div></th>
    <th><div class="bitacora-header-content"><span>Guía</span><span class="toggle-visibility fas" data-colkey="guiaAsignado"></span></div></th>
    <th><div class="bitacora-header-content"><span>Asistencia</span><span class="toggle-visibility fas" data-colkey="asistencia"></span></div></th>
    <th><div class="bitacora-header-content"><span>Nota</span><span class="toggle-visibility fas" data-colkey="nota"></span></div></th>
    <th><div class="bitacora-header-content"><span>Acciones</span></div></th>
    <th><div class="bitacora-header-content"><span>ID Voucher</span><span class="toggle-visibility fas" data-colkey="idVoucher"></span></div></th>
    <th><div class="bitacora-header-content"><span>ID Reserva</span><span class="toggle-visibility fas" data-colkey="idReserva"></span></div></th>
    <th><div class="bitacora-header-content"><span>Fecha Bitácora</span><span class="toggle-visibility fas" data-colkey="fechaActual"></span></div></th>
    <th><div class="bitacora-header-content"><span>Estado</span><span class="toggle-visibility fas" data-colkey="estadoBitacora"></span></div></th>
  </tr>
</thead>
          <tbody>
            <!-- El mensaje placeholder se pondrá con JS -->
          </tbody>
        </table>
      </div>
       <div class="table-scroll-buttons" id="bitacoraScrollBtns">
         <button type="button" onclick="scrollTable('bitacoraTableWrapper', -150)" title="Scroll Izquierda">‹</button>
         <button type="button" onclick="scrollTable('bitacoraTableWrapper', 150)" title="Scroll Derecha">›</button>
       </div>
    </div>
    <!-- ============================================= -->
    <!--          NUEVO ORDEN: BOTONES PRIMERO         -->
    <!-- ============================================= -->
    
    <!-- 1. GRUPO DE BOTONES DE ACCIÓN -->
    <div class="button-group" style="margin-top: 25px;">
      <button type="button" class="verde" onclick="anadirFilaBitacora()">
        Añadir fila
      </button>
      <button type="button" class="boton" onclick="guardarYReordenarBitacora()">
        Guardar cambios y reordenar
      </button>
      <button type="button" class="purpura" onclick="prepararYGenerarComprobantePDFBitacora()" title="Generar PDF para filas seleccionadas">
        <i class="fas fa-file-pdf"></i> Generar Comprobante
      </button>
      <button type="button" class="azul-sri" onclick="descargarSRIExcel()" title="Descargar filas seleccionadas para SRI a un archivo Excel">
        <i class="fas fa-file-excel"></i> Descargar SRI
      </button>
    </div>

    <!-- 2. RESUMEN DE TOTALES -->
    <div id="bitacoraSumatoriasContainer">
      <h3 class="sumatoria-titulo">Resumen de Bitácora</h3>
      <div class="sumatoria-wrapper">
        <div class="sumatoria-item">
          <span class="sumatoria-label">Total Ingresos</span>
          <span id="bitacoraTotalIngreso" class="sumatoria-valor">0.00</span>
        </div>
        <div class="sumatoria-item">
          <span class="sumatoria-label">Total Gastos</span>
          <span id="bitacoraTotalGastos" class="sumatoria-valor">0.00</span>
        </div>
        <div class="sumatoria-item">
          <span class="sumatoria-label">Total General</span>
          <span id="bitacoraTotalGeneral" class="sumatoria-valor sumatoria-valor-grande">0.00</span>
        </div>
      </div>
    </div>
  </div> <!-- FIN DE #bitacoraSectionInternal -->
</div> <!-- FIN DE #bitacoraContainer -->

  <script> 
   // --- Variables Globales ---
    let activeUserEmail = "";
    let formInitialized = false;
    let bitacoraDataClient = [];
    let hiddenBitacoraColumns = JSON.parse(localStorage.getItem('hiddenBitacoraColumns') || '{}');
    let listaRucsBitacoraPermitidos = [];
    // Objeto que contendrá las reglas de negocio de la bitácora (tours y operadores permitidos)
    let opcionesBitacora = { toursPorAgencia: {}, operadoresPorTour: {} }; 
    // Objeto para las listas de autocompletado del formulario de VOUCHER (se cargará desde el servidor)
    let miniRegistro = [];
    let loadedVoucherId = null;
    let descripcionDesbloqueada = false;
    let isProgrammaticChange = false;

    let optionsData = {
      tours: [
        "🔵 Ferry Isabela",
        "🔴 Ferry Santa Cruz",
        "🟢 Ferry San Cristobal",
        "⚫ Ferry Floreana",
        "🔴 Ferry Santa Cruz Retorno",
        "🟢 Ferry San Cristobal Retorno",
        "✈️ Vuelo a Isabela",
        "✈️Vuelo a Santa Cruz",
        "✈️ Vuelo a San Cristobal",
        "✈️ Vuelo a Floreana",
        "Bartolome Tierra",
        "Leon dormido Snorkel kr",
        "KAYACK en STA.C",
        "Parte Alta taxi con Guia",
        "Pinzon- Las Palmitas",
        "Pinzon - Playa eden",
        "Pinzon - La fe",
        "Pinzon - Dapnhe",
        "360 s/c",
        "Tuneles (Isabela)",
        "Full Isabela con ferry mismo dia",
        "Full Isabela sin ferrys",
        "Renta",
        "Ruta de la Toruga",
        "Parte Alta en Coche (santa Cruz)",
        "Tour Parte Alta (santa Cruz)",
        "Crucero",
        "🛳️Crucero 4 dias",
        "🛳️Crucero 5 dias",
        "🛳️Crucero 6 dias",
        "🛳️Crucero 7 dias",
        "🛳️Crucero 8 dias",
        "🛳️Crucero 9 dias",
        "🛳️Crucero 10 dias",
        "🛳️Crucero 12 dias",
        "🛳️Crucero 13 dias",
        "🛳️Crucero 14 dias",
        "🛳️Crucero 15 dias",
        "🛳️Crucero 16 dias",
        "🛳️Crucero 17 dias",
        "🛳️Crucero 18 dias",
        "🛳️Crucero 19 dias",
        "🛳️Crucero 20 dias",
        "🛳️Crucero 21 dias",
        "🛳️Crucero 22 dias",
        "🛳️Crucero 23 dias",
        "🛳️Crucero 24 dias",
        "🛳️Crucero 25 dias",
        "Parte alta San cristobal",
        "Parte alta en taxi con Guia (San cristobal)",
        "Parte alta en taxi (San cristobal)",
        "las Grietas",
         "Ruta Charles Darwin",
        "Volcan Sierra Negra",
        "Tour Volcan Chico",
        "Tour Tintoreras (Isabela)",
        "Tour 360° San cristobal",
        "Isla Santa Fe",
        "Isla Plaza Sur",
        "Isla Plaza Norte",
        "Snorkel Isla Tortuga (Isabela)",
        "Tour en Bicicleta a la Parte Alta de Santa Cruz",
        "El Junco (San cristobal)",
        "Bahia Elizabeth (Isabela)",
        "Rabida",
        "Cerro Brujo (San cristobal)",
        "Los Gemelos",
        "Tour en Kayak en la Bahia de Santa Cruz",
        "Bahia Urbina",
        "Tour en Kayak a Tintoreras",
        "Islote Daphne Mayor",
        "Punta Espinoza (Fernandina)",
        "Bahia Bainbridge",
        "Punta Mangle",
        "Bahia Sullivan",
        "Bahia Academia",
        "Islote Loberia",
        "Punta Suarez",
        "Caleta Tortuga Negra (Santa Cruz)",
        "Mirador de Los Tuneles",
        "Roca Union",
        "Kayak en la Playa de los Alemanes (Santa Cruz)",
        "Bahia Urbina (Isabela)",
        "Floreana Tierra",
        "Española",
        "tiburones martillo en Darwin y Wolf",
        "Islote Mosquera (Santa Cruz)",
        "Tour en bote a Playa Tortuga Bay (Santa Cruz)",
        "Bote Tortuga Bay (Santa Cruz)",
        "Excursion a las Minas de Azufre (Isabela)",
        "Floreana - Enderby",
        "Islote Corona del Diablo (Floreana)",
        "Punta Tortuga (Santa Cruz)",
        "Recorrer una Playa Blanca (Santiago)",
        "Bahia Darwin (Genovesa)",
        "🐢 Rancho el Chato",
        "🐢 Rancho Fortiz",
        "🏄Clases de surft",
        "BICICLETA Isabela",
         "BICICLETA Santa Cruz",
          "BICICLETA San Cristobal",
        "Dapnhe",
        "Española",
        "Seymour Tierra",
        "🥽Buceo Mosquera",
        "🥽Buceo Dapnhe",
        "🥽Buceo Plazas",
        "🥽Buceo Gordon",
        "🥽Buceo Punta Carrion",
        "🥽Buceo Bartolome",
          "🥽Buceo Nocturno",
            "🥽Buceo Naufragio",
        "🥽Buceo Isla tortuga isabela",
        "🥽Buceo Seymur",
        "🥽Buceo Naufragio San cristobal",
        "🥽Buceo en Islote Albany (Isabela)",
        "🥽Buceo en Islote Sin Nombre (Santa Cruz)",
        "🥽Buceo Leon dormido kr",
        "🥽Buceo en Daphne Menor",
        "🥽Buceo en Roca Cousins",
        "🥽Buceo en Punta Vicente Roca",
        "🥽Buceo en Punta Albemarle (Isabela)",
        "🥽Buceo en Punta Vicente Roca (Isabela)",
        "🥽Buceo en Bahia Darwin (Genovesa)",
        "🥽Buceo en Bahia Albemarle (Isabela)",
        "🥽Buceo en Roca Blanca (Isabela)",
        "🥽Buceo en Roca Redonda (Isabela)",
        "🥽Buceo en Cabo Marshall (Isabela)",
        "🥽Buceo en Punta Cristobal (San cristobal)",
        "🥽Buceo en Punta Mangle (Fernandina)",
        "🥽Buceo en Bahia Darwin (Genovesa)",
        "🥽Buceo en Punta Espinoza (Fernandina)",
        "🥽Buceo en Islote Guy Fawkes (Santa Cruz)",
        "🥽Buceo en Islote Beagle (Santa Cruz)",
        "🥽Buceo en Isla Tortuga(Santa Cruz)",
        "🥽Buceo en Bahia Elizabeth (Isabela)",
        "🥽Buceo en Islote Daphne Mayor (Santa Cruz)",
        "🥽Buceo en Bahia Crossman (San cristobal)",
        "🥽Buceo en Punta Lopez (Española)",
        "🥽Buceo en Bahia Albatros (Española)"
      ],
      boatOrGuide: [
        "Agent George",
        "Gecorp",
        "Agent Ingrid",
         "Agent Ingrid",
        "Agent Geoconda",
        "Agent Valessca",
        "Agent Anthony",
        "Agent Diego",
        "Agent Mary",
        "Agent Mishell",
        "Agent Nadya Martinez",
        "Agent Brandon",
        "Macarron",
        "Albatros",
        "Rene",
        "Balet Azul 2",
        "Extasis",
        "Scuba Iguana",
        "Harry Moscoso",
        "David",
        "Aquaventures",
        "Angeles Taiz",
        "Gaby",
        "Cindy",
        "Contagio",
        "Yakupi",
        "Andrea",
        "Ecobaltica",
        "Leopoldo",
        "Shark",
        "Altamar",
        "Gino",
        "Santa Fe",
        "Narel",
        "Espanola",
        "Nautilus",
        "Adriana",
        "Wendy",
        "Joshue",
        "Mariluna",
        "Taxi Jose",
        "Daniela",
        "Patricia",
        "Suquito",
        "Contagious",
        "Jazmin",
        "Paddy",
        "Roal",
        "Mileny",
        "Galilea",
        "Arrecife",
        "Bleissing",
        "Destiny",
        "Queen Jenny",
        "Sigilosa",
        "Brithanny",
        "Gaviota",
        "Fragata",
        "Amparito",
        "D'Luis",
        "Fabricio",
        "Gema",
        "Andy",
        "Ocean",
        "Gladel",
        "Susy Love",
        "Andry",
        "Pelicano",
        "Checho",
        "Wolf",
        "Cally",
        "Medusa",
        "Tropical II",
        "Captus",
        "Rosedelco",
        "Celso",
        "Moncayo",
        "Orlando",
        "Oficina",
        "EAV Airline",
        "Julian",
        "Aqua Vew",
        "Ana Belen",
        "Chamaco",
        "Vikingo",
        "Sta. Cruz",
        "Transmagal",
        "Monica",
        "Osprey",
        
        "Guia Miriam Leon",
        "Guia Jose de la Cruz ",
        "Guia Leonardo Holguin ",
        "Guia Sara Rosado ",
        "Guia Frank Bucheli ",
        "Guia Manuel Mantilla ",
        "Guia Johan Torres ",
        "Guia Oswaldo Chapi ",
        "Guia Fatima Fernandez ",
        "Guia Bayron Aguirre ",
        "Guia Victor Sotomayor ",
        "Guia Pavel ",
        "Guia Gonzalo Calderon ",
        "Guia Jose Villavicencio ",
        "Guia Margoth Freire ",
        "Guia Mario P. ",
        "Guia Ruben Pesantes ",
        "Guia Victor ",
        "Guia Freddy V. ",
        "Guia Ruben Calderon ",
        "Guia Marco J. ",
        "Guia Ruben P. "],
      paises: [
        "Afganistan (AFG)", "Albania (ALB)", "Alemania (DEU)", "Andorra (AND)", "Angola (AGO)",
        "Antigua y Barbuda (ATG)", "Arabia Saudita (SAU)", "Argelia (DZA)", "Argentina (ARG)",
        "Armenia (ARM)", "Australia (AUS)", "Austria (AUT)", "Azerbaiyan (AZE)", "Bahamas (BHS)",
        "Bangladesh (BGD)", "Barbados (BRB)", "Barhein (BHR)", "Belgica (BEL)", "Belice (BLZ)",
        "Benin (BEN)", "Bielorrusia (BLR)", "Birmania (MMR)", "Bolivia (BOL)", "Bosnia y Herzegovina (BIH)",
        "Botsuana (BWA)", "Brasil (BRA)", "Brunei (BRN)", "Bulgaria (BGR)", "Burkina Faso (BFA)",
        "Burundi (BDI)", "Butan (BTN)", "Cabo Verde (CPV)", "Camboya (KHM)", "Cameroon (CMR)",
        "Canada (CAN)", "Catar (QAT)", "Chad (TCD)", "Chile (CHL)", "China (CHN)",
        "Chipre (CYP)", "Colombia (COL)", "Comoras (COM)", "Corea del Norte (PRK)", "Corea del Sur (KOR)",
        "Costa de Marfil (CIV)", "Costa Rica (CRI)", "Croacia (HRV)", "Cuba (CUB)", "Dinamarca (DNK)",
        "Dominica (DMA)", "Ecuador (ECU)", "Egipto (EGY)", "El Salvador (SLV)", "Emiratos Arabes Unidos (ARE)",
        "Eritrea (ERI)", "Eslovaquia (SVK)", "Eslovenia (SVN)", "Espana (ESP)", "Estados Unidos (USA)",
        "Estonia (EST)", "Etiopia (ETH)", "Filipinas (PHL)", "Finlandia (FIN)", "Fiyi (FJI)",
        "Francia (FRA)", "Gabon (GAB)", "Gambia (GMB)", "Georgia (GEO)", "Ghana (GHA)",
        "Grecia (GRC)", "Granada (GRD)", "Guatemala (GTM)", "Guyana (GUY)", "Guinea (GIN)",
        "Guinea-Bisau (GNB)", "Guinea Ecuatorial (GNQ)", "Haiti (HTI)", "Honduras (HND)", "Hungria (HUN)",
        "India (IND)", "Indonesia (IDN)", "Irak (IRQ)", "Iran (IRN)", "Irlanda (IRL)",
        "Islandia (ISL)", "Islas Marshall (MHL)", "Islas Salomon (SLB)", "Israel (ISR)", "Italia (ITA)",
        "Jamaica (JAM)", "Japon (JPN)", "Jordania (JOR)", "Kazajistan (KAZ)", "Kenia (KEN)",
        "Kirguistan (KGZ)", "Kiribati (KIR)", "Kuwait (KWT)", "Laos (LAO)", "Lesoto (LSO)",
        "Letonia (LVA)", "Libano (LBN)", "Liberia (LBR)", "Libia (LBY)", "Liechtenstein (LIE)",
        "Lituania (LTU)", "Luxemburgo (LUX)", "Macedonia del Norte (MKD)", "Madagascar (MDG)",
        "Malasia (MYS)", "Malaui (MWI)", "Maldivas (MDV)", "Mali (MLI)", "Malta (MLT)",
        "Marruecos (MAR)", "Mauricio (MUS)", "Mauritania (MRT)", "Mexico (MEX)", "Micronesia (FSM)",
        "Moldavia (MDA)", "Monaco (MCO)", "Mongolia (MNG)", "Montenegro (MNE)", "Mozambique (MOZ)",
        "Namibia (NAM)", "Nauru (NRU)", "Nepal (NPL)", "Nicaragua (NIC)", "Niger (NER)",
        "Nigeria (NGA)", "Noruega (NOR)", "Nueva Zelanda (NZL)", "Oman (OMN)", "Paises Bajos (NLD)",
        "Pakistan (PAK)", "Palaos (PLW)", "Palestina (PSE)", "Panama (PAN)", "Papua Nueva Guinea (PNG)",
        "Paraguay (PRY)", "Peru (PER)", "Polonia (POL)", "Portugal (PRT)", "Reino Unido (GBR)",
        "Republica Centroafricana (CAF)", "Republica Checa (CZE)", "Republica Democratica del Congo (COD)",
        "Republica Dominicana (DOM)", "Ruanda (RWA)", "Rumania (ROU)", "Rusia (RUS)", "Samoa (WSM)",
        "San Cristobal y Nieves (KNA)", "San Marino (SMR)", "San Vicente y las Granadinas (VCT)",
        "Santa Lucia (LCA)", "Santo Tome y Principe (STP)", "Senegal (SEN)", "Serbia (SRB)",
        "Seychelles (SYC)", "Sierra Leona (SLE)", "Singapur (SGP)", "Siria (SYR)", "Somalia (SOM)",
        "Sri Lanka (LKA)", "Sudafrica (ZAF)", "Sudan (SDN)", "Sudan del Sur (SSD)", "Suecia (SWE)",
        "Suiza (CHE)", "Surinam (SUR)", "Tailandia (THA)", "Tanzania (TZA)", "Tayikistan (TJK)",
        "Timor Oriental (TLS)", "Togo (TGO)", "Tonga (TON)", "Trinidad y Tobago (TTO)", "Tunisia (TUN)",
        "Turkmenistan (TKM)", "Turquia (TUR)", "Tuvalu (TUV)", "Ucrania (UKR)", "Uganda (UGA)",
        "Uruguay (URY)", "Uzbekistan (UZB)", "Vanuatu (VUT)", "Venezuela (VEN)", "Vietnam (VNM)",
        "Yemen (YEM)", "Yibuti (DJI)", "Zambia (ZMB)", "Zimbabue (ZWE)", "Galapagos (GPS)"
      ],
      teering: [
        "Muelle",
        "Oficina",
        "Hotel:"
      ],
      edades: [
        // ... (lista de edades, si aplica)
      ]
    };

    // --- 1. INICIALIZACIÓN ---
    document.addEventListener("DOMContentLoaded", inicializarFormulario);

    function inicializarFormulario() {
        console.log("Iniciando inicialización...");
        document.getElementById("overlay").style.display = "flex";
        google.script.run
            .withSuccessHandler(datosInicialesRecibidos)
            .withFailureHandler(errorAlInicializar)
            .obtenerDatosIniciales();
    }
// En index.html, dentro de <script>

function datosInicialesRecibidos(data) {
    document.getElementById("overlay").style.display = "none";
    console.log("Datos iniciales recibidos del servidor (v_final_perfil):", data);

    // Guardar datos globales importantes que vienen del servidor
    listaRucsBitacoraPermitidos = data.rucsBitacoraPermitidos || [];
    opcionesBitacora = data.opcionesBitacora || { toursPorAgencia: {}, operadoresPorTour: {} };
    // Si 'optionsData' (para datalists) viniera del servidor, se actualizaría aquí:
    // if(data.optionsData) optionsData = data.optionsData;

    activeUserEmail = data.nombreUsuario || ""; // Email del usuario logueado

    // Actualizar el campo "Agent Gmail" en el cuerpo del formulario (si aún existe)
    const salesAgentInput = document.getElementById("salesAgent");
    if (salesAgentInput) {
        salesAgentInput.value = activeUserEmail;
        actualizarInputClass(salesAgentInput);
    }

    // Actualizar el span del email en el encabezado (si existe)
    // Si decidiste quitarlo y solo tener "Mi Perfil", este span no existirá y el if lo manejará.
    const headerUserEmailSpan = document.getElementById("header-user-email");
    if (headerUserEmailSpan) {
        headerUserEmailSpan.textContent = activeUserEmail; // O "Mi Perfil" si ese es el texto que quieres
    } else {
        console.log("El elemento #header-user-email no se encontró en el DOM del header.");
    }

    // Configurar el select de Agencia
    const agenciaSelect = document.getElementById("agencia");
    agenciaSelect.innerHTML = ""; // Limpiar opciones previas

    let rucParaCargaInicial = "";
    let agenciaEstablecidaConExito = false;

    if (!data.agencias || data.agencias.length === 0) {
        agenciaSelect.add(new Option("-- Sin Agencias Asignadas --", ""));
        console.log("Agencias: No hay agencias asignadas al usuario.");
    } else {
        data.agencias.forEach(item => agenciaSelect.add(new Option(item.agencia, item.ruc)));
        console.log("Agencias: Pobladas en select:", data.agencias.map(a => `(RUC: ${a.ruc}, Nombre: ${a.agencia})`));

        // Intentar seleccionar la agencia preferida (la que se guardó como última usada por el usuario)
        if (data.agenciaSeleccionada) {
            console.log("Agencias: Intentando seleccionar agencia preferida (última usada):", data.agenciaSeleccionada);
            const existeAgenciaPreferida = data.agencias.some(ag => ag.ruc === data.agenciaSeleccionada);
            if (existeAgenciaPreferida) {
                agenciaSelect.value = data.agenciaSeleccionada;
                rucParaCargaInicial = data.agenciaSeleccionada;
                agenciaEstablecidaConExito = true;
                console.log("Agencias: Agencia preseleccionada (data.agenciaSeleccionada) establecida a:", agenciaSelect.value);
            } else {
                console.warn("Agencias: La agencia preferida (data.agenciaSeleccionada:", data.agenciaSeleccionada, ") no es válida para este usuario.");
            }
        }

        // Si no se pudo establecer la preferida (o no había), y hay agencias, seleccionar la primera de la lista
        if (!agenciaEstablecidaConExito && data.agencias.length > 0) {
            if (data.agencias[0] && data.agencias[0].ruc) {
                agenciaSelect.value = data.agencias[0].ruc;
                rucParaCargaInicial = data.agencias[0].ruc;
                agenciaEstablecidaConExito = true;
                console.log("Agencias: Primera agencia de la lista establecida a:", agenciaSelect.value);
            } else {
                console.warn("Agencias: La primera agencia en la lista o su RUC es inválido/vacío.");
            }
        }
    }
    actualizarInputClass(agenciaSelect); // Aplicar estilo visual al select de agencia

    // Adjuntar el event listener para cambios FUTUROS por el usuario
    agenciaSelect.removeEventListener("change", handleAgenciaChange); // Quitar por si se añade múltiples veces
    agenciaSelect.addEventListener("change", handleAgenciaChange);

    // Cargar datos dependientes basados en la agencia inicial seleccionada (o resetear si no hay)
    if (rucParaCargaInicial && agenciaEstablecidaConExito) {
        console.log(`Carga Inicial: Realizando carga de datos para RUC: ${rucParaCargaInicial}`);
        console.log(`  > Usando última sucursal de 'data': ${data.ultimaSucursal || "Ninguna"}`);
        console.log(`  > Usando último usuario de 'data': ${data.ultimoUsuarioSeleccionado || "Ninguno"}`);

        isProgrammaticChange = true; // Evitar que handleAgenciaChange se active por esto

        actualizarSucursales(data.ultimaSucursal, rucParaCargaInicial);
        actualizarUsuarios(data.ultimoUsuarioSeleccionado, rucParaCargaInicial);
        cargarListaVouchers(rucParaCargaInicial);
        actualizarVisibilidadBitacora(rucParaCargaInicial);
        poblarFiltroTourBitacora(); // Esto usará la agencia ya seleccionada del DOM

        if (listaRucsBitacoraPermitidos.includes(String(rucParaCargaInicial))) {
            // Solo cargar bitácora si la fecha ya está puesta (generalmente se pone a hoy por defecto)
            if (document.getElementById('bitacoraFechaFiltro').value) {
                 console.log("Carga Inicial: Cargando bitácora...");
                 cargarBitacora();
            } else {
                 console.log("Carga Inicial: Bitácora no se carga, filtro de fecha vacío.");
            }
        }
        isProgrammaticChange = false;

    } else {
        console.log("Carga Inicial: No hay RUC de agencia válido para la carga inicial. Limpiando campos dependientes.");
        // Limpiar explícitamente los campos que dependen de la agencia
        actualizarSucursales(null, "");
        actualizarUsuarios(null, "");
        cargarListaVouchers("");
        actualizarVisibilidadBitacora("");
        poblarFiltroTourBitacora(); // Limpiará filtros de tour/operador
        const tbodyBitacora = document.querySelector('#bitacoraTable tbody');
        if (tbodyBitacora) tbodyBitacora.innerHTML = `<tr><td colspan="28">Seleccione una agencia y fecha para ver la bitácora.</td></tr>`;
        actualizarSumatoriasBitacora();
        bitacoraDataClient = [];
    }

    formInitialized = true;
    console.log("Proceso datosInicialesRecibidos completado.");
}
/**
 * Actualiza el dropdown de Sucursales.
 * @param {string} [valorGuardado] - Opcional. La sucursal específica guardada en el voucher que se debe seleccionar.
 */
function actualizarSucursales(valorGuardado) {
  const ruc = document.getElementById("agencia").value;
  const sucursalSelect = document.getElementById("sucursal");
  const currentEmail = activeUserEmail;

  if (!ruc) {
    sucursalSelect.innerHTML = "<option value=''>-- Seleccione Agencia --</option>";
    actualizarInputClass(sucursalSelect);
    return;
  }

  // Muestra "Cargando..." mientras se obtienen los datos.
  sucursalSelect.innerHTML = "<option value=''>Cargando...</option>";

  google.script.run
    .withSuccessHandler(function(sucursalesValidas) {
      console.log("Sucursales válidas recibidas:", sucursalesValidas);
      sucursalSelect.innerHTML = ""; // Limpiar "Cargando..."

      let valorGuardadoEncontrado = false;
      
      // Poblar con las sucursales válidas
      (sucursalesValidas || []).forEach(s => {
        sucursalSelect.add(new Option(s, s));
        if (valorGuardado && s === valorGuardado) {
          valorGuardadoEncontrado = true;
        }
      });

      // Si el valor guardado no estaba en la lista (p.ej. sucursal inactiva), lo añadimos como opción deshabilitada.
      if (valorGuardado && !valorGuardadoEncontrado) {
        addOptionIfNotExists(sucursalSelect, valorGuardado, `${valorGuardado} (inactiva)`, true, true);
      }
      
      // --- LÓGICA DE SELECCIÓN FINAL ---
      if (valorGuardado) {
        // Siempre priorizar el valor del voucher que se está cargando.
        sucursalSelect.value = valorGuardado;
      } else {
        // Si no se carga un voucher, intentar usar la última sucursal usada por el agente.
        google.script.run
          .withSuccessHandler(function(ultimaSucursal) {
            if (ultimaSucursal && (sucursalesValidas || []).includes(ultimaSucursal)) {
              sucursalSelect.value = ultimaSucursal;
            } else if (sucursalSelect.options.length > 0) {
              // Si no, la primera de la lista.
              sucursalSelect.value = sucursalSelect.options[0].value;
            }
            actualizarInputClass(sucursalSelect);
          })
          .obtenerUltimaSucursalPorUsuarioYAgencia(currentEmail, ruc);
        return; // Salimos para que el siguiente bloque no se ejecute dos veces.
      }
      
      actualizarInputClass(sucursalSelect); // Aplicar estilo final.
    })
    .withFailureHandler(err => {
      console.error("Error al obtener sucursales válidas:", err);
      sucursalSelect.innerHTML = "<option value=''>-- Error --</option>";
      actualizarInputClass(sucursalSelect);
    })
    .obtenerSucursalesPorAgencia(ruc);
}
  function errorAlInicializar(err) {
        document.getElementById("overlay").style.display = "none";
        alert("Error crítico al cargar datos iniciales: " + err.message);
        console.error("Error FATAL en obtenerDatosIniciales:", err);
    }

    function handleAgenciaChange() {
        // `this` se refiere al elemento agenciaSelect
        const rucSeleccionado = this.value;
        console.log("Manejando cambio de agencia. RUC seleccionado:", rucSeleccionado);

        // Si es un cambio programático inicial y no queremos confirmación,
        // podríamos usar la bandera isProgrammaticChange aquí.
        // Por ahora, la confirmación se aplica a todos los cambios.
        confirmarYProcederSiNoHayCambios(() => {
            console.log("Procediendo con el cambio de agencia a RUC:", rucSeleccionado);
            limpiarFormularioCompleto(); // Limpia todo el voucher existente

            // Actualizar campos dependientes con el nuevo RUC
            actualizarSucursales(null, rucSeleccionado);
            actualizarUsuarios(null, rucSeleccionado);
            cargarListaVouchers(rucSeleccionado);

            actualizarVisibilidadBitacora(rucSeleccionado);
            poblarFiltroTourBitacora(); // Esto actualizará tours y, por ende, operadores.

            if (rucSeleccionado && listaRucsBitacoraPermitidos.includes(String(rucSeleccionado))) {
                console.log("Cargando bitácora para la nueva agencia seleccionada:", rucSeleccionado);
                cargarBitacora();
            } else if (!rucSeleccionado) {
                console.log("No hay RUC seleccionado, limpiando bitácora.");
                const tbodyBitacora = document.querySelector('#bitacoraTable tbody');
                if (tbodyBitacora) tbodyBitacora.innerHTML = `<tr><td colspan="28">Seleccione una agencia y fecha.</td></tr>`;
                actualizarSumatoriasBitacora();
                bitacoraDataClient = [];
            }
        });
    }

/**
 * Actualiza el dropdown de Usuarios.
 * @param {string} [valorGuardado] - Opcional. El usuario específico guardado en el voucher que se debe seleccionar.
 */
function actualizarUsuarios(valorGuardado) {
  const ruc = document.getElementById("agencia").value;
  const usuarioSelect = document.getElementById("usuario");
  const currentEmail = activeUserEmail;

  if (!ruc) {
    usuarioSelect.innerHTML = "<option value=''>-- Seleccione Agencia --</option>";
    actualizarInputClass(usuarioSelect);
    return;
  }

  usuarioSelect.innerHTML = "<option value=''>Cargando...</option>";

  google.script.run
    .withSuccessHandler(function(usuariosDisponibles) {
      console.log("Usuarios disponibles recibidos:", usuariosDisponibles);
      usuarioSelect.innerHTML = "";

      let valorGuardadoEncontrado = false;
      
      (usuariosDisponibles || []).forEach(u => {
        usuarioSelect.add(new Option(u, u));
        if (valorGuardado && u === valorGuardado) {
          valorGuardadoEncontrado = true;
        }
      });
      
      if (valorGuardado && !valorGuardadoEncontrado) {
        addOptionIfNotExists(usuarioSelect, valorGuardado, `${valorGuardado} (inactivo)`, true, true);
      }
      
      if (valorGuardado) {
        usuarioSelect.value = valorGuardado;
      } else {
        google.script.run
          .withSuccessHandler(function(ultimoUsuario) {
            if (ultimoUsuario && (usuariosDisponibles || []).includes(ultimoUsuario)) {
              usuarioSelect.value = ultimoUsuario;
            } else if (usuarioSelect.options.length > 0) {
              usuarioSelect.value = usuarioSelect.options[0].value;
            }
            actualizarInputClass(usuarioSelect);
          })
          .obtenerUltimoUsuarioPorAgenciaYEmail(currentEmail, ruc);
        return;
      }
      
      actualizarInputClass(usuarioSelect);
    })
    .withFailureHandler(err => {
      console.error("Error al obtener usuarios disponibles:", err);
      usuarioSelect.innerHTML = "<option value=''>-- Error --</option>";
      actualizarInputClass(usuarioSelect);
    })
    .obtenerUsuariosPorAgencia(ruc);
}
function actualizarVisibilidadBitacora(ruc) {
    const container = document.getElementById("bitacoraContainer");
    const debeMostrar = listaRucsBitacoraPermitidos.includes(String(ruc));
    container.style.display = debeMostrar ? "flex" : "none";
    if (debeMostrar) {
        const fechaInput = document.getElementById('bitacoraFechaFiltro');
        if (fechaInput && !fechaInput.value) {
            fechaInput.valueAsDate = new Date();
        }
        actualizarFiltroOperador();
    }
}
/**
 * Actualiza el filtro de Operador y SELECCIONA LA PRIMERA OPCIÓN.
 * NO recarga la bitácora.
 */
function actualizarFiltroOperador() {
    const tourSelect = document.getElementById('bitacoraTourFiltro');
    const operadorSelect = document.getElementById('bitacoraOperadorFiltro');
    const tourSeleccionado = tourSelect.value;
    const agenciaActualRuc = document.getElementById('agencia').value;

    const valorAnterior = operadorSelect.value;
    operadorSelect.innerHTML = '<option value="">— Todos —</option>';
    const operadoresPermitidos = opcionesBitacora.operadoresPorTour?.[tourSeleccionado]?.[agenciaActualRuc] || [];

    if (tourSeleccionado && operadoresPermitidos.length > 0) {
        operadoresPermitidos.forEach(operador => operadorSelect.add(new Option(operador, operador)));
        operadorSelect.disabled = false;
        
        // --- LÓGICA DE SELECCIÓN PREDETERMINADA ---
        // Intentar mantener el valor anterior si aún es válido
        if (operadoresPermitidos.includes(valorAnterior)) {
            operadorSelect.value = valorAnterior;
        } else {
            // Si no, seleccionar la primera opción REAL (índice 1)
            operadorSelect.selectedIndex = 1;
        }
        // --- FIN LÓGICA ---
    } else {
        operadorSelect.selectedIndex = 0;
        operadorSelect.disabled = !tourSeleccionado;
    }
    
    // IMPORTANTE: Ya no llamamos a cargarBitacora() desde aquí.
}
function poblarFiltroTourBitacora() {
    const tourSelect = document.getElementById('bitacoraTourFiltro');
    const agenciaActualRuc = document.getElementById('agencia').value;

    tourSelect.innerHTML = '<option value="">— Todos —</option>';
    const toursPermitidos = opcionesBitacora.toursPorAgencia?.[agenciaActualRuc] || [];
    
    toursPermitidos.forEach(tour => tourSelect.add(new Option(tour, tour)));

    // --- LÓGICA DE SELECCIÓN POR DEFECTO ---
    if (toursPermitidos.length > 0) {
        // Seleccionamos la primera opción REAL, que está en el índice 1 del dropdown
        // (el índice 0 es "— Todos —")
        tourSelect.selectedIndex = 1;
    }
}

function cargarBitacora() {
    confirmarYProcederSiNoHayCambios(() => {
        const fecha = document.getElementById('bitacoraFechaFiltro').value;
        const tour = document.getElementById('bitacoraTourFiltro').value;
        const operador = document.getElementById('bitacoraOperadorFiltro').value;
        // --- LÍNEA AÑADIDA ---
        const agencia = document.getElementById('agencia').value;

        if (!fecha) {
            const tbody = document.querySelector('#bitacoraTable tbody');
            if(tbody) tbody.innerHTML = '<tr><td colspan="28">Seleccione una fecha</td></tr>';
            return;
        }
        
        // --- VALIDACIÓN AÑADIDA ---
        if (!agencia) {
            alert("Por favor, seleccione una agencia antes de cargar la bitácora.");
            return;
        }

        document.getElementById('overlay').style.display = 'flex';
        google.script.run
            .withSuccessHandler(displayBitacoraData)
            .withFailureHandler(handleBitacoraError)
            // --- PARÁMETRO AÑADIDO ---
            .cargarDatosBitacora(fecha, tour, operador, agencia);
    });
}
// REEMPLAZA TU FUNCIÓN EXISTENTE CON ESTA
function cargarListaVouchers(rucAgencia = null) {
    const agencyRuc = rucAgencia || document.getElementById("agencia").value;
    const datalistVouchers = document.getElementById("listaVouchers");

    if (!agencyRuc) {
        console.log("No hay agencia seleccionada, no se cargan vouchers.");
        if(datalistVouchers) datalistVouchers.innerHTML = "";
        miniRegistro = [];
        return;
    }
    console.log(`Solicitando lista de vouchers para agencia: ${agencyRuc}`);
    google.script.run
        .withSuccessHandler(function(voucherIds) {
            voucherIds = (voucherIds && Array.isArray(voucherIds)) ? voucherIds : [];
            console.log(`Recibidos ${voucherIds.length} IDs de voucher para RUC ${agencyRuc}.`);
            
            // Guardamos la lista COMPLETA para la búsqueda dinámica
            miniRegistro = [...voucherIds]; 
            
            if (datalistVouchers) {
                datalistVouchers.innerHTML = "";
                // ----- ¡CAMBIO CLAVE AQUÍ! -----
                // Mostramos solo los primeros 10 vouchers en la lista desplegable inicial.
                const vouchersAMostrar = miniRegistro.slice(0, 10);
                
                console.log(`Mostrando inicialmente ${vouchersAMostrar.length} de ${miniRegistro.length} vouchers.`);

                vouchersAMostrar.forEach(id => {
                    const option = document.createElement("option");
                    option.value = id;
                    datalistVouchers.appendChild(option);
                });
            }
        })
        .withFailureHandler(err => {
            console.error("Error al cargar lista de vouchers:", err);
            if(datalistVouchers) datalistVouchers.innerHTML = "";
            miniRegistro = [];
            alert("Error al cargar la lista de vouchers: " + err.message);
        })
        .obtenerListaVoucherIds(agencyRuc);
}

     // NUEVA FUNCIÓN AUXILIAR MEJORADA
    /**
     * Verifica si hay cambios pendientes en la bitácora y pide confirmación.
     * @param {function} callbackContinuar - Función a ejecutar si el usuario confirma o no hay cambios.
     * @param {function} [callbackCancelar] - Opcional. Función a ejecutar si el usuario cancela.
     * @return {boolean} true si se debe continuar, false si se canceló.
     */
    function confirmarYProcederSiNoHayCambios(callbackContinuar, callbackCancelar) {
        const hayCambios = bitacoraDataClient.some(item => ['new', 'edited', 'deleted'].includes(item.status));

        if (hayCambios) {
            if (confirm("Hay cambios sin guardar en la Bitácora. ¿Desea continuar y descartar los cambios?")) {
                console.log("Usuario confirmó continuar, descartando cambios en bitácora.");
                if (callbackContinuar) callbackContinuar();
                return true;
            } else {
                console.log("Usuario canceló la navegación, cambios en bitácora preservados.");
                if (callbackCancelar) callbackCancelar();
                return false; 
            }
        } else {
            if (callbackContinuar) callbackContinuar();
            return true; 
        }
    }

    function inicializarAutocompletado() {
      const datalistTours = document.createElement("datalist");
      datalistTours.id = "listaTours";
      optionsData.tours.forEach(tour => {
        const option = document.createElement("option");
        option.value = tour;
        datalistTours.appendChild(option);
      });
      document.body.appendChild(datalistTours);
      
      const datalistBoats = document.createElement("datalist");
      datalistBoats.id = "listaBoats";
      optionsData.boatOrGuide.forEach(item => {
        const option = document.createElement("option");
        option.value = item;
        datalistBoats.appendChild(option);
      });
      document.body.appendChild(datalistBoats);
      
      const datalistTeering = document.createElement("datalist");
      datalistTeering.id = "listaTeering";
      optionsData.teering.forEach(item => {
        const option = document.createElement("option");
        option.value = item;
        datalistTeering.appendChild(option);
      });
      document.body.appendChild(datalistTeering);
      
      const datalistPaises = document.createElement("datalist");
      datalistPaises.id = "listaPaises";
      optionsData.paises.forEach(pais => {
        const option = document.createElement("option");
        option.value = pais;
        datalistPaises.appendChild(option);
      });
      document.body.appendChild(datalistPaises);
      
      const datalistEdades = document.createElement("datalist");
      datalistEdades.id = "listaEdades";
      optionsData.edades.forEach(edad => {
        const option = document.createElement("option");
        option.value = edad;
        datalistEdades.appendChild(option);
      });
      document.body.appendChild(datalistEdades);
    }
  
  /**
     * Limpia completamente el formulario, restableciendo los campos
     * a un estado inicial, similar a empezar un nuevo voucher pero
     * manteniendo la agencia/sucursal/usuario seleccionados.
     */
    function anularVoucherIndex() {
      var voucherId = document.getElementById("voucherId").value.trim();
      if (!voucherId) {
         alert("No hay un Voucher ID válido.");
         return;
      }
      if (!confirm("¿Está seguro de anular este voucher? Esta acción no se puede deshacer.")) {
         return;
      }
      document.getElementById("overlay").style.display = "flex";
      google.script.run
         .withSuccessHandler(function(response) {
            document.getElementById("overlay").style.display = "none";
            alert(response);
            document.getElementById("btnGuardarYEnviar").style.display = "none";
            document.getElementById("btnAnular").style.display = "none";
            document.getElementById("watermark").style.display = "flex";
         })
         .withFailureHandler(function(error) {
            document.getElementById("overlay").style.display = "none";
            alert("Error al anular el voucher: " + error.message);
         })
         .anularVoucher(voucherId);
    }
    
      /**
     * Limpia completamente el formulario, restableciendo los campos
     * a un estado inicial, similar a empezar un nuevo voucher pero
     * manteniendo la agencia/sucursal/usuario seleccionados.
     */
    function limpiarFormularioCompleto() {
      console.log("Iniciando limpieza completa del formulario...");

      // --- NUEVO: Limpiar el ID del voucher cargado ---
      loadedVoucherId = null;
      console.log("ID de voucher cargado reseteado a null.");
      // --- FIN NUEVO ---


      // 1. Llamar a la función existente que limpia la mayoría de los campos
      //    relacionados con el voucher cargado (tablas, contacto, pago, etc.)
      limpiarCamposPorCambioAgencia(); // Esto ya limpia loadedVoucherId, pero lo dejamos explícito arriba por claridad.

      // 2. Limpiar campos específicos que no maneja la función anterior
      const voucherIdInput = document.getElementById("voucherId");
      if (voucherIdInput) {
        voucherIdInput.value = "";
        actualizarInputClass(voucherIdInput); // Actualizar estilo
      }

      // --- NUEVO: Resetear la fecha del filtro de descripción a hoy ---
      const fechaFiltroInput = document.getElementById('descripcionFechaFiltro');
      if (fechaFiltroInput) {
          const today = new Date();
          const yyyy = today.getFullYear();
          const mm = String(today.getMonth() + 1).padStart(2, '0');
          const dd = String(today.getDate()).padStart(2, '0');
          fechaFiltroInput.value = `${yyyy}-${mm}-${dd}`;
          console.log("Filtro de fecha de descripción reseteado a hoy:", fechaFiltroInput.value);
      }
      // --- FIN NUEVO ---


      // 3. Asegurar que el campo 'salesAgent' muestre el email del usuario logueado
      //    (esto ya debería ocurrir si 'limpiarCamposPorCambioAgencia' no lo toca,
      //     pero lo forzamos por seguridad si activeUserEmail está disponible)
      const salesAgentInput = document.getElementById("salesAgent");
      if (salesAgentInput && typeof activeUserEmail !== 'undefined') {
          salesAgentInput.value = activeUserEmail;
          actualizarInputClass(salesAgentInput);
      }

      // 4. Resetear el estado de la agencia del voucher cargado (si lo había)
      window.currentVoucherAgency = null;

      // 5. Asegurar que botones/marcas estén en estado inicial
      //    (limpiarCamposPorCambioAgencia ya debería hacer esto, pero doble check)
      const btnAnular = document.getElementById("btnAnular");
      if (btnAnular) btnAnular.style.display = "none";
      const watermark = document.getElementById("watermark");
      if (watermark) watermark.style.display = "none";
      const btnGuardar = document.getElementById("btnGuardarYEnviar");
      if (btnGuardar) btnGuardar.style.display = "inline-block"; // Asegurar que guardar esté visible

      // 6. Ocultar la sección de descripción si estaba abierta (opcional, pero recomendado)
      toggleDescripcionClave(true); // Fuerza el cierre y resetea la clave interna

      // Opcional: Volver a enfocar el primer campo útil, como el nombre del pasajero
      const primerNombrePasajero = document.querySelector("#tablaPasajeros tbody tr:first-child td:first-child input");
      if (primerNombrePasajero) {
        // primerNombrePasajero.focus(); // Descomentar si quieres auto-foco
      }

      console.log("Formulario limpiado completamente.");
    }
 
function handleAgenciaChange() {
    if (!formInitialized) return; 
    const rucSeleccionado = this.value;
    console.log("Manejando cambio de agencia a RUC:", rucSeleccionado);

    confirmarYProcederSiNoHayCambios(() => {
        limpiarFormularioCompleto();
        actualizarSucursales(); 
        actualizarUsuarios(); 
        cargarListaVouchers();
        
        actualizarVisibilidadBitacora(rucSeleccionado);
        poblarFiltroTourBitacora();
        actualizarFiltroOperador(); // Actualiza las opciones y selecciona la primera
        
        if (listaRucsBitacoraPermitidos.includes(String(rucSeleccionado))) {
            console.log("Forzando carga única de bitácora para la nueva agencia.");
            cargarBitacora(); // Esta es la única llamada de carga al cambiar de agencia
        }
    });
}

/**
     * Cambia el estado del botón de asistencia (Sí/No) y actualiza los datos.
     * @param {HTMLButtonElement} buttonElement El botón de asistencia que fue clickeado.
     */
    function toggleAsistenciaBitacora(buttonElement) {
        const row = buttonElement.closest('tr');
        const clientIndex = parseInt(row.dataset.clientIndex, 10);

        if (isNaN(clientIndex) || !bitacoraDataClient[clientIndex]) {
            console.error("No se pudo encontrar el índice del cliente para el botón de asistencia.");
            return;
        }

        const currentItem = bitacoraDataClient[clientIndex];
        const isCurrentlySi = buttonElement.classList.contains('si');

        if (isCurrentlySi) {
            buttonElement.textContent = 'No';
            buttonElement.classList.remove('si');
            buttonElement.classList.add('no');
            currentItem.asistencia = 'N';
        } else {
            buttonElement.textContent = 'Sí';
            buttonElement.classList.remove('no');
            buttonElement.classList.add('si');
            currentItem.asistencia = 'Y';
        }

        // Marcar la fila como editada si no es nueva
        if (currentItem.status !== 'new' && currentItem.status !== 'deleted') {
            currentItem.status = 'edited';
            row.classList.remove('bitacora-row-new'); // Quitar new si estaba
            row.classList.add('bitacora-row-edited');
        }
        updateBitacoraUIState(); // Actualizar estado de botones de guardar/filtros
        console.log(`Asistencia cambiada a '${currentItem.asistencia}' para fila cliente ${clientIndex}`);
    }
// --- Función Auxiliar para añadir opción si no existe ---
 /**
  * Añade una opción a un <select> si no existe, opcionalmente como deshabilitada.
  * @param {HTMLSelectElement} selectElement El elemento select.
  * @param {string} value El valor de la opción.
  * @param {string} text El texto visible de la opción.
  * @param {boolean} disabled Si la opción debe estar deshabilitada.
  * @param {boolean} atTop Si se debe añadir al principio (true) o al final (false).
  */
 function addOptionIfNotExists(selectElement, value, text, disabled = false, atTop = false) {
     if (!value || !selectElement) return; // No hacer nada si no hay valor o select

     let exists = false;
     for (let i = 0; i < selectElement.options.length; i++) {
         if (selectElement.options[i].value === value) {
             exists = true;
             break;
         }
     }

     if (!exists) {
         console.log(`Añadiendo opción ${disabled ? 'deshabilitada' : 'habilitada'} [${value}] al select #${selectElement.id}`);
         const option = document.createElement("option");
         option.value = value;
         option.text = text || value; // Usar valor como texto si no se provee texto
         option.disabled = disabled;
         if (disabled) {
             option.style.fontStyle = "italic"; // Estilo visual para opción guardada/inactiva
             option.style.color = "#888";
         }

         if (atTop) {
             selectElement.add(option, selectElement.options[0]); // Añadir al principio
         } else {
             selectElement.add(option); // Añadir al final
         }
     }
 }


/**
  * Actualiza el dropdown de Sucursales.
  * Carga las sucursales válidas actuales para la agencia.
  * Si se pasa un valorGuardado (del voucher) que no está en la lista válida,
  * lo añade como opción deshabilitada y lo selecciona.
  * Si no, selecciona la última sucursal usada o la primera válida.
  *
  * @param {string} [valorGuardado] - La sucursal específica guardada en el voucher.
  */
 function actualizarSucursales(valorGuardado) {
     console.log(`Actualizando sucursales. Valor guardado preferido: ${valorGuardado || 'Ninguno'}`);
     const ruc = document.getElementById("agencia").value;
     const sucursalSelect = document.getElementById("sucursal");
     const currentEmail = activeUserEmail; // Usar la variable global

     if (!ruc) {
         console.log("No hay RUC de agencia, limpiando sucursales.");
         sucursalSelect.innerHTML = "<option value=''>-- Seleccione Agencia --</option>";
         actualizarInputClass(sucursalSelect);
         return;
     }

     // Obtener la última sucursal usada por este agente para esta agencia (para fallback)
     google.script.run
         .withSuccessHandler(function(ultimaSucursal) {
             console.log(`Última sucursal usada por ${currentEmail} para ${ruc}: ${ultimaSucursal || 'Ninguna'}`);

             // Obtener la lista de sucursales *actualmente válidas* para la agencia
             google.script.run
                 .withSuccessHandler(function(sucursalesValidas) {
                     console.log("Sucursales válidas actuales:", sucursalesValidas);
                     sucursalSelect.innerHTML = ""; // Limpiar opciones existentes

                     let valorGuardadoEncontrado = false;

                     // Poblar con las sucursales válidas actuales
                     sucursalesValidas.forEach(s => {
                         const option = document.createElement("option");
                         option.value = s;
                         option.text = s;
                         sucursalSelect.appendChild(option);
                         if (valorGuardado && s === valorGuardado) {
                             valorGuardadoEncontrado = true;
                         }
                     });

                     // Si el valor guardado no estaba entre las válidas, añadirlo como deshabilitado
                     if (valorGuardado && !valorGuardadoEncontrado) {
                         addOptionIfNotExists(sucursalSelect, valorGuardado, `${valorGuardado}`, true, true);
                     }

                     // --- Lógica de Selección ---
                     if (valorGuardado) {
                         // Siempre intentar seleccionar el valor guardado (existente o recién añadido)
                         sucursalSelect.value = valorGuardado;
                         console.log(`Seleccionando sucursal guardada: ${valorGuardado}`);
                     } else if (ultimaSucursal && sucursalesValidas.includes(ultimaSucursal)) {
                         // Si no hay valor guardado, intentar seleccionar la última usada (si es válida)
                         sucursalSelect.value = ultimaSucursal;
                         console.log(`Seleccionando última sucursal válida usada: ${ultimaSucursal}`);
                     } else if (sucursalesValidas.length > 0) {
                         // Si nada de lo anterior, seleccionar la primera válida
                         sucursalSelect.value = sucursalesValidas[0];
                         console.log(`Seleccionando primera sucursal válida: ${sucursalesValidas[0]}`);
                     } else {
                         // No hay sucursales válidas y no se pasó valor guardado (o el guardado no se pudo añadir)
                         console.log("No hay sucursales válidas para seleccionar.");
                         // Opcional: Añadir opción placeholder si está vacío
                         if (sucursalSelect.options.length === 0) {
                             sucursalSelect.innerHTML = "<option value=''>-- Sin Sucursales --</option>";
                         }
                     }

                     actualizarInputClass(sucursalSelect); // Aplicar estilo final

                 })
                 .withFailureHandler(err => {
                     console.error("Error al obtener sucursales válidas:", err);
                     sucursalSelect.innerHTML = "<option value=''>-- Error --</option>";
                     actualizarInputClass(sucursalSelect);
                 })
                 .obtenerSucursalesPorAgencia(ruc);
         })
         .withFailureHandler(err => {
            console.error("Error al obtener última sucursal usada:", err);
            // Intentar cargar las válidas igualmente, pero sin la lógica de fallback de 'ultimaSucursal'
             google.script.run
                 .withSuccessHandler(function(sucursalesValidas) {
                     console.log("Sucursales válidas actuales (sin última usada):", sucursalesValidas);
                     sucursalSelect.innerHTML = "";
                     let valorGuardadoEncontrado = false;
                     sucursalesValidas.forEach(s => { /*...*/ if (s === valorGuardado) valorGuardadoEncontrado = true; /*...*/ });
                     if (valorGuardado && !valorGuardadoEncontrado) {
                          addOptionIfNotExists(sucursalSelect, valorGuardado, `${valorGuardado}`, true, true);
                     }
                     // Selección simplificada (sin ultimaSucursal)
                     if (valorGuardado) { sucursalSelect.value = valorGuardado; }
                     else if (sucursalesValidas.length > 0) { sucursalSelect.value = sucursalesValidas[0]; }
                     else { /*...*/ }
                     actualizarInputClass(sucursalSelect);
                 })
                 .withFailureHandler(err => { /*...*/ })
                 .obtenerSucursalesPorAgencia(ruc);
         })
         .obtenerUltimaSucursalPorUsuarioYAgencia(currentEmail, ruc);
 }

    
 

 function agregarVoucherALista(voucherId) {
        const datalistVouchers = document.getElementById("listaVouchers");
        // Evitar duplicados
        if (!datalistVouchers.querySelector(`option[value="${voucherId}"]`)) {
            const option = document.createElement("option");
            option.value = voucherId;
            // Insertar al principio para que aparezca primero
            datalistVouchers.insertBefore(option, datalistVouchers.firstChild);
            // Actualizar también el array miniRegistro si lo usas activamente
            if (typeof miniRegistro !== 'undefined' && !miniRegistro.includes(voucherId)) {
                miniRegistro.unshift(voucherId);
            }
        }
    }
    
   function cargarListaVouchers(rucAgencia = null) {
    const agencyRuc = rucAgencia || document.getElementById("agencia").value;
    const datalistVouchers = document.getElementById("listaVouchers");

    if (!agencyRuc) {
        console.log("No hay agencia seleccionada, no se cargan vouchers.");
        if(datalistVouchers) datalistVouchers.innerHTML = "";
        miniRegistro = [];
        return;
    }
    console.log(`Solicitando lista de vouchers para agencia: ${agencyRuc}`);
    google.script.run
        .withSuccessHandler(function(voucherIds) {
            voucherIds = (voucherIds && Array.isArray(voucherIds)) ? voucherIds : [];
            console.log(`Recibidos ${voucherIds.length} IDs de voucher para RUC ${agencyRuc}.`);

            if (datalistVouchers) {
                datalistVouchers.innerHTML = "";
                
                // =============================================================
                // ================   AQUÍ ESTÁ EL CAMBIO   ====================
                // =============================================================
                // Usamos .slice(0, 10) para tomar solo los primeros 10 vouchers de la lista.
                const vouchersMostrados = voucherIds.slice(0, 10);
                console.log(`Mostrando los primeros ${vouchersMostrados.length} vouchers en la lista.`);
                
                vouchersMostrados.forEach(id => {
                    const option = document.createElement("option");
                    option.value = id;
                    datalistVouchers.appendChild(option);
                });
            }
            // Mantenemos miniRegistro con la lista completa por si es necesario para otra lógica.
            miniRegistro = [...voucherIds];
        })
        .withFailureHandler(err => {
            console.error("Error al cargar lista de vouchers:", err);
            if(datalistVouchers) datalistVouchers.innerHTML = "";
            miniRegistro = [];
            alert("Error al cargar la lista de vouchers: " + err.message);
        })
        .obtenerListaVoucherIds(agencyRuc);
}

  
    
  
    /**
 * Valida un input específico de la bitácora y aplica/quita la clase de error si está vacío.
 * Se enfoca en los campos que hemos identificado como requeridos.
 * @param {HTMLElement} inputElement - El elemento <input> o <select> a validar.
 */
function validarInputBitacoraRequerido(inputElement) {
  // Verificamos que el input sea uno de los que queremos validar
  const colKey = inputElement.dataset.columna;
  const camposRequeridos = ['time', 'nombre', 'passportId'];
  
  if (camposRequeridos.includes(colKey)) {
    // Usamos trim() para quitar espacios en blanco al inicio y final
    if (inputElement.value.trim() === '') {
      inputElement.classList.add('input-requerido-vacio');
    } else {
      inputElement.classList.remove('input-requerido-vacio');
    }
  }
}
    function actualizarInputClass(inputElement) {
      if (inputElement.value.trim() !== "") {
         inputElement.classList.add("filled");
         inputElement.classList.remove("empty");
      } else {
         inputElement.classList.remove("filled");
         inputElement.classList.add("empty");
      }
    }
    
    
     function debounce(func, delay) {
      let timeoutId;
      return function(...args) {
         clearTimeout(timeoutId);
         timeoutId = setTimeout(() => func.apply(this, args), delay);
      };
    }

    const debouncedCalcularIdVoucher = debounce(calcularIdVoucher, 2000); // Asegúrate que el debounce existe

    function calcularIdVoucher() {
      const voucherIdInput = document.getElementById("voucherId");

      // --- ¡¡AÑADIR ESTA COMPROBACIÓN AQUÍ!! ---
      if (voucherIdInput.value.trim() !== "") {
         console.log("calcularIdVoucher: Detenido porque ya existe un Voucher ID en el campo:", voucherIdInput.value);
         return; // Salir de la función si ya hay un ID
      }
      // --- FIN DE LA COMPROBACIÓN ---

      // El resto de la función original sigue aquí...
      const nombreCompletoInput = document.querySelector("#tablaPasajeros tbody tr input[type='text']");
      const nombreCompleto = nombreCompletoInput ? nombreCompletoInput.value.trim() : "";
      const pasaporteInput = document.querySelector("#tablaPasajeros tbody tr td:nth-child(2) input");
      const pasaporte = pasaporteInput ? pasaporteInput.value.trim().replace(/\s+/g, "").toUpperCase() : "";

      if (!nombreCompleto || !pasaporte) {
         // No limpiar el campo si ya había un ID y el usuario está editando
         // voucherIdInput.value = ""; // Comentado o eliminado
         return;
      }

      const primerNombre = nombreCompleto.split(" ")[0].toUpperCase().replace(/\s+/g, "");

      console.log("calcularIdVoucher: Calculando ID para:", primerNombre, pasaporte); // Log para saber cuándo SÍ calcula
      google.script.run
         .withSuccessHandler((idVoucher) => {
            // Solo actualizar si el campo sigue vacío (doble check)
            if (voucherIdInput.value.trim() === "") {
                 voucherIdInput.value = idVoucher;
            }
         })
         .withFailureHandler((error) => {
            alert(error.message);
            // No limpiar el campo si ya había un ID
            // voucherIdInput.value = ""; // Comentado o eliminado
         })
         .calcularIdVoucherServidor(primerNombre, pasaporte);
    }
    
   function anadirFilaPasajero() {
  const tabla = document.getElementById("tablaPasajeros").getElementsByTagName("tbody")[0];
  const fila = tabla.insertRow();
  let celda;

  // Nombre
  celda = fila.insertCell();
  let inputNombre = document.createElement("input");
  inputNombre.type = "text";
  inputNombre.placeholder = "Olivia";
  inputNombre.addEventListener("input", function() { actualizarInputClass(this); });
  celda.appendChild(inputNombre);
  actualizarInputClass(inputNombre); // Estilo inicial

  // Pasaporte
  celda = fila.insertCell();
  let inputPasaporte = document.createElement("input");
  inputPasaporte.type = "text";
  inputPasaporte.placeholder = "200010082";
  // Solo añadir listener para calcular ID si es la primera fila
  if (tabla.rows.length === 1) {
      inputPasaporte.addEventListener("input", function() { debouncedCalcularIdVoucher(); actualizarInputClass(this); });
  } else {
      inputPasaporte.addEventListener("input", function() { actualizarInputClass(this); });
  }
  celda.appendChild(inputPasaporte);
  actualizarInputClass(inputPasaporte); // Estilo inicial

  // País
  celda = fila.insertCell();
  let inputPais = document.createElement("input");
  inputPais.setAttribute("list", "listaPaises");
  inputPais.placeholder = "Ecuador";
  inputPais.addEventListener("input", function() { actualizarInputClass(this); });
  celda.appendChild(inputPais);
  actualizarInputClass(inputPais); // Estilo inicial

  // Edad
  celda = fila.insertCell();
  let inputEdad = document.createElement("input");
  inputEdad.setAttribute("list", "listaEdades");
  inputEdad.placeholder = "36";
  inputEdad.addEventListener("input", function() { actualizarInputClass(this); });
  celda.appendChild(inputEdad);
  actualizarInputClass(inputEdad); // Estilo inicial

  // Acciones (Botón Eliminar)
  celda = fila.insertCell();
  celda.style.textAlign = "center"; // Centrar el botón
  let btnEliminar = document.createElement("button");
  btnEliminar.type = "button";
  btnEliminar.classList.add("rojo-mas"); // Usar la clase de estilo para botones rojos
  btnEliminar.innerHTML = '<i class="fas fa-trash-alt"></i>'; // Icono de basura
  btnEliminar.title = "Eliminar esta fila";
  btnEliminar.onclick = function() { eliminarFilaPasajeroEspecifica(this); };
  celda.appendChild(btnEliminar);

  actualizarPaxEnTours();
}

    

    
   
function obtenerFechaManana() {
  const hoy = new Date();
  hoy.setDate(hoy.getDate() + 1);
  const anio = hoy.getFullYear();
  const mes = String(hoy.getMonth() + 1).padStart(2, '0');
  const dia = String(hoy.getDate()).padStart(2, '0');
  return `${anio}-${mes}-${dia}`;
}
    
  
function agregarUnDia(fechaStr) {
  if (!fechaStr) return obtenerFechaManana(); // Fallback si fechaStr es inválida
  try {
    const fecha = new Date(fechaStr + 'T00:00:00'); // Forzar a que sea local
    if (isNaN(fecha.getTime())) throw new Error("Fecha inválida");
    fecha.setDate(fecha.getDate() + 1);
    return fecha.toISOString().split("T")[0];
  } catch (e) {
    console.warn("Error al agregar un día a la fecha:", fechaStr, e);
    return obtenerFechaManana(); // Fallback
  }
}
    
   function obtenerSiguienteIndiceReserva() {
  const filas = document.querySelectorAll("#tablaTours tbody tr");
  let max = 0;
  filas.forEach(row => {
     const idx = parseInt(row.dataset.reservationIndex || "0", 10);
     if (idx > max) max = idx;
  });
  return max + 1;
}
function anadirFilaTour() {
  const tabla = document.getElementById("tablaTours").getElementsByTagName("tbody")[0];
  const fila = tabla.insertRow();
  fila.dataset.reservationIndex = obtenerSiguienteIndiceReserva();
  let celda;

  // Fecha (Celda 0)
  celda = fila.insertCell();
  let inputFecha = document.createElement("input");
  inputFecha.type = "date";
  // ... (lógica de fecha sin cambios) ...
  if (tabla.rows.length === 1) { 
     inputFecha.value = obtenerFechaManana();
  } else { 
     const ultimaFila = tabla.rows[tabla.rows.length - 2]; 
     const ultimaFechaInput = ultimaFila.cells[0].querySelector("input[type='date']");
     if (ultimaFechaInput && ultimaFechaInput.value) {
        inputFecha.value = agregarUnDia(ultimaFechaInput.value);
     } else {
        inputFecha.value = obtenerFechaManana(); 
     }
  }
  celda.appendChild(inputFecha);
  actualizarInputClass(inputFecha);
  inputFecha.addEventListener("input", function() { actualizarInputClass(this); });

  // Tour (Celda 1)
  celda = fila.insertCell();
  let inputTour = document.createElement("input");
  inputTour.setAttribute("list", "listaTours");
  inputTour.placeholder = "Pinzon";
  inputTour.addEventListener("input", function() { actualizarInputClass(this); });
  celda.appendChild(inputTour);
  actualizarInputClass(inputTour);

  // Operador (Celda 2)
  celda = fila.insertCell();
  let inputBarco = document.createElement("input");
  inputBarco.setAttribute("list", "listaBoats");
  inputBarco.placeholder = "Queen Evolution";
  inputBarco.addEventListener("input", function() { actualizarInputClass(this); });
  celda.appendChild(inputBarco);
  actualizarInputClass(inputBarco);

  // Hora (Celda 3)
  celda = fila.insertCell();
  let inputHora = document.createElement("input");
  inputHora.type = "time";
  inputHora.value = "00:00";
  inputHora.addEventListener("input", function() { actualizarInputClass(this); });
  celda.appendChild(inputHora);
  actualizarInputClass(inputHora);

  // --- CAMBIO DE ORDEN ---
  // Cantidad (Pax) (NUEVA Celda 4)
  celda = fila.insertCell();
  let inputPax = document.createElement("input");
  inputPax.type = "number";
  inputPax.min = 1;
  inputPax.value = obtenerNumeroPasajeros();
  inputPax.removeAttribute("data-manual");
  inputPax.addEventListener("input", function() {
     this.setAttribute("data-manual", "true");
     actualizarInputClass(this);
  });
  celda.appendChild(inputPax);
  actualizarInputClass(inputPax);

  // Lugar (NUEVA Celda 5)
  celda = fila.insertCell();
  let inputTeering = document.createElement("input");
  inputTeering.setAttribute("list", "listaTeering");
  inputTeering.placeholder = "Hotel Solimar";
  inputTeering.addEventListener("input", function() { actualizarInputClass(this); });
  celda.appendChild(inputTeering);
  actualizarInputClass(inputTeering);
  // --- FIN CAMBIO DE ORDEN ---

  // Acciones (NUEVA Celda 6)
  celda = fila.insertCell();
  celda.style.textAlign = "center";
  let btnEliminar = document.createElement("button");
  btnEliminar.type = "button";
  btnEliminar.classList.add("rojo-mas");
  btnEliminar.innerHTML = '<i class="fas fa-trash-alt"></i>';
  btnEliminar.title = "Eliminar esta fila";
  btnEliminar.onclick = function() { eliminarFilaTourEspecifica(this); };
  celda.appendChild(btnEliminar);
}
    
    function obtenerNumeroPasajeros() {
  const tablaPasajeros = document.getElementById("tablaPasajeros").getElementsByTagName("tbody")[0];
  return tablaPasajeros.rows.length > 0 ? tablaPasajeros.rows.length : 1; // Devuelve al menos 1
}
    
function actualizarPaxEnTours() {
  const tablaToursBody = document.getElementById("tablaTours").getElementsByTagName("tbody")[0];
  const numeroPasajeros = obtenerNumeroPasajeros();
  Array.from(tablaToursBody.rows).forEach(row => {
     // ANTES: row.cells[5]
     const inputPax = row.cells[4]?.querySelector("input[type='number']"); // AHORA: Celda 4 es Cantidad
     if (inputPax && !inputPax.hasAttribute("data-manual")) {
        inputPax.value = numeroPasajeros;
        actualizarInputClass(inputPax);
     }
  });
}
    /**
 * Elimina la fila específica de la tabla de tours.
 * Si es la última fila, añade una nueva vacía.
 * @param {HTMLButtonElement} botonEliminar - El botón "Eliminar" que fue presionado.
 */
function eliminarFilaTourEspecifica(botonEliminar) {
  const filaAEliminar = botonEliminar.closest('tr');
  const tablaBody = filaAEliminar.parentNode;

  if (tablaBody.rows.length > 1) {
    filaAEliminar.remove();
  } else {
    // Si es la única fila, limpiarla
    const inputs = filaAEliminar.querySelectorAll('input');
    inputs.forEach(input => {
      if (input.type === "time") input.value = "00:00";
      else if (input.type === "number" && input.min == "1") input.value = obtenerNumeroPasajeros();
      else input.value = '';
      actualizarInputClass(input);
    });
    // Re-establecer fecha si es la única fila
    const inputFecha = filaAEliminar.querySelector("input[type='date']");
    if(inputFecha) inputFecha.value = obtenerFechaManana();
    actualizarInputClass(inputFecha);
  }
   // Si no quedan filas (porque limpiamos la única), añadir una nueva
   if (tablaBody.rows.length === 0) {
      anadirFilaTour();
  }
  actualizarPaxEnTours(); // Re-actualizar #pax en caso de que la fila eliminada tuviera un valor manual
}
    function inicializarEventosPax() {
      const tablaTours = document.getElementById("tablaTours").getElementsByTagName("tbody")[0];
      tablaTours.addEventListener("input", (event) => {
         const target = event.target;
         if (target.tagName.toLowerCase() === "input" && target.type === "number") {
            const fila = target.closest("tr");
            const indexFila = Array.from(tablaTours.rows).indexOf(fila);
            if (indexFila === 0) { target.setAttribute("data-manual", "true"); }
         }
      });
    }
   
          
     function guardarYEnviar() {
        document.getElementById("overlay").style.display = "flex"; // Muestra el overlay

        // --- INICIO DE LA VALIDACIÓN (SIN CAMBIOS) ---
        const tablaPasajerosBody = document.querySelector("#tablaPasajeros tbody");
        if (!tablaPasajerosBody) {
            console.error("Error: No se encontró el cuerpo de la tabla de pasajeros.");
            alert("Error interno: No se pudo validar la tabla de pasajeros.");
            document.getElementById("overlay").style.display = "none"; // Oculta el overlay
            return; // Detiene la ejecución
        }

        const primeraFilaPasajero = tablaPasajerosBody.querySelector("tr:first-child");

        if (!primeraFilaPasajero) {
            alert("Debe añadir al menos un pasajero.");
            document.getElementById("overlay").style.display = "none";
            return;
        }

        const primerNombreInput = primeraFilaPasajero.querySelector("td:nth-child(1) input");
        const primerPasaporteInput = primeraFilaPasajero.querySelector("td:nth-child(2) input");

        if (!primerNombreInput || !primerPasaporteInput) {
            console.error("Error: No se encontraron los inputs de nombre o pasaporte en la primera fila.");
            alert("Error interno: No se pudieron validar los campos del primer pasajero.");
            document.getElementById("overlay").style.display = "none";
            return;
        }

        const primerNombreValue = primerNombreInput.value.trim();
        const primerPasaporteValue = primerPasaporteInput.value.trim();

        if (primerNombreValue === "" || primerPasaporteValue === "") {
            alert("Por favor, ingrese el Nombre y el Pasaporte/ID del primer pasajero antes de guardar.");
            if (primerNombreValue === "") {
                primerNombreInput.focus();
                actualizarInputClass(primerNombreInput);
            } else {
                primerPasaporteInput.focus();
                actualizarInputClass(primerPasaporteInput);
            }
            document.getElementById("overlay").style.display = "none";
            return;
        }
        // --- FIN DE LA VALIDACIÓN ---


        // --- Recolección de datos ---
        const voucherId = document.getElementById("voucherId").value.trim(); // Puede estar vacío si es nuevo
        const agencia = document.getElementById("agencia").value; // RUC de la agencia
        const sucursal = document.getElementById("sucursal").value;
        const usuario = document.getElementById("usuario").value; // Nombre de usuario seleccionado

        // --- AQUÍ SE RECOGE EL VALOR TAL CUAL DEL CAMPO DE WHATSAPP ---
        const passengerWsp = document.getElementById("passengerWsp").value.trim();
        // --- FIN RECOLECCIÓN WHATSAPP ---

        const passengerEmail = document.getElementById("passengerEmail").value.trim();
        const restricciones = document.getElementById("restricciones").value.trim();
        const total = document.getElementById("total").value;
        const deposito = document.getElementById("deposito").value;
        const balance = document.getElementById("balance").value;

        const pasajeros = Array.from(document.querySelectorAll("#tablaPasajeros tbody tr")).map(row => ({
            nombre: row.cells[0].querySelector("input")?.value.trim() || '',
            pasaporte: row.cells[1].querySelector("input")?.value.trim() || '',
            pais: row.cells[2].querySelector("input")?.value.trim() || '',
            edad: row.cells[3].querySelector("input")?.value.trim() || ''
        })).filter(p => p.nombre || p.pasaporte); // Filtrar filas potencialmente vacías

        // ... dentro de la función guardarYEnviar() ...

const tours = Array.from(document.querySelectorAll("#tablaTours tbody tr")).map(row => ({
    fecha: row.cells[0].querySelector("input[type='date']")?.value || '',
    tour: row.cells[1].querySelector("input")?.value.trim() || '',
    barco: row.cells[2].querySelector("input")?.value.trim() || '',
    hora: row.cells[3].querySelector("input[type='time']")?.value || '',
    pax: row.cells[4].querySelector("input[type='number']")?.value || '',  // CORREGIDO: row.cells[4] es #Pax
    teering: row.cells[5].querySelector("input")?.value.trim() || '',      // CORREGIDO: row.cells[5] es Lugar (teering)
    reservationIndex: row.dataset.reservationIndex
})).filter(t => t.fecha || t.tour);

// ... resto de la función ...)).filter(t => t.fecha || t.tour); // Filtrar filas potencialmente vacías

        // --- Validaciones Adicionales (Esenciales) ---
        if (pasajeros.length === 0) {
            alert("Debe haber al menos un pasajero.");
            document.getElementById("overlay").style.display = "none";
            return;
        }
        if (tours.length === 0) {
            alert("Debe haber al menos un tour.");
            document.getElementById("overlay").style.display = "none";
            return;
        }
        if (!sucursal) {
            alert("Por favor, selecciona una Sucursal.");
            document.getElementById("overlay").style.display = "none";
            return;
        }
        if (!agencia) {
            alert("Por favor, selecciona una Agencia.");
            document.getElementById("overlay").style.display = "none";
            return;
        }
        if (!usuario) {
            alert("Por favor, selecciona un Usuario.");
            document.getElementById("overlay").style.display = "none";
            return;
        }
        // --- Fin validaciones ---

        // --- Creación del objeto datos para enviar al servidor ---
        const datos = {
            voucherId, // Puede ser vacío, el backend lo generará/buscará
            agencia,   // RUC
            sucursal,
            // 'salesAgent' (email del logueado) se añade en el servidor
            usuario,   // Nombre de usuario seleccionado en el dropdown
            passengerWsp, // <-- El valor tal cual del formulario
            passengerEmail,
            restricciones,
            total,
            deposito,
            balance,
            pasajeros,
            tours
        };

        console.log("Enviando datos a la función combinada guardarYGenerarComprobante:", JSON.stringify(datos).substring(0, 500) + "...");

        // --- LLAMADA ÚNICA AL SERVIDOR ---
        google.script.run
            .withSuccessHandler(function(result) {
                console.log("Respuesta completa del servidor (guardarYGenerarComprobante):", result);
                document.getElementById("overlay").style.display = "none";

                if (result && result.status === 'success') {
                    if (result.voucherId) {
                        document.getElementById("voucherId").value = result.voucherId;
                        actualizarInputClass(document.getElementById("voucherId"));
                        agregarVoucherALista(result.voucherId);
                        loadedVoucherId = result.voucherId;
                        console.log("Voucher ID actualizado/confirmado en el formulario:", result.voucherId);
                    }

                    const mensajeFinalDiv = document.getElementById("mensajeFinal");
                    mensajeFinalDiv.textContent = result.message || "Operación completada.";
                    mensajeFinalDiv.style.display = "block";

                    setTimeout(() => {
                        mensajeFinalDiv.style.display = "none";

                        if (result.pdfBase64) {
                            console.log("Descargando PDF...");
                            const byteCharacters = atob(result.pdfBase64);
                            const byteNumbers = new Array(byteCharacters.length);
                            for (let i = 0; i < byteCharacters.length; i++) {
                                byteNumbers[i] = byteCharacters.charCodeAt(i);
                            }
                            const byteArray = new Uint8Array(byteNumbers);
                            const pdfBlob = new Blob([byteArray], { type: 'application/pdf' });

                            const url = URL.createObjectURL(pdfBlob);
                            const a = document.createElement("a");
                            a.href = url;
                            const filename = result.voucherId ? `${result.voucherId}-${obtenerTimestamp()}.pdf` : "voucher.pdf";
                            a.download = filename;
                            document.body.appendChild(a);
                            a.click();
                            document.body.removeChild(a);
                            URL.revokeObjectURL(url);
                            console.log(`PDF descargado como ${filename}`);
                        } else {
                            console.warn("La respuesta no contiene pdfBase64.");
                        }

                        if (result.whatsappLink) {
                            console.log("Abriendo enlace de WhatsApp:", result.whatsappLink);
                            window.open(result.whatsappLink, "_blank");
                        } else {
                            console.log("No hay enlace de WhatsApp generado o válido en la respuesta.");
                        }
                    }, 500);
                } else {
                    alert("Error en la operación del servidor: " + (result.message || "Error desconocido."));
                }
            })
            .withFailureHandler(function(error) {
                document.getElementById("overlay").style.display = "none";
                console.error("Error técnico al llamar al servidor (guardarYGenerarComprobante):", error);
                alert("Error técnico: " + error.message + ". Por favor, contacta a soporte.");
            })
            .guardarYGenerarComprobante(datos); // Llama a la función combinada

        // Recargar la lista de vouchers en el datalist después de intentar guardar
        cargarListaVouchers();
    }

    // --- Función auxiliar para obtener timestamp (SIN CAMBIOS) ---
    function obtenerTimestamp() {
        const now = new Date();
        const year = now.getFullYear();
        const month = String(now.getMonth() + 1).padStart(2, '0');
        const day = String(now.getDate()).padStart(2, '0');
        const hours = String(now.getHours()).padStart(2, '0');
        const minutes = String(now.getMinutes()).padStart(2, '0');
        const seconds = String(now.getSeconds()).padStart(2, '0');
        return `${year}${month}${day}_${hours}${minutes}${seconds}`;
    }


// En tu archivo index.html, dentro de la etiqueta <script>

/**
 * Rellena todos los campos del formulario con los datos de un voucher recuperado del servidor.
 * @param {object} datos - El objeto completo del voucher con todos sus detalles.
 */
function llenarFormularioConDatos(datos) {
  console.log("Llenando formulario con datos recuperados:", datos);
  isProgrammaticChange = true; // Activa la bandera para evitar bucles de eventos

  // --- Sección 1: Agencia y Campos Dependientes ---
  // Establece el valor de la agencia y actualiza su estilo.
  const agenciaSelect = document.getElementById("agencia");
  agenciaSelect.value = datos.agencia || "";
  actualizarInputClass(agenciaSelect);
  
  // Guarda el RUC de la agencia del voucher cargado para futuras comparaciones.
  window.currentVoucherAgency = datos.agencia || "";

  // --- Sección 2: Información del Agente ---
  // Establece el campo salesAgent (gmail del creador) directamente de los datos recuperados.
  const salesAgentInput = document.getElementById("salesAgent");
  salesAgentInput.value = datos.salesAgent || "";
  actualizarInputClass(salesAgentInput);
  console.log("Sales Agent (creador) establecido desde voucher:", datos.salesAgent);

  // Llama a las funciones de actualización pasando el valor específico del voucher.
  // Estas funciones se encargarán de poblar los dropdowns y seleccionar la opción correcta.
  actualizarSucursales(datos.sucursal ? datos.sucursal.trim() : "");
  actualizarUsuarios(datos.usuario ? datos.usuario.trim() : "");

  // --- Sección 3: Datos de Contacto del Pasajero y Restricciones ---
  document.getElementById("passengerWsp").value = datos.passengerWsp || "";
  actualizarInputClass(document.getElementById("passengerWsp"));
  
  document.getElementById("passengerEmail").value = datos.passengerEmail || "";
  actualizarInputClass(document.getElementById("passengerEmail"));
  
  document.getElementById("restricciones").value = datos.restricciones || "No necesario";
  actualizarInputClass(document.getElementById("restricciones"));

  // --- Sección 4: Llenar Tablas de Pasajeros y Tours ---
  // Limpia las tablas antes de llenarlas con los nuevos datos.
  document.querySelector("#tablaPasajeros tbody").innerHTML = "";
  document.querySelector("#tablaTours tbody").innerHTML = "";
  
  // Añade las filas correspondientes a pasajeros y tours.
  (datos.pasajeros || []).forEach(pasajero => anadirFilaPasajeroConDatos(pasajero));
  (datos.tours || []).forEach(tour => anadirFilaTourConDatos(tour));

  // --- Sección 5: Datos de Pago y Recálculo ---
  document.getElementById("total").value = parseFloat(datos.total || 0).toFixed(2);
  document.getElementById("deposito").value = parseFloat(datos.deposito || 0).toFixed(2);

  // ¡LÍNEA CLAVE! Llama a la función de recálculo después de llenar los campos.
  recalcularPago();
  
  // --- Sección 6: Lógica de Interfaz de Usuario (Botones y Marcas de Agua) ---
  const btnGuardar = document.getElementById("btnGuardarYEnviar");
  const btnAnular = document.getElementById("btnAnular");
  const watermark = document.getElementById("watermark");

  if (datos.estadoVoucher === "anulado") {
    console.log("Voucher anulado, ajustando UI.");
    watermark.style.display = "flex";
    btnGuardar.style.display = "none";
    btnAnular.style.display = "none";
  } else {
    watermark.style.display = "none";
    
    // Compara el email del usuario logueado con el creador del voucher para dar permisos.
    // Asume que 'activeUserEmail' es una variable global con el email de la sesión.
    if (activeUserEmail && datos.salesAgent && activeUserEmail.toLowerCase() === datos.salesAgent.toLowerCase()) {
      console.log(`Usuario logueado (${activeUserEmail}) es el creador. Permisos de edición y anulación concedidos.`);
      btnGuardar.style.display = "inline-block";
      btnAnular.style.display = "inline-block";
    } else {
      console.warn(`Usuario logueado (${activeUserEmail}) no es el creador (${datos.salesAgent}). Ocultando botones de acción.`);
      btnGuardar.style.display = "none";
      btnAnular.style.display = "none";
    }
  }

  isProgrammaticChange = false; // Desactiva la bandera
  console.log("Llenado de formulario completado.");
}
    
 /**
 * Añade una fila a la tabla de pasajeros con datos predefinidos de un voucher cargado.
 * @param {object} pasajero - Objeto con los datos del pasajero {nombre, pasaporte, pais, edad}.
 */
function anadirFilaPasajeroConDatos(pasajero) {
  const tabla = document.getElementById("tablaPasajeros").getElementsByTagName("tbody")[0];
  const fila = tabla.insertRow();
  let celda;

  // Nombre
  celda = fila.insertCell();
  let inputNombre = document.createElement("input");
  inputNombre.type = "text";
  inputNombre.placeholder = "Nombre";
  inputNombre.value = pasajero.nombre || "";
  inputNombre.addEventListener("input", function() { actualizarInputClass(this); });
  celda.appendChild(inputNombre);
  actualizarInputClass(inputNombre);

  // Pasaporte
  celda = fila.insertCell();
  let inputPasaporte = document.createElement("input");
  inputPasaporte.type = "text";
  inputPasaporte.placeholder = "Pasaporte/ID";
  inputPasaporte.value = pasajero.pasaporte || "";
  inputPasaporte.addEventListener("input", function() { actualizarInputClass(this); });
  celda.appendChild(inputPasaporte);
  actualizarInputClass(inputPasaporte);

  // País
  celda = fila.insertCell();
  let inputPais = document.createElement("input");
  inputPais.setAttribute("list", "listaPaises");
  inputPais.placeholder = "País";
  inputPais.value = pasajero.pais || "";
  inputPais.addEventListener("input", function() { actualizarInputClass(this); });
  celda.appendChild(inputPais);
  actualizarInputClass(inputPais);

  // Edad
  celda = fila.insertCell();
  let inputEdad = document.createElement("input");
  inputEdad.setAttribute("list", "listaEdades");
  inputEdad.placeholder = "Edad";
  inputEdad.value = pasajero.edad || "";
  inputEdad.addEventListener("input", function() { actualizarInputClass(this); });
  celda.appendChild(inputEdad);
  actualizarInputClass(inputEdad);

  // Acciones (Botón Eliminar)
  celda = fila.insertCell();
  celda.style.textAlign = "center";
  let btnEliminar = document.createElement("button");
  btnEliminar.type = "button";
  btnEliminar.classList.add("rojo-mas");
  btnEliminar.innerHTML = '<i class="fas fa-trash-alt"></i>';
  btnEliminar.title = "Eliminar esta fila";
  btnEliminar.onclick = function() { eliminarFilaPasajeroEspecifica(this); };
  celda.appendChild(btnEliminar);
}

/**
 * Añade una fila a la tabla de tours con datos predefinidos de un voucher cargado.
 * @param {object} tourData - Objeto con los datos del tour.
 */
function anadirFilaTourConDatos(tourData) {
  const tabla = document.getElementById("tablaTours").getElementsByTagName("tbody")[0];
  if (!tabla) return;
  const fila = tabla.insertRow();
  fila.dataset.reservationIndex = tourData.reservationIndex || obtenerSiguienteIndiceReserva();
  let celda;

  // Celda 0: Fecha
  celda = fila.insertCell();
  let inputFecha = document.createElement("input");
  inputFecha.type = "date";
  inputFecha.value = tourData.fechaInput || ''; // Usa la propiedad formateada para HTML5
  celda.appendChild(inputFecha);

  // Celda 1: Tour
  celda = fila.insertCell();
  let inputTour = document.createElement("input");
  inputTour.setAttribute("list", "listaTours");
  inputTour.value = tourData.tour || '';
  celda.appendChild(inputTour);

  // Celda 2: Operador
  celda = fila.insertCell();
  let inputBarco = document.createElement("input");
  inputBarco.setAttribute("list", "listaBoats");
  inputBarco.value = tourData.barco || '';
  celda.appendChild(inputBarco);

  // Celda 3: Hora
  celda = fila.insertCell();
  let inputHora = document.createElement("input");
  inputHora.type = "time";
  inputHora.value = tourData.hora || "00:00";
  celda.appendChild(inputHora);

  // Celda 4: #Pax
  celda = fila.insertCell();
  let inputPax = document.createElement("input");
  inputPax.type = "number";
  inputPax.min = "1";
  inputPax.value = tourData.pax || obtenerNumeroPasajeros();
  inputPax.setAttribute("data-manual", "true");
  celda.appendChild(inputPax);

  // Celda 5: Lugar
  celda = fila.insertCell();
  let inputTeering = document.createElement("input");
  inputTeering.setAttribute("list", "listaTeering");
  inputTeering.value = tourData.teering || '';
  celda.appendChild(inputTeering);

  // Celda 6: Acciones
  celda = fila.insertCell();
  celda.style.textAlign = "center";
  let btnEliminar = document.createElement("button");
  btnEliminar.type = "button";
  btnEliminar.classList.add("rojo-mas");
  btnEliminar.innerHTML = '<i class="fas fa-trash-alt"></i>';
  btnEliminar.onclick = function() { eliminarFilaTourEspecifica(this); };
  celda.appendChild(btnEliminar);

  // Actualizar clases de estilo para todos los inputs de la fila
  fila.querySelectorAll('input').forEach(input => actualizarInputClass(input));
}
    /**
 * Elimina la fila específica de la tabla de pasajeros.
 * Si es la última fila, añade una nueva vacía.
 * @param {HTMLButtonElement} botonEliminar - El botón "Eliminar" que fue presionado.
 */
function eliminarFilaPasajeroEspecifica(botonEliminar) {
  const filaAEliminar = botonEliminar.closest('tr');
  const tablaBody = filaAEliminar.parentNode;
  const eraPrimeraFila = (tablaBody.rows[0] === filaAEliminar);

  if (tablaBody.rows.length > 1) {
    filaAEliminar.remove();
  } else {
    // Si es la única fila, limpiarla en lugar de eliminarla y añadir otra
    const inputs = filaAEliminar.querySelectorAll('input');
    inputs.forEach(input => {
      input.value = '';
      actualizarInputClass(input); // Resetear estilo
    });
    // No se elimina la fila, se limpia.
    // Si quieres eliminarla y añadir una nueva:
    // filaAEliminar.remove();
    // anadirFilaPasajero(); // Esto crearía una fila completamente nueva
  }

  // Si la fila eliminada era la primera, y aún quedan filas,
  // reasignar el listener para calcular ID a la nueva primera fila.
  if (eraPrimeraFila && tablaBody.rows.length > 0) {
    const nuevaPrimeraFila = tablaBody.rows[0];
    const inputPasaporteNuevoPrimero = nuevaPrimeraFila.cells[1].querySelector("input");
    if (inputPasaporteNuevoPrimero) {
      // Remover listener anterior para evitar duplicados (si es que tenía uno)
      // Esto es un poco más complejo, la forma más simple es clonar y reemplazar:
      const clonedInput = inputPasaporteNuevoPrimero.cloneNode(true);
      inputPasaporteNuevoPrimero.parentNode.replaceChild(clonedInput, inputPasaporteNuevoPrimero);
      clonedInput.addEventListener("input", function() { debouncedCalcularIdVoucher(); actualizarInputClass(this); });
      // Asegurar que el estilo se aplica si ya tiene valor
      actualizarInputClass(clonedInput);
    }
  }
  // Si no quedan filas (porque limpiamos la única), añadir una nueva
  if (tablaBody.rows.length === 0) {
      anadirFilaPasajero();
  }
  
  actualizarPaxEnTours();
  // Si el ID del voucher estaba vacío y se estaba calculando, llamar a calcular de nuevo
  if (!document.getElementById("voucherId").value.trim()){
    debouncedCalcularIdVoucher();
  }
}


    function formatearHoraParaInput(horaStr) {
      if (!horaStr) return "";
      let horaLimpia = horaStr.trim().toLowerCase();
      const ampmRegex = /^(\d{1,2}):(\d{2})(?::(\d{2}))?\s*(a\.m\.|p\.m\.)$/;
      const ampmMatch = horaLimpia.match(ampmRegex);
      if (ampmMatch) {
         let hour = parseInt(ampmMatch[1], 10);
         let minute = parseInt(ampmMatch[2], 10);
         let period = ampmMatch[4];
         if (period === "p.m." && hour < 12) { hour += 12; }
         else if (period === "a.m." && hour === 12) { hour = 0; }
         const hourStr = hour < 10 ? "0" + hour : "" + hour;
         const minuteStr = minute < 10 ? "0" + minute : "" + minute;
         return hourStr + ":" + minuteStr;
      }
      const regex24 = /^(\d{1,2}):(\d{2})(?::(\d{2}))?$/;
      const match24 = horaLimpia.match(regex24);
      if (match24) {
         let hour24 = parseInt(match24[1], 10);
         let minute24 = parseInt(match24[2], 10);
         if (hour24 > 23 || minute24 > 59) { return ""; }
         let hour24Str = hour24 < 10 ? "0" + hour24 : "" + hour24;
         let minute24Str = minute24 < 10 ? "0" + minute24 : "" + minute24;
         return hour24Str + ":" + minute24Str;
      }
      return "";
    }
    
    function validarCamposPasajero() {
      const emailField = document.getElementById("passengerEmail");
      const wspField = document.getElementById("passengerWsp");
      if (!emailField.value.trim()) { emailField.classList.add("empty"); emailField.classList.remove("filled"); }
      else { emailField.classList.remove("empty"); emailField.classList.add("filled"); }
      if (!wspField.value.trim()) { wspField.classList.add("empty"); wspField.classList.remove("filled"); }
      else { wspField.classList.remove("empty"); wspField.classList.add("filled"); }
    }
  function setupTableKeyboardEvents(tableId, addRowFunction) {
  const tableBody = document.querySelector(`#${tableId} tbody`);
  if (!tableBody) {
    console.warn(`setupTableKeyboardEvents: No se encontró tbody para ${tableId}`);
    return;
  }
  tableBody.addEventListener("keydown", (e) => {
     const input = e.target;
     if (input.tagName.toLowerCase() !== "input" && input.tagName.toLowerCase() !== "button" && input.tagName.toLowerCase() !== "select") return;

     const cell = input.closest("td");
     if (!cell) return;
     const row = cell.parentElement;
     if (!row || row.tagName.toLowerCase() !== "tr") return;

     const cellIndex = Array.from(row.cells).indexOf(cell);

     if (e.key === "Enter") {
        e.preventDefault();
        if (cellIndex < row.cells.length - 2) { // -2 para no intentar enfocar el botón de eliminar
           const nextCell = row.cells[cellIndex + 1];
           const nextInput = nextCell.querySelector("input, select");
           if (nextInput) {
              nextInput.focus();
              if (typeof nextInput.select === 'function') nextInput.select();
           }
        } else { // Si está en la última celda de datos (antes de Acciones) o en Acciones
           addRowFunction();
           const newRow = tableBody.lastElementChild;
           if (newRow) {
              const firstInput = newRow.cells[0]?.querySelector("input, select");
              if (firstInput) {
                 firstInput.focus();
                 if (typeof firstInput.select === 'function') firstInput.select();
              }
           }
        }
     } else if (e.key === "Escape") {
        e.preventDefault();
        if (input.dataset.original !== undefined) { input.value = input.dataset.original; }
        input.blur();
     } else if (e.key === "Delete" && input.closest('td').cellIndex < row.cells.length -1) { // Solo si no es el botón de eliminar
        // Esta lógica es un poco redundante ahora que hay botones de eliminar por fila.
        // Podrías simplificarla o eliminarla si los botones son suficientes.
        // Si decides mantenerla, asegúrate que llama a la función de eliminación correcta.
        const deleteButtonInRow = row.cells[row.cells.length - 1]?.querySelector('button.rojo-mas');
        if (deleteButtonInRow) {
            if (tableId === 'tablaPasajeros') {
                eliminarFilaPasajeroEspecifica(deleteButtonInRow);
            } else if (tableId === 'tablaTours') {
                eliminarFilaTourEspecifica(deleteButtonInRow);
            }
            // Intentar enfocar la nueva primera celda de la siguiente fila (si existe)
            // o de la fila anterior si se eliminó la última.
            let focusRow = row.nextElementSibling || row.previousElementSibling || tableBody.querySelector('tr');
            if (focusRow) {
                const firstInput = focusRow.cells[0]?.querySelector('input, select');
                if(firstInput) firstInput.focus();
            }
        }
     } else if (e.key === "ArrowRight" && input.tagName.toLowerCase() !== "button") {
        if (cellIndex < row.cells.length - 2) { // -2 para no ir a la columna de acciones
            e.preventDefault();
            const nextCell = row.cells[cellIndex + 1];
            const nextInput = nextCell.querySelector("input, select");
            if (nextInput) { nextInput.focus(); if (typeof nextInput.select === 'function') nextInput.select(); }
        }
     } else if (e.key === "ArrowLeft" && input.tagName.toLowerCase() !== "button") {
        if (cellIndex > 0) {
            e.preventDefault();
            const prevCell = row.cells[cellIndex - 1];
            const prevInput = prevCell.querySelector("input, select");
            if (prevInput) { prevInput.focus(); if (typeof prevInput.select === 'function') prevInput.select(); }
        }
     } else if (e.key === "ArrowDown" && input.tagName.toLowerCase() !== "button") {
        e.preventDefault();
        const rows = Array.from(tableBody.rows);
        const currentRowIndex = rows.indexOf(row);
        if (currentRowIndex < rows.length - 1) {
           const nextRow = rows[currentRowIndex + 1];
           const targetCell = nextRow.cells[cellIndex];
           if (targetCell) {
              const targetInput = targetCell.querySelector("input, select");
              if (targetInput) { targetInput.focus(); if (typeof targetInput.select === 'function') targetInput.select(); }
           }
        }
     } else if (e.key === "ArrowUp" && input.tagName.toLowerCase() !== "button") {
        e.preventDefault();
        const rows = Array.from(tableBody.rows);
        const currentRowIndex = rows.indexOf(row);
        if (currentRowIndex > 0) {
           const prevRow = rows[currentRowIndex - 1];
           const targetCell = prevRow.cells[cellIndex];
           if (targetCell) {
              const targetInput = targetCell.querySelector("input, select");
              if (targetInput) { targetInput.focus(); if (typeof targetInput.select === 'function') targetInput.select(); }
           }
        }
     }
  });
  tableBody.addEventListener("focusin", (e) => {
     const input = e.target;
     if (input.tagName.toLowerCase() === "input") {
        input.dataset.original = input.value;
     }
  });
}

/**
 * Limpia los campos relacionados con un voucher específico cuando cambia la agencia.
 * Restablece las tablas de pasajeros y tours a una fila inicial,
 * limpia los campos de contacto, restricciones y pagos.
 */
function limpiarCamposPorCambioAgencia() {
  console.log("Limpiando campos del voucher (tablas, contacto, pago)...");
  loadedVoucherId = null;

  const tablaPasajerosBody = document.querySelector("#tablaPasajeros tbody");
  if (tablaPasajerosBody) {
    tablaPasajerosBody.innerHTML = "";
    anadirFilaPasajero(); // Ahora añade fila con botón de eliminar
  } else {
    console.warn("limpiarCamposPorCambioAgencia: tbody de tablaPasajeros no encontrado.");
  }

  const tablaToursBody = document.querySelector("#tablaTours tbody");
  if (tablaToursBody) {
    tablaToursBody.innerHTML = "";
    anadirFilaTour(); // Ahora añade fila con botón de eliminar
  } else {
    console.warn("limpiarCamposPorCambioAgencia: tbody de tablaTours no encontrado.");
  }

  const passengerWspInput = document.getElementById("passengerWsp");
  if (passengerWspInput) {
    passengerWspInput.value = "";
    actualizarInputClass(passengerWspInput);
  }
  const passengerEmailInput = document.getElementById("passengerEmail");
  if (passengerEmailInput) {
    passengerEmailInput.value = "";
    actualizarInputClass(passengerEmailInput);
  }

  const restriccionesTextarea = document.getElementById("restricciones");
  if (restriccionesTextarea) {
    restriccionesTextarea.value = "No necesario";
    // No necesita actualizarInputClass si es un textarea que siempre tiene valor por defecto.
  }

  const totalInput = document.getElementById("total");
  if (totalInput) {
    totalInput.value = "";
    actualizarInputClass(totalInput);
  }
  const depositoInput = document.getElementById("deposito");
  if (depositoInput) {
    depositoInput.value = "";
    actualizarInputClass(depositoInput);
  }
  recalcularPago(); // Recalcula y aplica estilo al balance

  actualizarPaxEnTours(); // Asegura que el Pax en la nueva fila de tour sea correcto

  const btnAnular = document.getElementById("btnAnular");
  if (btnAnular) btnAnular.style.display = "none";
  const watermark = document.getElementById("watermark");
  if (watermark) watermark.style.display = "none";
  const btnGuardar = document.getElementById("btnGuardarYEnviar");
  if (btnGuardar) btnGuardar.style.display = "inline-block";

  // --- NUEVA LÍNEA ---
  // Llama a la función para ocultar y bloquear la sección de descripción,
  // pasándole 'true' para forzar que se oculte.
  toggleDescripcionClave(true);
  // --- FIN NUEVA LÍNEA ---

  console.log("Campos del voucher y sección de descripción reiniciados.");
}
    // --- FUNCIONES PARA SECCIÓN DESCRIPCIÓN ---
    function toggleDescripcionClave(forceHide = false) {
      const claveContainer = document.getElementById('descripcionClaveContainer'); const contContainer = document.getElementById('descripcionContenido'); const claveInput = document.getElementById('descripcionClaveInput');
      if (!claveContainer || !contContainer || !claveInput) return; const isVisible = claveContainer.style.display === 'block' || contContainer.style.display === 'block';
      if (forceHide || isVisible) { claveContainer.style.display='none'; contContainer.style.display='none'; claveInput.value=''; descripcionDesbloqueada=false; }
      else { claveContainer.style.display='block'; contContainer.style.display='none'; descripcionDesbloqueada=false; }
    }

    function verificarClaveDescripcion() {
        const ruc = document.getElementById('agencia')?.value; const cInput = document.getElementById('descripcionClaveInput'); const clave = cInput?.value;
        if(!ruc){alert("Seleccione agencia.");return;} if(!clave){alert("Ingrese clave.");cInput?.focus();return;} document.getElementById('overlay').style.display='flex';
        google.script.run.withSuccessHandler(ok => { document.getElementById('overlay').style.display='none'; if(ok){ document.getElementById('descripcionClaveContainer').style.display='none'; document.getElementById('descripcionContenido').style.display='block'; cInput.value=''; descripcionDesbloqueada=true; const fInput=document.getElementById('descripcionFechaFiltro'); if(fInput&&!fInput.value)fInput.valueAsDate=new Date(); cargarDatosDescripcion(); updateTableScrollButtons('descripcionTableWrapper'); } else { alert("Clave incorrecta."); cInput.focus(); cInput.select(); descripcionDesbloqueada=false; } }).withFailureHandler(err => { document.getElementById('overlay').style.display='none'; alert("Error: "+err.message); descripcionDesbloqueada=false; }).verificarClaveDescripcion(ruc, clave);
    }

        
   function cargarDatosDescripcion() {
    if (!descripcionDesbloqueada) { console.log("DEBUG: cargarDatosDescripcion - Bloqueado"); return; }
    const aSel = document.getElementById('agencia');
    const ruc = aSel?.value;
    const aNom = aSel ? (aSel.options[aSel.selectedIndex]?.text || ruc) : 'N/A';
    const fFiltro = document.getElementById('descripcionFechaFiltro')?.value;
    const nSpan = document.getElementById('descripcionAgenciaNombre');
    const tbody = document.getElementById('descripcionTableBody');

    if(nSpan) nSpan.textContent = aNom;
    if(!tbody) { console.error("Tbody descripción no encontrado"); return; }

    const totalCols = 14; 

    if(!ruc || !fFiltro){
         tbody.innerHTML = `<tr><td colspan="${totalCols}">Selec. agencia y fecha.</td></tr>`;
         updateTableScrollButtons('descripcionTableWrapper');
         return;
    }

    document.getElementById('overlay').style.display = 'flex';
    tbody.innerHTML = `<tr><td colspan="${totalCols}">Cargando...</td></tr>`;

    google.script.run.withSuccessHandler(vouchers => {
        document.getElementById('overlay').style.display = 'none';
        tbody.innerHTML = '';

        if (vouchers?.length > 0) {
            vouchers.forEach(v => {
                const r = tbody.insertRow();
                r.dataset.voucherId = v.idVoucher;

                if (loadedVoucherId && v.idVoucher === loadedVoucherId) {
                    r.classList.add('highlighted-row');
                }
                
                const sriCell = r.insertCell();
                const sriCheckbox = document.createElement('input');
                sriCheckbox.type = 'checkbox';
                sriCheckbox.classList.add('sri-checkbox-descripcion');
                sriCheckbox.dataset.voucherId = v.idVoucher;
                sriCell.appendChild(sriCheckbox);

                r.insertCell().textContent = v.idVoucher || '--';
                r.insertCell().textContent = v.fechaCompra || '--';
                r.insertCell().textContent = v.sucursal || '--';
                r.insertCell().textContent = parseFloat(v.balance || 0).toFixed(2);
                r.insertCell().textContent = parseFloat(v.deposito || 0).toFixed(2);
                const tc = r.insertCell();
                tc.textContent = parseFloat(v.total || 0).toFixed(2);
                tc.dataset.total = parseFloat(v.total || 0);

                const coC = r.insertCell();
                const coI = document.createElement('input');
                coI.type = 'number'; coI.step = '0.01'; coI.value = parseFloat(v.costosOperacion || 0).toFixed(2);
                coI.dataset.columna = 'costosOperacion';
                coI.oninput = e => calcularComisionesFila(e.target.closest('tr'));
                coC.appendChild(coI);

                const ctC = r.insertCell();
                ctC.textContent = '0.00'; ctC.dataset.columna = 'comisionTotal';

                const caC = r.insertCell();
                const caI = document.createElement('input');
                caI.type = 'number'; caI.step = '0.01'; caI.value = parseFloat(v.comisionAgente || 0).toFixed(2);
                caI.dataset.columna = 'comisionAgente';
                caI.oninput = e => calcularComisionAgenciaDesdeAgente(e.target.closest('tr'));
                caC.appendChild(caI);

                const cAgaC = r.insertCell();
                const cAgaI = document.createElement('input');
                cAgaI.type = 'number'; cAgaI.step = '0.01'; cAgaI.value = parseFloat(v.comisionAgencia || 0).toFixed(2);
                cAgaI.dataset.columna = 'comisionAgencia';
                // --- LÍNEA CLAVE A VERIFICAR/AÑADIR ---
                cAgaI.oninput = e => calcularComisionAgenteDesdeAgencia(e.target.closest('tr'));
                cAgaC.appendChild(cAgaI);

                r.insertCell().textContent = v.estado || '--';
                r.insertCell().textContent = v.usuario || '--';

                const dC = r.insertCell();
                const dI = document.createElement('input');
                dI.type = 'text'; dI.value = v.descripcion || ''; dI.placeholder = 'Nota...';
                dI.classList.add('descripcion-texto'); dI.dataset.columna = 'descripcion';
                dC.appendChild(dI);

                calcularComisionesFila(r);
            });
        } else {
            tbody.innerHTML = `<tr><td colspan="${totalCols}">No hay vouchers para esta agencia y fecha.</td></tr>`;
        }
        updateTableScrollButtons('descripcionTableWrapper');
    }).withFailureHandler(error => {
        document.getElementById('overlay').style.display = 'none';
        console.error("Error cargar desc:", error);
        alert("Error al cargar datos de descripción: " + error.message);
        tbody.innerHTML = `<tr><td colspan="${totalCols}">Error al cargar datos: ${error.message}</td></tr>`;
        updateTableScrollButtons('descripcionTableWrapper');
    }).obtenerDatosDescripcion(ruc, fFiltro);
}

     function calcularComisionesFila(row) {
        if (!row) return;

        // Celda 7 (índice 6) contiene el Total. Obtenemos su valor del dataset.
        const totalValue = parseFloat(row.cells[6]?.dataset.total || 0); 
        const costosOpInput = row.querySelector('input[data-columna="costosOperacion"]');
        const comisionTotalCell = row.querySelector('td[data-columna="comisionTotal"]');
        
        if (!costosOpInput || !comisionTotalCell) return;
        
        // **CORRECCIÓN**: Reemplazar la coma por un punto para que parseFloat funcione.
        const costosOp = parseFloat(costosOpInput.value.replace(',', '.')) || 0;
        
        // --- Cálculo correcto ---
        const comisionTotalCalculada = totalValue - costosOp;
        comisionTotalCell.textContent = comisionTotalCalculada.toFixed(2);
        
        // Después de calcular la comisión total, siempre debemos re-balancear las otras dos.
        // Llamamos a la función que calcula la comisión de la agencia.
        calcularComisionAgenciaDesdeAgente(row);
    }

      function calcularComisionAgenciaDesdeAgente(row) {
        if (!row) return;

        const comisionTotal = parseFloat(row.querySelector('td[data-columna="comisionTotal"]')?.textContent || 0);
        const comisionAgenteInput = row.querySelector('input[data-columna="comisionAgente"]');
        const comisionAgenciaInput = row.querySelector('input[data-columna="comisionAgencia"]');

        if (!comisionAgenteInput || !comisionAgenciaInput) return;
        
        // **CORRECCIÓN**: Reemplazar la coma por un punto para el cálculo.
        const comisionAgente = parseFloat(comisionAgenteInput.value.replace(',', '.')) || 0;
        
        // --- Lógica correcta: Comisión Agencia es el residuo ---
        const comisionAgenciaCalculada = comisionTotal - comisionAgente;
        
        // Asignamos el valor al input de Comisión Agencia.
        comisionAgenciaInput.value = comisionAgenciaCalculada.toFixed(2);
    }
        function calcularComisionAgenteDesdeAgencia(row) {
        if (!row) return;

        const comisionTotal = parseFloat(row.querySelector('td[data-columna="comisionTotal"]')?.textContent || 0);
        const comisionAgenteInput = row.querySelector('input[data-columna="comisionAgente"]');
        const comisionAgenciaInput = row.querySelector('input[data-columna="comisionAgencia"]');

        if (!comisionAgenteInput || !comisionAgenciaInput) return;

        // **CORRECCIÓN**: Reemplazar la coma por un punto para el cálculo.
        const comisionAgencia = parseFloat(comisionAgenciaInput.value.replace(',', '.')) || 0;

        // --- Lógica inversa: Comisión Agente es el residuo ---
        const comisionAgenteCalculada = comisionTotal - comisionAgencia;

        // Asignamos el valor al input de Comisión Agente.
        comisionAgenteInput.value = comisionAgenteCalculada.toFixed(2);
    }
       
    function guardarDatosDescripcion() {
         if (!descripcionDesbloqueada) { alert("Bloqueado."); return; } const tbody = document.getElementById('descripcionTableBody'); if(!tbody) return; const filas = tbody.querySelectorAll('tr'); const datos = [];
         filas.forEach(r => { const vId=r.dataset.voucherId; if(!vId) return; const coI=r.querySelector('input[data-columna="costosOperacion"]'); const caI=r.querySelector('input[data-columna="comisionAgente"]'); const cagaI=r.querySelector('input[data-columna="comisionAgencia"]'); const dI=r.querySelector('input[data-columna="descripcion"]'); const cT=parseFloat(r.querySelector('td[data-columna="comisionTotal"]')?.textContent||0); datos.push({ voucherId:vId, costosOperacion:parseFloat(coI?.value||0), comisionTotal:cT, comisionAgente:parseFloat(caI?.value||0), comisionAgencia:parseFloat(cagaI?.value||0), descripcion:dI?.value||'' }); });
         if(datos.length === 0){ alert("No hay datos."); return; } console.log("Guardando desc:", datos); document.getElementById('overlay').style.display='flex';
         google.script.run.withSuccessHandler(res => { document.getElementById('overlay').style.display='none'; alert(res); cargarDatosDescripcion(); }).withFailureHandler(err => { document.getElementById('overlay').style.display='none'; alert("Error: "+err.message); }).actualizarDatosDescripcion(datos);
    }
    
function updateTableScrollButtons(wrapperId) {
  try {
    const wrapper = document.getElementById(wrapperId);
    const scrollButtonsDiv = document.getElementById(wrapperId.replace('Wrapper', 'ScrollBtns'));
    if (!wrapper || !scrollButtonsDiv) return;
    const scrollThreshold = 5; // Un pequeño umbral para considerar si hay scroll
    // Comprueba si el contenido es más ancho que el contenedor
    const canScroll = wrapper.scrollWidth > wrapper.clientWidth + scrollThreshold;

    if (canScroll) {
        scrollButtonsDiv.style.display = 'flex'; // Muestra los botones si hay scroll
        const scrollLeftBtn = scrollButtonsDiv.querySelector('button:first-child');
        const scrollRightBtn = scrollButtonsDiv.querySelector('button:last-child');

        // Habilita/deshabilita botones según la posición del scroll
        if (scrollLeftBtn) scrollLeftBtn.disabled = wrapper.scrollLeft <= scrollThreshold;
        const maxScrollLeft = wrapper.scrollWidth - wrapper.clientWidth;
        if (scrollRightBtn) scrollRightBtn.disabled = wrapper.scrollLeft >= maxScrollLeft - scrollThreshold;

    } else {
        scrollButtonsDiv.style.display = 'none'; // Oculta los botones si no hay scroll
    }
  } catch (e) {
    console.error(`Error en updateTableScrollButtons para ${wrapperId}:`, e);
  }
}

    function cambiarClaveDescripcion() {
        if (!descripcionDesbloqueada) { alert("Bloqueado."); return; } const ruc = document.getElementById('agencia')?.value; const nInput = document.getElementById('nuevaClaveDescripcionInput'); const nClave = nInput?.value;
        if(!ruc){alert("Seleccione agencia.");return;} if(typeof nClave === 'undefined'){alert("Ingrese clave.");nInput?.focus();return;} if (!confirm("¿Cambiar clave?")) return; document.getElementById('overlay').style.display = 'flex';
        google.script.run.withSuccessHandler(res => { document.getElementById('overlay').style.display='none'; alert(res); if(nInput)nInput.value=''; }).withFailureHandler(err => { document.getElementById('overlay').style.display='none'; alert("Error: "+err.message); }).actualizarClaveDescripcion(ruc, nClave||'');
    }
       // --- Inicialización al cargar la página ---
    // Ejecuta inicializarFormulario cuando el DOM esté listo
    document.addEventListener("DOMContentLoaded", inicializarFormulario);


       function buscarVoucher() {
  const voucherIdInput = document.getElementById("voucherId"); // Obtener el elemento input
  let idVoucher = voucherIdInput.value; // Obtener el valor actual

  // 1. Formatear el valor: quitar espacios y convertir a mayúsculas
  idVoucher = idVoucher.trim().toUpperCase();

  // 2. Actualizar el valor en el campo de entrada para que el usuario vea el formato
  voucherIdInput.value = idVoucher;

  // 3. Validar si el ID formateado está vacío
  if (!idVoucher) {
     alert("Por favor, ingresa un ID Voucher válido.");
     // Opcional: Enfocar el campo de nuevo si está vacío
     // voucherIdInput.focus();
     return;
  }

  // Mostrar overlay ANTES de la llamada al servidor
  document.getElementById("overlay").style.display = "flex";
  console.log(`Buscando voucher con ID: "${idVoucher}"`);


  google.script.run.withSuccessHandler((datos) => {
     // El overlay se ocultará DESPUÉS de intentar generar PDF si es guardar+enviar,
     // o aquí si es solo buscar. Vamos a ocultarlo aquí directamente por simplicidad
     // en la búsqueda simple. El flujo de guardar+enviar ya lo maneja.
     document.getElementById("overlay").style.display = "none";
     console.log("Respuesta del servidor (recuperarDatosVoucher):", datos);

     // --- Comprobación de agencia (sin cambios) ---
     const agenciaSeleccionada = document.getElementById("agencia").value;
     const agenciaSelect = document.getElementById("agencia");
     const nombreAgenciaSeleccionada = agenciaSelect.options[agenciaSelect.selectedIndex]?.text || agenciaSeleccionada;

     if (datos && datos.agencia && datos.agencia !== agenciaSeleccionada) {
         let nombreAgenciaVoucher = datos.agencia;
         if (datos.agencyDetails && datos.agencyDetails.agencia) {
             nombreAgenciaVoucher = datos.agencyDetails.agencia;
         }
         alert("El voucher '" + idVoucher + "' pertenece a la agencia '" + nombreAgenciaVoucher + "' (RUC: " + datos.agencia + ") y no a la agencia actualmente seleccionada ('" + nombreAgenciaSeleccionada + "', RUC: " + agenciaSeleccionada + "). Limpiando formulario.");
          limpiarFormularioCompleto(); // Limpia todo si la agencia no coincide
         return;
     }
     // --- Fin comprobación de agencia ---


     if (datos) { // Si datos NO es null (voucher encontrado Y de la agencia correcta)
        console.log("Voucher encontrado y pertenece a la agencia correcta.");
        // Establecer el ID del voucher cargado globalmente
        loadedVoucherId = datos.voucherId;
        // Asegúrate de que el ID mostrado sea el exacto devuelto por el backend (puede tener formato específico)
        voucherIdInput.value = datos.voucherId; // Actualiza con el ID exacto del backend
        actualizarInputClass(voucherIdInput); // Aplica estilo

        llenarFormularioConDatos(datos); // Llena todos los campos principales
        agregarVoucherALista(datos.voucherId); // Añade el ID exacto a la lista

        // --- NUEVA LÓGICA PARA LA SECCIÓN DESCRIPCIÓN ---
        // Si el voucher tiene fecha de compra, establecerla en el filtro de descripción
        // y cargar los datos si la sección está desbloqueada
        const fechaFiltroInput = document.getElementById('descripcionFechaFiltro');
        if (fechaFiltroInput && datos.fechaDeCompraInput) {
             fechaFiltroInput.value = datos.fechaDeCompraInput; // Establecer la fecha del voucher (YYYY-MM-DD)
             console.log("DEBUG: Filtro de fecha de descripción establecido a la fecha del voucher:", datos.fechaDeCompraInput);
             // Si la sección descripción está desbloqueada, cargar sus datos con esta fecha
             if (descripcionDesbloqueada) {
                 console.log("DEBUG: Sección Descripción desbloqueada. Cargando datos de descripción...");
                 cargarDatosDescripcion(); // Recargar la tabla de descripción con esta fecha
             } else {
                 console.log("DEBUG: Sección Descripción bloqueada. No se carga la tabla automáticamente.");
                 // Si está bloqueada, la próxima vez que la desbloquee usando la clave,
                 // el listener onchange en descripcionFechaFiltro (llamando a cargarDatosDescripcion)
                 // se ejecutará porque el valor ya está puesto a la fecha correcta.
             }
        } else {
             console.log("DEBUG: Voucher no tiene fecha de compra input o input de fecha no encontrado. El filtro de fecha de descripción se mantiene como está.");
             // Si el voucher no tiene fecha de compra, el filtro de fecha se queda como estaba (probablemente hoy)
             // Si está desbloqueada, cargarDatosDescripcion ya se habrá llamado al desbloquear
             // y usará la fecha actual. Si está bloqueada, se llamará al desbloquear con la fecha actual.
        }
        // --- FIN NUEVA LÓGICA ---


     } else { // Si datos ES null (voucher no encontrado O no hay permisos)
        console.log("Voucher ID '" + idVoucher + "' no encontrado O no hay permisos.");
        // Si no se encontró (o no hay permisos), limpiar el formulario
        alert("No se encontró ningún voucher con el ID: '" + idVoucher + "' o no tienes permisos para accederlo. Por favor, verifica el ID y la agencia asignada e inténtalo de nuevo.");
         // Limpiar el formulario completo, incluyendo el ID del voucher y la variable global loadedVoucherId
         limpiarFormularioCompleto();
     }
  }).withFailureHandler((error) => { // Esto maneja errores *técnicos* del script, no "no encontrado"
     document.getElementById("overlay").style.display = "none";
     console.error("Error técnico al buscar el voucher:", error);
     alert("Error técnico al buscar el voucher: " + error.message + ". Revisa los logs del script.");
      // Limpiar el formulario completo en caso de error técnico
      limpiarFormularioCompleto();
  })
  // Asegúrate de pasar el idVoucher ya formateado (trim() y toUpperCase())
  .recuperarDatosVoucher(idVoucher);
}
/**
 * Función interna para cargar la bitácora. AHORA INCLUYE EL RUC DE LA AGENCIA.
 * Esta función es llamada por otras como refrescarBitacora.
 */
function cargarBitacoraInterno() {
    console.log("Iniciando carga de Bitácora (interno)...");
    const tbody = document.querySelector('#bitacoraTable tbody');
    if (!tbody) return;

    const fechaFiltro = document.getElementById('bitacoraFechaFiltro').value;
    const tourFiltro = document.getElementById('bitacoraTourFiltro').value;
    const operadorFiltro = document.getElementById('bitacoraOperadorFiltro').value;
    
    // --- LÍNEA CLAVE AÑADIDA ---
    const agenciaRuc = document.getElementById('agencia').value;
    
    const totalCols = document.querySelectorAll('#bitacoraTable thead th').length;

    if (!fechaFiltro) {
        tbody.innerHTML = `<tr><td colspan="${totalCols}">Seleccione una fecha para cargar la bitácora.</td></tr>`;
        return;
    }
    
    if (!agenciaRuc) {
        alert("Por favor, seleccione una agencia antes de cargar la bitácora.");
        return;
    }

    document.getElementById('overlay').style.display = 'flex';
    tbody.innerHTML = `<tr><td colspan="${totalCols}">Cargando...</td></tr>`;
    
    google.script.run
        .withSuccessHandler(displayBitacoraData)
        .withFailureHandler(handleBitacoraError)
        // --- PARÁMETRO DE AGENCIA AÑADIDO ---
        .cargarDatosBitacora(fechaFiltro, tourFiltro, operadorFiltro, agenciaRuc);
}

/**
 * Refresca los datos de la Bitácora.
 * Pregunta al usuario si desea descartar cambios no guardados antes de recargar.
 */
function refrescarBitacora() {
    console.log("refrescarBitacora: Solicitud de refresco iniciada.");

    confirmarYProcederSiNoHayCambios(
        () => { 
            console.log("refrescarBitacora: Confirmado o sin cambios. Procediendo a cargar bitácora interno.");
            // La llamada a cargarBitacoraInterno ahora es segura.
            cargarBitacoraInterno(); 
        },
        () => { 
            console.log("refrescarBitacora: Usuario canceló el refresco. Cambios preservados.");
        }
    );
}
function displayBitacoraData(data) {
    console.log("displayBitacoraData: Renderizando", data ? data.length : 0, "filas.");
    document.getElementById('overlay').style.display = 'none';
    const tbody = document.querySelector('#bitacoraTable tbody');
    if (!tbody) return;

    tbody.innerHTML = '';
    
    const cols = [
        'selectPdf', 'selectSri', 'fechaTour', 'time', 'agencia', 'sucursal', 'usuario',
        'passportId', 'nombre', 'whatsapp', 'tour', 'operador', 'whatsappAgente',
        'email', 'pax', 'ninosAdultosMayores', 'adultos', 'ingreso', 'gastos',
        'total', 'guiaAsignado', 'asistencia', 'nota', 'acciones', 'idVoucher',
        'idReserva', 'fechaActual', 'estadoBitacora'
    ];

    if (!data || data.length === 0) {
        tbody.innerHTML = `<tr><td colspan="${cols.length}">No hay registros para los filtros aplicados.</td></tr>`;
        bitacoraDataClient = [];
    } else {
        bitacoraDataClient = data.map((item, index) => ({...item, clientIndex: index, status: 'unchanged', ingresoManual: true, selectedForPdf: false, selectedForSri: false }));
        
        bitacoraDataClient.forEach(rowData => {
            const rowElement = tbody.insertRow();
            rowElement.dataset.clientIndex = rowData.clientIndex;
            const isRowDisabled = rowData.estadoBitacora === 'eliminada' || rowData.estadoBitacora === 'anulado';
            if(isRowDisabled) rowElement.classList.add('bitacora-row-deleted');

            cols.forEach(key => {
                const cell = rowElement.insertCell();
                cell.dataset.colkey = key;
                const value = rowData[key];

                const isEditable = !isRowDisabled && [
                    'time','nombre','passportId','tour','operador','pax',
                    'ninosAdultosMayores', 'adultos', 'ingreso','gastos',
                    'guiaAsignado','nota','asistencia'
                ].includes(key);

                if (isEditable) {
                    cell.appendChild(crearControlEditable(key, value, rowData.tour));
                } else {
                    if (key === 'selectPdf' || key === 'selectSri') {
                        const checkbox = document.createElement('input');
                        checkbox.type = 'checkbox';
                        checkbox.classList.add(key === 'selectPdf' ? 'pdf-select-checkbox' : 'sri-select-checkbox');
                        checkbox.disabled = isRowDisabled;
                        
                        checkbox.addEventListener('change', function() {
                            const row = this.closest('tr');
                            const clientIndex = parseInt(row.dataset.clientIndex, 10);
                            if (!isNaN(clientIndex) && bitacoraDataClient[clientIndex]) {
                                const propertyToUpdate = (key === 'selectPdf') ? 'selectedForPdf' : 'selectedForSri';
                                bitacoraDataClient[clientIndex][propertyToUpdate] = this.checked;
                            }
                        });

                        cell.appendChild(checkbox);
                    } else if (key === 'acciones') {
                        const btn = document.createElement('button');
                        btn.innerHTML = '<i class="fas fa-trash-alt"></i>';
                        btn.className = 'rojo-mas';
                        btn.disabled = isRowDisabled;
                        btn.onclick = () => eliminarFilaBitacoraRow(btn);
                        cell.appendChild(btn);
                    } else { 
                        cell.textContent = value || '';
                    }
                }
            });

            if (!isRowDisabled) {
                actualizarEstadoInputsPax(rowElement); // <-- CAMBIO CLAVE: Habilita los inputs si es necesario.
                recalcularAdultosFilaBitacora(rowElement);
                recalcularTotalFilaBitacora(rowElement);
            }
        });
    }
    applyHiddenColumnsState();
    updateBitacoraUIState();
    actualizarSumatoriasBitacora();
}
function anadirFilaBitacora() {
    console.log("Añadiendo nueva fila (v_final_5) a la bitácora...");
    const tbody = document.querySelector('#bitacoraTable tbody');
    if (!tbody) { return; }

    const firstRowDOM = tbody.querySelector('tr');
    if (firstRowDOM && firstRowDOM.cells.length === 1) { tbody.innerHTML = ''; }

    const fechaFijaDelFiltro = document.getElementById('bitacoraFechaFiltro').value;
    if (!fechaFijaDelFiltro) {
        alert("Seleccione una Fecha de filtro en la Bitácora antes de añadir una fila.");
        document.getElementById('bitacoraFechaFiltro').focus();
        return;
    }

    const newRowElement = tbody.insertRow();
    const newClientArrayIndex = bitacoraDataClient.length;
    newRowElement.dataset.status = 'new';
    newRowElement.dataset.clientIndex = newClientArrayIndex;
    newRowElement.classList.add('bitacora-row-new');

    const colsHtmlKeysOrdered = [
        'selectPdf', 'selectSri', 'fechaTour', 'time', 'agencia', 'sucursal', 'usuario',
        'passportId', 'nombre', 'whatsapp', 'tour', 'operador', 'whatsappAgente',
        'email', 'pax', 'ninosAdultosMayores', 'adultos', 'ingreso', 'gastos',
        'total', 'guiaAsignado', 'asistencia', 'nota', 'acciones', 'idVoucher',
        'idReserva', 'fechaActual', 'estadoBitacora'
    ];
    
    const defaultRowData = {
        status: 'new', clientIndex: newClientArrayIndex, fechaTour: fechaFijaDelFiltro,
        time: obtenerHoraActual(),
        agencia: '(Auto)', sucursal: '(Auto)', usuario: '(Auto)',
        passportId: '', nombre: '', whatsapp: '', tour: '', operador: '',
        whatsappAgente: '(Auto)', email: '', pax: '', 
        ninosAdultosMayores: 0, adultos: 0, 
        ingreso: 0, gastos: 0, total: 0, guiaAsignado: '', 
        asistencia: 'Y', nota: '', idVoucher: '(Auto)', idReserva: '(Auto)',
        fechaActual: '(Auto)', estadoBitacora: 'nuevo',
        selectedForPdf: false, selectedForSri: false, ingresoManual: false
    };

    colsHtmlKeysOrdered.forEach(key => {
        const cell = newRowElement.insertCell();
        cell.dataset.colkey = key;

        const isEditable = [
            'time','nombre','passportId','email','whatsapp','tour','operador','pax',
            'ninosAdultosMayores', 'adultos', 'ingreso','gastos','guiaAsignado','nota','asistencia'
        ].includes(key);

        if (key === 'selectPdf' || key === 'selectSri') {
            const checkbox = document.createElement('input');
            checkbox.type = 'checkbox';
            checkbox.classList.add(key === 'selectPdf' ? 'pdf-select-checkbox' : 'sri-select-checkbox');

            // --- INICIO DE LA CORRECCIÓN ---
            checkbox.addEventListener('change', function() { // <-- LÍNEA AÑADIDA
                const row = this.closest('tr');
                const clientIndex = parseInt(row.dataset.clientIndex, 10);
                if (!isNaN(clientIndex) && bitacoraDataClient[clientIndex]) {
                    const propertyToUpdate = (key === 'selectPdf') ? 'selectedForPdf' : 'selectedForSri';
                    bitacoraDataClient[clientIndex][propertyToUpdate] = this.checked;
                    console.log(`Fila cliente ${clientIndex}, ${propertyToUpdate} cambiado a: ${this.checked}`);
                }
            });
            // --- FIN DE LA CORRECCIÓN ---

            cell.appendChild(checkbox);
        } else if (key === 'acciones') {
            const deleteButton = document.createElement('button');
            deleteButton.type = 'button';
            deleteButton.classList.add('rojo-mas');
            deleteButton.innerHTML = '<i class="fas fa-trash-alt"></i>';
            deleteButton.onclick = () => eliminarFilaBitacoraRow(deleteButton);
            cell.appendChild(deleteButton);
        } else if (isEditable) {
            const control = crearControlEditable(key, defaultRowData[key], defaultRowData.tour);
            if (key === 'time') {
                control.setAttribute('data-default', 'true');
            }
            cell.appendChild(control);
        } else {
            cell.textContent = defaultRowData[key] || '(Auto)';
        }
    });
    
    bitacoraDataClient.push(defaultRowData);
    
    applyHiddenColumnsStateToRow(newRowElement);
    updateBitacoraUIState();
    newRowElement.querySelector('input[data-columna="passportId"]')?.focus();
}

/**
 * Crea el control HTML apropiado (input, select, button) para una celda editable de la bitácora.
 * VERSIÓN CORREGIDA: Utiliza el evento 'change' para los <select> para asegurar la correcta
 * captura de datos y evitar errores en la lógica de dependencias.
 *
 * @param {string} key - La clave de la columna (ej. 'tour', 'pax', 'asistencia').
 * @param {any} value - El valor inicial para el control.
 * @param {string} [tourDeLaFila=''] - Opcional. El tour seleccionado en la fila, necesario para poblar los operadores.
 * @returns {HTMLElement} El elemento HTML del control creado.
 */
function crearControlEditable(key, value, tourDeLaFila = '') {
    let el;
    const agenciaActualRuc = document.getElementById('agencia').value;

    switch (key) {
        case 'tour':
            el = document.createElement('select');
            el.innerHTML = '<option value="">-- Seleccionar Tour --</option>';
            const toursParaFila = opcionesBitacora.toursPorAgencia?.[agenciaActualRuc] || [];
            toursParaFila.forEach(tour => el.add(new Option(tour, tour)));
            el.value = value || "";
            break;
            
        case 'operador':
            el = document.createElement('select');
            poblarSelectOperadorFila(el, tourDeLaFila, value);
            break;
            
        case 'pax':
        case 'ninosAdultosMayores':
        case 'adultos':
            el = document.createElement('input');
            el.type = 'number';
            el.value = (value === '' || value === null) ? '' : parseFloat(value) || 0;
            el.step = '1';
            el.min = '0'; // Permitir 0
            el.style.textAlign = 'right';
            el.onclick = function() { this.select(); };
            el.disabled = true; // Deshabilitado por defecto, se habilita al seleccionar tour/operador
            break;

        case 'ingreso':
        case 'gastos':
            el = document.createElement('input');
            el.type = 'number';
            el.value = (value === '' || value === null) ? '' : parseFloat(value) || 0;
            el.step = '0.01';
            el.style.textAlign = 'right';
            el.onclick = function() { this.select(); };
            break;

        case 'time':
            el = document.createElement('input');
            el.type = 'time';
            el.value = value || '00:00';
            break;
            
        case 'email':
            el = document.createElement('input');
            el.type = 'email';
            el.value = value || '';
            el.placeholder = 'pasajero@email.com';
            break;
            
        case 'whatsapp':
            el = document.createElement('input');
            el.type = 'tel';
            el.value = value || '';
            el.placeholder = '5939...';
            break;
            
        case 'asistencia':
            el = document.createElement('button');
            el.type = 'button';
            el.classList.add('asistencia-switch');
            const asistenciaValue = String(value || 'Y').trim().toUpperCase();
            if (asistenciaValue === 'Y' || asistenciaValue === 'SI') {
                el.textContent = 'Sí';
                el.classList.add('si');
            } else {
                el.textContent = 'No';
                el.classList.add('no');
            }
            el.addEventListener('click', function() { toggleAsistenciaBitacora(this); });
            break;
            
        default: // para 'nombre', 'passportId', 'guiaAsignado', 'nota'
            el = document.createElement('input');
            el.type = 'text';
            el.value = value || '';
            if (key === 'guiaAsignado') el.placeholder = 'Nombre del Guía';
            if (key === 'nombre') el.placeholder = 'Nombre(s) pasajero(s)';
            if (key === 'passportId') el.placeholder = 'Pasaporte(s) / ID(s)';
            if (key === 'nota') el.placeholder = 'Añadir nota...';
            break;
    }
    
    // --- SECCIÓN DE ASIGNACIÓN DE EVENTOS (CORREGIDA) ---
    // Asignar dataset y listeners generales a todos los elementos excepto al botón de asistencia
    if (key !== 'asistencia') {
        el.dataset.columna = key;
        
        // CORRECCIÓN: Usar 'change' para los SELECT, 'input' para los demás.
        const eventType = (el.tagName === 'SELECT') ? 'change' : 'input';
        
        el.addEventListener(eventType, () => {
            if (el.hasAttribute('data-default')) {
                el.removeAttribute('data-default');
            }
            // La lógica para poblar el select de operador se maneja explícitamente al cambiar el tour.
            if (key === 'tour') {
                const fila = el.closest('tr');
                const operadorSelect = fila.querySelector('select[data-columna="operador"]');
                poblarSelectOperadorFila(operadorSelect, el.value);
            }
            
            // Llamada única y consistente al manejador principal de cambios.
            handleBitacoraInputChange(el);
            actualizarEstiloInputBitacora(el); 
        });
        
        // Aplicar estilo inicial al crear el control
        setTimeout(() => actualizarEstiloInputBitacora(el), 0);
    }
    
    return el;
}
/**
 * Pobla el select de operador de una fila específica.
 */
function poblarSelectOperadorFila(operadorSelect, tourSeleccionado, valorActual = '') {
    if (!operadorSelect) return;
    const agenciaActualRuc = document.getElementById('agencia').value;
    const operadoresPermitidos = opcionesBitacora.operadoresPorTour?.[tourSeleccionado]?.[agenciaActualRuc] || [];
    
    operadorSelect.innerHTML = '<option value="">-- Operador --</option>';
    operadoresPermitidos.forEach(operador => {
        operadorSelect.add(new Option(operador, operador));
    });
    operadorSelect.value = valorActual;
    operadorSelect.disabled = operadoresPermitidos.length === 0;
}
function handleBitacoraInputChange(inputElement) {
    const row = inputElement.closest('tr');
    if (!row) return;
    const clientIndex = parseInt(row.dataset.clientIndex, 10);
    const colKey = inputElement.dataset.columna;

    if (isNaN(clientIndex) || !bitacoraDataClient[clientIndex] || !colKey) return;

    bitacoraDataClient[clientIndex][colKey] = (inputElement.type === 'number') 
        ? (parseFloat(inputElement.value) || 0) 
        : inputElement.value;
    
    if (bitacoraDataClient[clientIndex].status === 'unchanged') {
        bitacoraDataClient[clientIndex].status = 'edited';
        row.classList.add('bitacora-row-edited');
    }
    
    // --- LÓGICA DE DEPENDENCIAS Y CÁLCULOS ---
    if (colKey === 'tour' || colKey === 'operador') {
        actualizarEstadoInputsPax(row); // Habilita/deshabilita los campos de pasajeros
        bitacoraDataClient[clientIndex].ingresoManual = false; // Resetea la bandera manual
        recalcularIngresoFilaBitacora(row); // Recalcula inmediatamente
    } else if (['pax', 'ninosAdultosMayores'].includes(colKey)) {
        bitacoraDataClient[clientIndex].ingresoManual = false;
        recalcularAdultosFilaBitacora(row);
        recalcularIngresoFilaBitacora(row); // Vuelve a calcular el ingreso cuando cambia la cantidad
    } else if (colKey === 'ingreso') {
        bitacoraDataClient[clientIndex].ingresoManual = true; // El usuario editó manualmente
    }
    
    recalcularTotalFilaBitacora(row);
    updateBitacoraUIState();
    actualizarSumatoriasBitacora();
}
    /**
     * Maneja errores al cargar los datos de Bitácora desde el servidor.
     * @param {Error} error - El objeto de error.
     */
    function handleBitacoraError(error) {
        document.getElementById('overlay').style.display = 'none';
        const tbody = document.getElementById('bitacoraTable')?.querySelector('tbody');
        const thead = document.getElementById('bitacoraTable')?.querySelector('thead tr');
        const totalCols = thead ? thead.cells.length : 23; // Ajusta el colspan default si es necesario

        if (tbody) {
            tbody.innerHTML = `<tr><td colspan="${totalCols}">Error al cargar Bitácora: ${error.message}</td></tr>`;
        }
        console.error("Error al cargar datos de Bitácora:", error);
        bitacoraDataClient = [];
        updateTableScrollButtons('bitacoraTableWrapper');
        updateBitacoraUIState();
        alert("Error al cargar Bitácora: " + error.message);
    }
   /**
     * Maneja errores al cargar los datos de Bitácora desde el servidor.
     * @param {Error} error - El objeto de error.
     */
    function handleBitacoraError(error) {
        document.getElementById('overlay').style.display = 'none';
        const tbody = document.getElementById('bitacoraTable')?.querySelector('tbody');
        if (!tbody) { /* ... */ return; }
         const thead = document.getElementById('bitacoraTable')?.querySelector('thead tr');
         const totalCols = thead ? thead.cells.length : 12;
        tbody.innerHTML = `<tr><td colspan="${totalCols}">Error al cargar Bitácora: ${error.message}</td></tr>`;
        console.error("Error al cargar datos de Bitácora:", error);
        bitacoraDataClient = [];
        updateTableScrollButtons('bitacoraTableWrapper');
        updateBitacoraUIState(); // Actualizar estado de UI en caso de error
        alert("Error al cargar Bitácora: " + error.message);
    }
  

    function applyHiddenColumnsStateToRow(row) {
    if (!row || !row.cells) return;

    Array.from(row.cells).forEach(cell => {
        const colKey = cell.dataset.colkey;
        // MODIFICADO: Añadimos 'selectSri' a la lista de exclusiones
        if (colKey && colKey !== 'acciones' && colKey !== 'selectPdf' && colKey !== 'selectSri') {
            const isHidden = !!hiddenBitacoraColumns[colKey];
            if (isHidden) {
                cell.classList.add('bitacora-hidden-column');
            } else {
                cell.classList.remove('bitacora-hidden-column');
            }
        }
    });
}

/**
 * Aplica el estado de visibilidad de columnas (basado en hiddenBitacoraColumns)
 * a toda la tabla de Bitácora (encabezados Y todas las celdas de datos).
 * VERSIÓN FINAL Y ROBUSTA v2.
 */
function applyHiddenColumnsState() {
    const table = document.getElementById('bitacoraTable');
    if (!table) {
        console.error("Tabla Bitácora no encontrada para aplicar estado de columnas.");
        return;
    }

    // Obtenemos todas las claves de columna posibles desde los 'data-colkey' en la tabla.
    const allColKeys = [...new Set(Array.from(table.querySelectorAll('[data-colkey]'), el => el.dataset.colkey))];

    // Iteramos sobre cada clave de columna que existe en la tabla
    allColKeys.forEach(colKey => {
        // Consultamos si esta columna debe estar oculta según nuestro objeto guardado
        const isHidden = !!hiddenBitacoraColumns[colKey];
        
        // --- LÓGICA DE OCULTAMIENTO CENTRALIZADA ---

        // 1. Ocultar/mostrar el encabezado (el <th> completo)
        // Buscamos el <th> que contiene un elemento con el data-colkey correcto
        const headerCell = table.querySelector(`th [data-colkey="${colKey}"]`)?.closest('th');
        if (headerCell) {
            headerCell.classList.toggle('bitacora-hidden-column', isHidden);
        }

        // 2. Ocultar/mostrar TODAS las celdas de datos (<td>) de esa columna
        const dataCells = table.querySelectorAll(`td[data-colkey="${colKey}"]`);
        dataCells.forEach(cell => {
            cell.classList.toggle('bitacora-hidden-column', isHidden);
        });

        // 3. Actualizar el ícono del ojo
        const eyeIcon = table.querySelector(`thead .toggle-visibility[data-colkey="${colKey}"]`);
        if (eyeIcon) {
            eyeIcon.classList.toggle('hidden-icon', isHidden);
        }
    });

    updateTableScrollButtons('bitacoraTableWrapper');
}
function recalcularAdultosFilaBitacora(rowElement) {
    if (!rowElement) return;

    const paxInput = rowElement.querySelector('input[data-columna="pax"]');
    const ninosInput = rowElement.querySelector('input[data-columna="ninosAdultosMayores"]');
    const adultosInput = rowElement.querySelector('input[data-columna="adultos"]'); // Adultos ahora siempre es un input

    // Si alguno de los inputs no existe en la fila, no podemos calcular.
    if (!paxInput || !ninosInput || !adultosInput) {
        // Esta advertencia ahora es útil para depurar si algo falla
        // console.warn("Faltan inputs de pax/niños/adultos para recalcular.");
        return;
    }

    const pax = parseFloat(paxInput.value) || 0; 
    const ninos = parseFloat(ninosInput.value) || 0; 
    
    let adultosCalculados = pax - ninos;
    if (adultosCalculados < 0) adultosCalculados = 0;
    
    // Asignamos el valor calculado al input de adultos.
    adultosInput.value = adultosCalculados;
    
    const clientIndex = parseInt(rowElement.dataset.clientIndex, 10);
    if (!isNaN(clientIndex) && bitacoraDataClient[clientIndex]) {
        bitacoraDataClient[clientIndex].adultos = adultosCalculados;
    }
}
function recalcularIngresoFilaBitacora(row) {
    if (!row) return;
    const clientIndex = parseInt(row.dataset.clientIndex, 10);
    if (isNaN(clientIndex) || !bitacoraDataClient[clientIndex]) return;

    if (bitacoraDataClient[clientIndex].ingresoManual) {
        return; // No hacer nada si fue editado manualmente
    }

    const ingresoInput = row.querySelector('input[data-columna="ingreso"]');
    if (!ingresoInput) return;
    
    // Obtenemos los valores DIRECTAMENTE de los inputs de la fila
    const tourSeleccionado = row.querySelector('select[data-columna="tour"]')?.value;
    const operadorSeleccionado = row.querySelector('select[data-columna="operador"]')?.value;
    const ninos = parseFloat(row.querySelector('input[data-columna="ninosAdultosMayores"]')?.value) || 0;
    const adultos = parseFloat(row.querySelector('input[data-columna="adultos"]')?.value) || 0;

    // Log para depuración. Puedes verlo con F12 en tu navegador.
    console.log(`--- Recalculando Ingreso para Fila ${clientIndex} ---`);
    console.log(`Buscando precios para Tour: '${tourSeleccionado}', Operador: '${operadorSeleccionado}'`);
    
    let precioAdulto = 0; // Por defecto el precio es 0 si no se encuentra
    let precioNino = 0;

    if (tourSeleccionado && operadorSeleccionado && opcionesBitacora.preciosPorOperador?.[tourSeleccionado]?.[operadorSeleccionado]) {
        const precios = opcionesBitacora.preciosPorOperador[tourSeleccionado][operadorSeleccionado];
        precioAdulto = precios.adultos;
        precioNino = precios.ninos;
        console.log(`¡Éxito! Precios encontrados: Adulto=$${precioAdulto}, Niño=$${precioNino}`);
    } else {
        console.log("No se encontraron precios dinámicos. El ingreso será 0 hasta que se definan.");
    }
    
    const ingresoCalculado = (adultos * precioAdulto) + (ninos * precioNino);

    ingresoInput.value = ingresoCalculado.toFixed(2);
    bitacoraDataClient[clientIndex].ingreso = ingresoCalculado;
}
          function recalcularTotalFilaBitacora(row) {
         if (!row) return;
          // Obtener el valor de Ingreso (ya calculado o ingresado)
          const ingresoInput = row.querySelector('input[data-columna="ingreso"]'); 
          const ingreso = parseFloat(ingresoInput?.value || 0) || 0;

         const gastosInput = row.querySelector('input[data-columna="gastos"]'); 
         const gastos = parseFloat(gastosInput?.value || 0) || 0;

         const totalCell = row.querySelector('td[data-colkey="total"]'); 

         if(totalCell) {
              const totalCalculado = ingreso - gastos;
              totalCell.textContent = totalCalculado.toFixed(2);

               const clientIndex = parseInt(row.dataset.clientIndex, 10);
               if (!isNaN(clientIndex) && bitacoraDataClient[clientIndex]) {
                   bitacoraDataClient[clientIndex].total = totalCalculado;
                   // Actualizar también el dataClient de ingreso y gastos por si acaso
                   // aunque ya deberían estar actualizados por handleBitacoraInputChange
                   bitacoraDataClient[clientIndex].ingreso = ingreso;
                   bitacoraDataClient[clientIndex].gastos = gastos;
               }
         } else {
             console.warn("Celda Total (td[data-colkey='total']) no encontrada para recalcular en fila:", row);
         }
     }
     function eliminarFilaBitacoraRow(button) {
        console.log("Intentando marcar/desmarcar fila de Bitácora para eliminar...");
        const row = button.closest('tr');
        if (!row) {
             console.error("No se pudo encontrar el elemento tr para eliminar.");
             return;
        }

        const clientIndex = parseInt(row.dataset.clientIndex, 10);
        if (isNaN(clientIndex) || clientIndex < 0 || clientIndex >= bitacoraDataClient.length) {
             console.error("Índice de cliente inválido:", clientIndex);
             alert("Error interno: No se pudo encontrar la fila en los datos. Recargue la página.");
             return;
        }

        const currentItem = bitacoraDataClient[clientIndex];
        const estadoOriginalHoja = currentItem.estadoBitacora;

        // Si la fila ya estaba 'eliminada' o 'anulada' DESDE LA HOJA, no hacer nada más.
        if (estadoOriginalHoja === 'eliminada' || estadoOriginalHoja === 'anulado') {
             console.log(`Fila (ID Reserva: ${currentItem.idReserva || 'N/A'}) ya está '${estadoOriginalHoja}' en la hoja. No se modifica.`);
             // Asegurar que la UI esté correcta (ya debería estarlo desde displayBitacoraData)
             button.textContent = estadoOriginalHoja.charAt(0).toUpperCase() + estadoOriginalHoja.slice(1);
             button.classList.remove('rojo-mas', 'verde'); button.classList.add('boton');
             button.disabled = true;
             row.classList.add('bitacora-row-deleted');
             row.querySelectorAll('input, select, .asistencia-switch').forEach(el => el.disabled = true);
             return;
        }

        // Si la fila es NUEVA (status === 'new')
        if (currentItem.status === 'new') {
            bitacoraDataClient.splice(clientIndex, 1); // Eliminar del array local
            row.remove(); // Eliminar del DOM
            console.log(`Fila nueva (índice cliente anterior ${clientIndex}) eliminada del cliente.`);
            // Re-indexar los data-client-index en el DOM restantes
            document.querySelectorAll('#bitacoraTable tbody tr').forEach((r, idx) => {
                r.dataset.clientIndex = idx;
            });
        } else if (currentItem.status === 'deleted') {
            // Si estaba MARCADA PARA ELIMINAR LOCALMENTE (status === 'deleted'), la RESTAURAMOS
            console.log(`Restaurando fila (ID Reserva: ${currentItem.idReserva || 'N/A'}).`);
            // Volver al estado 'edited' si tenía un originalRow, o 'unchanged' si no (caso poco probable aquí)
            // O mejor, simplemente 'edited' para indicar que el usuario interactuó.
            currentItem.status = 'edited'; // O podría ser 'unchanged' si no hubo otras ediciones previas. 'edited' es seguro.
            console.log(`Fila cliente índice ${clientIndex} restaurada, nuevo status: '${currentItem.status}'.`);

            row.classList.remove('bitacora-row-deleted');
            row.classList.remove('bitacora-row-edited'); // Limpiar por si acaso
            // Aplicar clase de editada si se quiere visualmente
            // row.classList.add('bitacora-row-edited');

            button.textContent = 'Eliminar';
            button.classList.remove('verde', 'boton');
            button.classList.add('rojo-mas');
            button.disabled = false;

            // Habilitar inputs/botones que deberían ser editables en una fila cargada
            row.querySelectorAll('input, select, .asistencia-switch').forEach(el => {
                const colKey = el.dataset.columna || el.closest('td')?.dataset.columna;
                let isEditableAfterLoad = false;
                switch(colKey) {
                    case 'pax': case 'ninosAdultosMayores': case 'adultos':
                    case 'ingreso': case 'gastos': case 'asistencia': case 'nota':
                        isEditableAfterLoad = true;
                        break;
                }
                if (isEditableAfterLoad) el.disabled = false;
            });

        } else { // Estado es 'unchanged' o 'edited'. MARCAR PARA ELIMINAR LOCALMENTE.
            console.log(`Marcando fila (ID Reserva: ${currentItem.idReserva || 'N/A'}) para eliminar.`);
            currentItem.status = 'deleted';
            console.log(`Fila cliente índice ${clientIndex} marcada como 'deleted'.`);

            row.classList.add('bitacora-row-deleted');
            row.classList.remove('bitacora-row-new', 'bitacora-row-edited'); // Limpiar otras clases de estado

            button.textContent = 'Restaurar';
            button.classList.remove('rojo-mas', 'boton');
            button.classList.add('verde'); // Botón verde para Restaurar
            button.disabled = false; // Habilitado para poder restaurar

            // Deshabilitar todos los inputs/botones de la fila (excepto el propio botón de acción)
            row.querySelectorAll('input, select, .asistencia-switch').forEach(el => {
                if (el !== button) el.disabled = true;
            });
        }

        updateTableScrollButtons('bitacoraTableWrapper');
        updateBitacoraUIState();
        actualizarSumatoriasBitacora();
    }
 function guardarYReordenarBitacora() {
    console.log("Iniciando guardado y reordenado de Bitácora...");
    
    const changesToSend = bitacoraDataClient.filter(item => 
        ['new', 'edited', 'deleted'].includes(item.status)
    );

    if (changesToSend.length === 0) {
      alert("No hay cambios pendientes para guardar.");
      return;
    }

    if (!validarFilasBitacora(changesToSend)) {
      return; 
    }
    
    if (!confirm(`¿Está seguro de guardar los ${changesToSend.length} cambios?`)) {
      return;
    }
    
    const agenciaActualRUC = document.getElementById('agencia')?.value;
    const sucursalActual = document.getElementById('sucursal')?.value;
    const usuarioActualNombre = document.getElementById('usuario')?.value;

    const datosFormularioParaNuevas = {
        agenciaForm: agenciaActualRUC, 
        sucursalForm: sucursalActual,
        usuarioForm: usuarioActualNombre 
    };

    const payload = changesToSend.map(item => {
        let itemToSend = { ...item }; 
        if (item.status === 'new') {
            itemToSend.datosFormulario = datosFormularioParaNuevas;
        }
        return itemToSend; 
    });

    document.getElementById('overlay').style.display = 'flex';

    google.script.run
      .withSuccessHandler(function(response) {
        document.getElementById('overlay').style.display = 'none';
        
        if (response && response.status === 'success') {
            alert(response.message);
            
            // --- ¡CORRECCIÓN CLAVE AQUÍ! ---
            // Después de guardar, reseteamos el array de datos del cliente
            // para que la siguiente función no detecte "cambios pendientes".
            bitacoraDataClient = []; 
            
            // Ahora llamamos directamente a la función que carga la bitácora,
            // que es segura porque ya no hay cambios pendientes en el cliente.
            cargarBitacoraInterno();
            // --- FIN DE LA CORRECCIÓN ---

        } else {
            alert("Error al guardar: " + (response ? response.message : "Error desconocido."));
        }
      })
      .withFailureHandler(function(error) {
        document.getElementById('overlay').style.display = 'none';
        alert("Error técnico al guardar: " + error.message);
      })
      .procesarCambiosBitacora(payload); 
}
 /**
 * Habilita o deshabilita los botones de acción de la Bitácora
 * basándose en si hay cambios pendientes.
 * ¡VERSIÓN CORREGIDA: Ya no deshabilita los filtros principales!
 */
function updateBitacoraUIState() {
    const fechaFiltroInput = document.getElementById('bitacoraFechaFiltro');
    // El filtro de tour ya no necesita ser accedido aquí, pero lo dejamos por si acaso
    const tourFiltroSelect = document.getElementById('bitacoraTourFiltro');
    const btnAddRow = document.querySelector('#bitacoraContainer .button-group .verde');
    const btnSave = document.querySelector('#bitacoraContainer .button-group .boton');

    if (!fechaFiltroInput || !btnAddRow || !btnSave) {
        console.warn("Elementos de UI de Bitácora no encontrados para actualizar estado.");
        return;
    }

    const hasChangesToSave = bitacoraDataClient.some(item => ['new', 'edited', 'deleted'].includes(item.status));

    // <-- ELIMINACIÓN DE LÓGICA ERRÓNEA
    // Ya no deshabilitamos los filtros principales. Siempre deben estar activos.
    // fechaFiltroInput.disabled = hasChangesToSave; // ELIMINADO
    // tourFiltroSelect.disabled = hasChangesToSave; // ELIMINADO
    // -->

    // La lógica para habilitar/deshabilitar los botones sigue siendo correcta.
    const fechaFiltroSelected = !!fechaFiltroInput.value;
    btnAddRow.disabled = !fechaFiltroSelected;

    btnSave.disabled = !hasChangesToSave;
    btnSave.textContent = hasChangesToSave ? "Guardar cambios y reordenar *" : "Guardar cambios y reordenar";
}
/**
 * Se dispara al hacer clic en el ícono de ojo de una columna.
 */
function handleToggleColumn(iconElement) {
    const colKey = iconElement.dataset.colkey;
    if (colKey) {
        toggleColumnVisibility(colKey);
    }
}


/**
 * Muestra u oculta una columna y guarda el estado en localStorage.
 */
function toggleColumnVisibility(colKey) {
    const table = document.getElementById('bitacoraTable');
    if (!table) return;

    hiddenBitacoraColumns[colKey] = !hiddenBitacoraColumns[colKey];
    localStorage.setItem('hiddenBitacoraColumns', JSON.stringify(hiddenBitacoraColumns));

    applyHiddenColumnsState();
    updateTableScrollButtons('bitacoraTableWrapper');
}

/**
 * Añade los listeners a los íconos de ojo de las cabeceras.
 */
function setupColumnToggleListeners() {
    const headers = document.querySelectorAll('#bitacoraTable thead .toggle-visibility');
    headers.forEach(icon => {
        icon.addEventListener('click', (e) => {
            e.stopPropagation(); 
            handleToggleColumn(icon);
        });
    });
}


 /**
 * Muestra todas las columnas de la Bitácora.
 */
function mostrarTodasLasColumnasBitacora() {
    console.log("Mostrando todas las columnas de la Bitácora...");
    hiddenBitacoraColumns = {}; // Reinicia el objeto de columnas ocultas
    localStorage.setItem('hiddenBitacoraColumns', JSON.stringify(hiddenBitacoraColumns));
    applyHiddenColumnsState(); // Aplica el nuevo estado (todo visible)
    alert("Todas las columnas de la Bitácora ahora están visibles.");
}
 // --- Funciones para el Scroll Horizontal de Tablas ---
     function scrollTable(wrapperId, scrollAmount) {
        const wrapper = document.getElementById(wrapperId);
        if (wrapper) {
            wrapper.scrollBy({ left: scrollAmount, behavior: 'smooth' });
        }
     }
   // --- ÚNICO PUNTO DE ENTRADA PARA LA INICIALIZACIÓN ---
document.addEventListener("DOMContentLoaded", () => {
    console.log("DOMContentLoaded disparado. Iniciando configuración...");

    // 1. Inicializaciones que NO dependen de datos del servidor (GAS)
    if (document.querySelector("#tablaPasajeros tbody") && document.querySelector("#tablaPasajeros tbody").rows.length === 0) {
        anadirFilaPasajero();
    }
    if (document.querySelector("#tablaTours tbody") && document.querySelector("#tablaTours tbody").rows.length === 0) {
        anadirFilaTour();
    }

    setupTableKeyboardEvents("tablaPasajeros", anadirFilaPasajero);
    setupTableKeyboardEvents("tablaTours", anadirFilaTour);
    inicializarAutocompletado();
    setupColumnToggleListeners();

    // Los inputs de pago (total, deposito) ya tienen oninput="recalcularPago()" en el HTML.
    // Llamamos a recalcularPago() aquí para asegurar el estado inicial del balance si los campos
    // total/deposito tuvieran valores al cargar la página (aunque usualmente empiezan vacíos).
    recalcularPago();

    // Estilo inicial para campos de contacto
    const passengerWspInput = document.getElementById("passengerWsp");
    if (passengerWspInput) {
        // No necesitas añadir el listener si solo actualizas clase,
        // pero si validarCamposPasajero hace más, mantenlo.
        // passengerWspInput.addEventListener("input", function() { actualizarInputClass(this); });
        actualizarInputClass(passengerWspInput);
    }
    const passengerEmailInput = document.getElementById("passengerEmail");
    if (passengerEmailInput) {
        // passengerEmailInput.addEventListener("input", function() { actualizarInputClass(this); });
        actualizarInputClass(passengerEmailInput);
    }
    
    actualizarPaxEnTours();
    toggleDescripcionClave(true);

    const descWrapper = document.getElementById('descripcionTableWrapper');
    if (descWrapper) {
        descWrapper.addEventListener('scroll', () => updateTableScrollButtons('descripcionTableWrapper'));
        setTimeout(() => updateTableScrollButtons('descripcionTableWrapper'), 300);
    }
    const bitacoraWrapper = document.getElementById('bitacoraTableWrapper');
    if (bitacoraWrapper) {
        bitacoraWrapper.addEventListener('scroll', () => updateTableScrollButtons('bitacoraTableWrapper'));
        setTimeout(() => updateTableScrollButtons('bitacoraTableWrapper'), 300);
    }

    // Esta es la llamada principal para obtener datos del servidor
    inicializarFormulario();

    applyHiddenColumnsState();
    actualizarSumatoriasBitacora();

    console.log("Configuración de DOMContentLoaded completada.");
});
/**
     * Calcula y actualiza las sumatorias de Ingreso, Gastos y Total General
     * para las filas visibles y no eliminadas de la Bitácora.
     */
    function actualizarSumatoriasBitacora() {
      let totalIngreso = 0;
      let totalGastos = 0;
      let totalGeneral = 0;

      if (typeof bitacoraDataClient !== 'undefined' && bitacoraDataClient.length > 0) {
        bitacoraDataClient.forEach(item => {
          // Considerar solo filas que no estén marcadas para eliminar localmente
          // Y cuyo estado original de la hoja no sea 'eliminada' o 'anulado' (si esa info está en item.estadoBitacora)
          const esEliminadaEnHoja = item.estadoBitacora === 'eliminada' || item.estadoBitacora === 'anulado';
          if (item.status !== 'deleted' && !esEliminadaEnHoja) {
            totalIngreso += parseFloat(item.ingreso) || 0;
            totalGastos += parseFloat(item.gastos) || 0;
            // El total por fila ya debería estar calculado (ingreso - gastos)
            totalGeneral += parseFloat(item.total) || 0; 
          }
        });
      }

      document.getElementById('bitacoraTotalIngreso').textContent = totalIngreso.toFixed(2);
      document.getElementById('bitacoraTotalGastos').textContent = totalGastos.toFixed(2);
      document.getElementById('bitacoraTotalGeneral').textContent = totalGeneral.toFixed(2);

      // Opcional: Cambiar color del total general basado en su valor
      const totalGeneralEl = document.getElementById('bitacoraTotalGeneral');
      totalGeneralEl.classList.remove('balance-positive', 'balance-zero', 'balance-negative'); // Usa las clases que ya tienes si quieres
      if (totalGeneral > 0) {
        totalGeneralEl.style.color = '#27ae60'; // Verde
      } else if (totalGeneral < 0) {
        totalGeneralEl.style.color = '#e74c3c'; // Rojo
      } else {
        totalGeneralEl.style.color = '#2C3E50'; // Neutral
      }
      console.log("Sumatorias Bitácora actualizadas:", {totalIngreso, totalGastos, totalGeneral});
    }
  
/**
 * Prepara los datos de las filas seleccionadas, genera un comprobante PDF,
 * y luego guarda automáticamente esas mismas filas en la hoja de cálculo,
 * actualizando la interfaz sin perder otros cambios no guardados.
 */
function prepararYGenerarComprobantePDFBitacora() {
    console.log("Iniciando flujo: Generar PDF y Guardar Filas Seleccionadas...");

    // 1. Filtrar las filas que el usuario ha seleccionado para el PDF
    const filasSeleccionadas = bitacoraDataClient.filter(item =>
        item.selectedForPdf &&
        item.status !== 'deleted' &&
        item.estadoBitacora !== 'eliminada' &&
        item.estadoBitacora !== 'anulado'
    );

    if (filasSeleccionadas.length === 0) {
        alert("Por favor, seleccione con la casilla 'PDF' al menos una fila activa para generar el comprobante.");
        return;
    }

    // 2. Validar que las filas seleccionadas son válidas para procesar
    if (!validarFilasBitacora(filasSeleccionadas)) {
        // La función validarFilasBitacora ya muestra una alerta y resalta la fila con error.
        return; 
    }

    // 3. Recolectar datos de contexto del formulario principal
    const agenciaRUC = document.getElementById('agencia').value;
    const sucursalFormulario = document.getElementById('sucursal').value || "Sucursal no especificada";
    const agenteAsignadoFormulario = document.getElementById('usuario').value || "Agente no especificado";

    if (!agenciaRUC) {
        alert("Error: No se ha seleccionado una agencia principal. Por favor, seleccione una antes de continuar.");
        return;
    }
    
    // 4. Preparar datos específicos para el cuerpo y los totales del PDF
    const primeraFila = filasSeleccionadas[0];
    const guiaGeneralComprobante = primeraFila.guiaAsignado ? primeraFila.guiaAsignado.trim() : "Multiples_Guias_o_Sin_Guia";
    let totalIngresoSeleccionado = 0, totalGastosSeleccionado = 0, totalGeneralSeleccionado = 0;

    const datosParaFilasPDF = filasSeleccionadas.map(item => {
        const ingresoFila = parseFloat(item.ingreso || 0);
        const gastosFila = parseFloat(item.gastos || 0);
        const totalFila = parseFloat(item.total || (ingresoFila - gastosFila));
        totalIngresoSeleccionado += ingresoFila;
        totalGastosSeleccionado += gastosFila;
        totalGeneralSeleccionado += totalFila;
        return {
            passportId: item.passportId || '--',
            fechaTour: item.fechaTour || '--',
            time: item.time || '--',
            nombrePasajero: item.nombre || '--',
            agenciaFila: item.agencia || '--',
            pax: item.pax || '0',
            ninosAdultosMayores: item.ninosAdultosMayores || '0',
            adultos: item.adultos || '0',
            tour: item.tour || '--',
            guiaAsignadoFila: item.guiaAsignado || '--',
            ingresoFila: ingresoFila.toFixed(2),
            gastosFila: gastosFila.toFixed(2),
            totalFila: totalFila.toFixed(2)
        };
    });

    const datosComprobante = {
        filas: datosParaFilasPDF,
        guiaGeneralComprobante: guiaGeneralComprobante,
        agenciaRUC: agenciaRUC,
        sucursalFormulario: sucursalFormulario,
        agenteAsignadoFormulario: agenteAsignadoFormulario,
        totalIngreso: totalIngresoSeleccionado.toFixed(2),
        totalGastos: totalGastosSeleccionado.toFixed(2),
        totalGeneral: totalGeneralSeleccionado.toFixed(2)
    };
    
    // 5. Mostrar overlay y llamar al servidor para generar el PDF
    document.getElementById("overlay").style.display = "flex";
    google.script.run
        .withSuccessHandler(function(result) {
            // Si la generación del PDF fue exitosa...
            if (result && result.status === 'success' && result.pdfBase64) {
                // Descargar el PDF
                const byteCharacters = atob(result.pdfBase64);
                const byteNumbers = new Array(byteCharacters.length);
                for (let i = 0; i < byteCharacters.length; i++) { byteNumbers[i] = byteCharacters.charCodeAt(i); }
                const byteArray = new Uint8Array(byteNumbers);
                const pdfBlob = new Blob([byteArray], { type: 'application/pdf' });
                const url = URL.createObjectURL(pdfBlob);
                const a = document.createElement("a");
                a.href = url;
                a.download = `Comprobante_Bitacora_${guiaGeneralComprobante.replace(/\s+/g, '_')}_${obtenerTimestamp()}.pdf`;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
                
                alert("Comprobante PDF generado. Ahora guardando las filas seleccionadas...");
                
                // 6. Preparar datos para el guardado automático
                const datosParaGuardar = {
                    filas: filasSeleccionadas,
                    contexto: {
                        agenciaForm: agenciaRUC,
                        sucursalForm: sucursalFormulario,
                        usuarioForm: agenteAsignadoFormulario
                    }
                };

                // 7. Llamar a la función de guardado específico
                google.script.run
                    .withSuccessHandler(function(saveResponse) {
                        document.getElementById("overlay").style.display = "none";
                        alert(saveResponse.message);
                        
                        // Si el guardado fue exitoso, actualizar la UI sin recargar todo
                        if (saveResponse && saveResponse.status === 'success' && saveResponse.filasGuardadas) {
                            
                            // Actualizar el array local con los datos del servidor
                            saveResponse.filasGuardadas.forEach(filaGuardada => {
                                const index = bitacoraDataClient.findIndex(item => item.clientIndex === filaGuardada.clientIndex);
                                if (index !== -1) {
                                    // Reemplazar la fila local con la versión actualizada del servidor
                                    bitacoraDataClient[index] = { ...bitacoraDataClient[index], ...filaGuardada, status: 'unchanged' };
                                }
                            });

                            // Re-renderizar la tabla con los datos locales ya actualizados
                            displayBitacoraData(bitacoraDataClient);
                            console.log("UI actualizada con filas guardadas. Otros cambios han sido preservados.");

                        } else {
                            console.error("Falló el guardado de filas:", saveResponse.message);
                        }
                    })
                    .withFailureHandler(function(saveError) {
                        document.getElementById("overlay").style.display = "none";
                        alert("Error técnico al guardar las filas: " + saveError.message);
                    })
                    .guardarFilasEspecificasDeBitacora(datosParaGuardar);
            } else {
                document.getElementById("overlay").style.display = "none";
                alert("Error al generar el PDF: " + (result.message || "Respuesta inválida."));
            }
        })
        .withFailureHandler(function(error) {
            document.getElementById("overlay").style.display = "none";
            alert("Error técnico al generar el PDF: " + error.message);
        })
        .generarComprobanteBitacoraPDF(datosComprobante);
}
function descargarSRIExcel() {
    const filasSeleccionadasSRI = bitacoraDataClient.filter(item =>
        item.selectedForSri && item.status !== 'deleted' &&
        item.estadoBitacora !== 'eliminada' && item.estadoBitacora !== 'anulado'
    );

    if (filasSeleccionadasSRI.length === 0) {
        alert("Seleccione con 'SRI' al menos una fila activa para generar el reporte.");
        return;
    }

    // --- NUEVA VALIDACIÓN ---
    if (!validarFilasBitacora(filasSeleccionadasSRI)) {
      return; // Detiene la ejecución si la validación falla
    }
    // --- FIN DE LA VALIDACIÓN ---

    // (El resto de la función sigue igual)
    const datosParaExcel = filasSeleccionadasSRI.map(item => ({
        fechaServicio: item.fechaTour || '--', idVoucher: item.idVoucher || '--',
        idReserva: item.idReserva || '--', cliente: item.nombre || '--',
        pasaporteId: item.passportId || '--', tour: item.tour || '--',
        ingresoBruto: parseFloat(item.ingreso || 0), gastosDirectos: parseFloat(item.gastos || 0),
        utilidadNeta: parseFloat(item.total || 0), agencia: item.agencia || 'Gecorp',
        sucursal: item.sucursal || '--', usuarioVenta: item.usuario || '--',
        nota: item.nota || ''
    }));
    document.getElementById("overlay").style.display = "flex";
    google.script.run
        .withSuccessHandler(function(result) {
            document.getElementById("overlay").style.display = "none";
            if (result && result.status === 'success' && result.excelBase64) {
                const byteCharacters = atob(result.excelBase64);
                const byteNumbers = new Array(byteCharacters.length);
                for (let i = 0; i < byteCharacters.length; i++) { byteNumbers[i] = byteCharacters.charCodeAt(i); }
                const byteArray = new Uint8Array(byteNumbers);
                const excelBlob = new Blob([byteArray], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
                const url = URL.createObjectURL(excelBlob);
                const a = document.createElement("a");
                a.href = url;
                a.download = `Reporte_SRI_Gecorp_${obtenerTimestamp()}.xlsx`;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
                alert("Reporte Excel para SRI generado y descargado.");
                document.querySelectorAll('.sri-select-checkbox:checked').forEach(cb => cb.checked = false);
                bitacoraDataClient.forEach(item => { item.selectedForSri = false; });
            } else {
                alert("Error al generar Excel: " + (result.message || "Respuesta inválida."));
            }
        })
        .withFailureHandler(function(error) {
            document.getElementById("overlay").style.display = "none";
            alert("Error técnico al generar Excel: " + error.message);
        })
        .generarExcelSRI(datosParaExcel);
}
function descargarSRIExcel() {
    console.log("Iniciando la exportación a Excel para SRI...");

    const filasSeleccionadasSRI = bitacoraDataClient.filter(item =>
        item.selectedForSri &&
        item.status !== 'deleted' &&
        item.estadoBitacora !== 'eliminada' &&
        item.estadoBitacora !== 'anulado'
    );

    if (filasSeleccionadasSRI.length === 0) {
        alert("Por favor, seleccione con la casilla 'SRI' al menos una fila activa para generar el reporte Excel.");
        return;
    }

    console.log(`Se encontraron ${filasSeleccionadasSRI.length} filas para el reporte SRI.`);

    const datosParaExcel = filasSeleccionadasSRI.map(item => {
        return {
            // Usa fechaTour que ya está en dd-MM-yyyy
            fechaServicio: item.fechaTour || '--',
            idVoucher: item.idVoucher || '--',
            idReserva: item.idReserva || '--',
            cliente: item.nombre || '--',
            pasaporteId: item.passportId || '--',
            tour: item.tour || '--',
            ingresoBruto: parseFloat(item.ingreso || 0),
            gastosDirectos: parseFloat(item.gastos || 0),
            utilidadNeta: parseFloat(item.total || 0),
            agencia: item.agencia || 'Gecorp',
            sucursal: item.sucursal || '--',
            // --- ¡CORRECCIÓN AQUÍ! ---
            usuarioVenta: item.usuario || '--', // Se cambió de 'item.usuarioBitacora' a 'item.usuario'
            nota: item.nota || ''
        };
    });

    document.getElementById("overlay").style.display = "flex";

    google.script.run
        .withSuccessHandler(function(result) {
            document.getElementById("overlay").style.display = "none";
            if (result && result.status === 'success' && result.excelBase64) {
                console.log("Archivo Excel para SRI generado, iniciando descarga...");
                
                const byteCharacters = atob(result.excelBase64);
                const byteNumbers = new Array(byteCharacters.length);
                for (let i = 0; i < byteCharacters.length; i++) {
                    byteNumbers[i] = byteCharacters.charCodeAt(i);
                }
                const byteArray = new Uint8Array(byteNumbers);
                const excelBlob = new Blob([byteArray], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });

                const url = URL.createObjectURL(excelBlob);
                const a = document.createElement("a");
                a.href = url;
                const filename = `Reporte_SRI_Gecorp_${obtenerTimestamp()}.xlsx`;
                a.download = filename;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
                
                alert("Reporte Excel para SRI generado y descargado exitosamente.");

                document.querySelectorAll('.sri-select-checkbox:checked').forEach(cb => cb.checked = false);
                bitacoraDataClient.forEach(item => {
                    if (item.selectedForSri) {
                        item.selectedForSri = false;
                    }
                });

            } else {
                alert("Error al generar el archivo Excel: " + (result.message || "Respuesta inválida del servidor."));
            }
        })
        .withFailureHandler(function(error) {
            document.getElementById("overlay").style.display = "none";
            alert("Error técnico al generar el archivo Excel: " + error.message);
        })
        .generarExcelSRI(datosParaExcel);
}



/**
 * Aplica estilos de validación a un input de la bitácora según su contenido y estado.
 * @param {HTMLElement} inputElement El elemento input, select o button a validar.
 */
function actualizarEstiloInputBitacora(inputElement) {
  const colKey = inputElement.dataset.columna || inputElement.closest('td')?.dataset.colkey;
  if (!colKey) return;

  const valor = (inputElement.value || '').trim();
  const estaVacio = valor === '';
  const esDefault = inputElement.hasAttribute('data-default');

  // Limpiamos clases de validación anteriores
  inputElement.classList.remove('bitacora-input-vacio-requerido', 'bitacora-input-vacio-importante');

  if (estaVacio) {
    // Aplica estilo rojo a campos requeridos vacíos
    if (['time', 'nombre', 'passportId', 'tour', 'operador', 'guiaAsignado', 'pax'].includes(colKey)) {
        inputElement.classList.add('bitacora-input-vacio-requerido');
    }
    // Aplica estilo azul a campos importantes vacíos
    if (['email', 'whatsapp'].includes(colKey)) {
        inputElement.classList.add('bitacora-input-vacio-importante');
    }
  } else if (esDefault) {
    // --- ¡AQUÍ ESTÁ EL CAMBIO! ---
    // Si no está vacío pero es un valor por defecto (ej. hora), APLICA EL ESTILO ROJO.
    if (colKey === 'time' || colKey === 'guiaAsignado') {
        inputElement.classList.add('bitacora-input-vacio-requerido');
    }
  }
}
/**
 * Formats a date string from YYYY-MM-DD to DD-MM-YYYY for display purposes.
 * @param {string} fechaStrYYYYMMDD The date string in 'YYYY-MM-DD' format.
 * @returns {string} The formatted date as 'DD-MM-YYYY' or the original value if invalid.
 */
function formatearFechaParaDisplay(fechaStrYYYYMMDD) {
    if (!fechaStrYYYYMMDD || !/^\d{4}-\d{2}-\d{2}$/.test(fechaStrYYYYMMDD)) {
        return fechaStrYYYYMMDD || '--';
    }
    const [year, month, day] = fechaStrYYYYMMDD.split('-');
    return `${day}-${month}-${year}`;
}
/**
 * Devuelve la hora actual redondeada a la media hora más cercana,
 * con una lógica de margen específica.
 * - De :41 a :10 de la siguiente hora, redondea a la hora en punto (:00).
 * - De :11 a :40, redondea a la media hora (:30).
 * @returns {string} La hora redondeada en formato HH:MM.
 */
function obtenerHoraRedondeada() {
    const ahora = new Date();
    let horas = ahora.getHours();
    let minutos = ahora.getMinutes();

    if (minutos > 40) {
        // Redondear a la siguiente hora en punto
        horas = (horas + 1) % 24; // % 24 para manejar el caso de las 23:xx
        minutos = 0;
    } else if (minutos > 10) {
        // Redondear a la media hora
        minutos = 30;
    } else {
        // Redondear a la hora en punto actual
        minutos = 0;
    }

    const horasFormateadas = String(horas).padStart(2, '0');
    const minutosFormateados = String(minutos).padStart(2, '0');
    
    return `${horasFormateadas}:${minutosFormateados}`;
}

/**
 * Devuelve la hora actual formateada y redondeada para usarla por defecto.
 * @returns {string} La hora actual formateada y redondeada.
 */
function obtenerHoraActual() {
    // Ahora esta función simplemente llama a la nueva lógica de redondeo.
    return obtenerHoraRedondeada();
}

    function cerrarSesion() {
      if (confirm("¿Está seguro de que desea cerrar la sesión?")) {
        window.top.location.href = "<?= ScriptApp.getService().getUrl() ?>?action=logout";
      }
    }

    function recalcularPago() {
      const totalInput = document.getElementById("total");
      const depositoInput = document.getElementById("deposito");
      const balanceInput = document.getElementById("balance");

      if (!totalInput || !depositoInput || !balanceInput) {
        console.error("No se encontraron los campos de pago (total, deposito, balance).");
        return;
      }

      const total = parseFloat(totalInput.value) || 0;
      const deposito = parseFloat(depositoInput.value) || 0;
      const balance = total - deposito;

      balanceInput.value = balance.toFixed(2);
      
      balanceInput.classList.remove("balance-positive", "balance-zero", "balance-negative");
      if (balance > 0) {
        balanceInput.classList.add("balance-positive");
      } else if (balance === 0 && (total > 0 || deposito > 0)) { 
        balanceInput.classList.add("balance-zero");
      } else if (balance < 0) {
        balanceInput.classList.add("balance-negative");
      }
      
      actualizarInputClass(totalInput);
      actualizarInputClass(depositoInput);
      // No es necesario actualizarInputClass para balanceInput porque es readonly y su estilo depende del valor.
    }
    
function toggleProfileDropdown() {
  const dropdown = document.getElementById("profileDropdown");
  const trigger = document.querySelector(".profile-trigger");
  if (dropdown.style.display === "block") {
    dropdown.style.display = "none";
    trigger.classList.remove("active");
  } else {
    dropdown.style.display = "block";
    trigger.classList.add("active");
  }
}

// Cerrar el dropdown si se hace clic fuera de él
window.onclick = function(event) {
  if (!event.target.matches('.profile-trigger') && !event.target.closest('.profile-trigger')) {
    const dropdowns = document.getElementsByClassName("profile-dropdown-content");
    const triggers = document.getElementsByClassName("profile-trigger");
    for (let i = 0; i < dropdowns.length; i++) {
      let openDropdown = dropdowns[i];
      if (openDropdown.style.display === "block") {
        openDropdown.style.display = "none";
        if (triggers[i]) {
          triggers[i].classList.remove("active");
        }
      }
    }
  }
}

function mostrarModalCambiarContrasena() {
  document.getElementById("modalCambiarContrasena").style.display = "flex";
  toggleProfileDropdown(); // Cierra el dropdown
}

function cerrarModalCambiarContrasena() {
  document.getElementById("modalCambiarContrasena").style.display = "none";
  // Limpiar campos del modal
  document.getElementById("oldPassword").value = "";
  document.getElementById("newPassword").value = "";
  document.getElementById("confirmNewPassword").value = "";
}

function procesarCambioContrasena() {
  const oldPassword = document.getElementById("oldPassword").value;
  const newPassword = document.getElementById("newPassword").value;
  const confirmNewPassword = document.getElementById("confirmNewPassword").value;

  if (!oldPassword || !newPassword || !confirmNewPassword) {
    alert("Por favor, complete todos los campos.");
    return;
  }
  if (newPassword.length < 6) { // Validación básica de longitud
    alert("La nueva contraseña debe tener al menos 6 caracteres.");
    return;
  }
  if (newPassword !== confirmNewPassword) {
    alert("La nueva contraseña y la confirmación no coinciden.");
    return;
  }

  document.getElementById("overlay").style.display = "flex"; // Mostrar spinner

  google.script.run
    .withSuccessHandler(function(response) {
      document.getElementById("overlay").style.display = "none";
      alert(response.message);
      if (response.success) {
        cerrarModalCambiarContrasena();
      } else {
        // Mantener el modal abierto para que el usuario corrija
        document.getElementById("oldPassword").focus(); // Enfocar contraseña actual si falló
        document.getElementById("oldPassword").select();
      }
    })
    .withFailureHandler(function(error) {
      document.getElementById("overlay").style.display = "none";
      alert("Error al cambiar la contraseña: " + error.message);
    })
    .cambiarContrasenaServidor(activeUserEmail, oldPassword, newPassword); // activeUserEmail debe ser tu variable global
}

// Función de cerrar sesión (ya la tenías, asegúrate que es accesible)
function cerrarSesion() {
  if (confirm("¿Está seguro de que desea cerrar la sesión?")) {
    // Redirigimos la ventana principal del navegador a la URL especial.
    // Usamos window.top.location.href para asegurar que funcione incluso si la app está en un iframe.
    document.getElementById("overlay").style.display = "flex"; // Mostrar overlay
    // La redirección se encargará del resto.
    window.top.location.href = "<?= ScriptApp.getService().getUrl() ?>?action=logout";
  }
}

// En datosInicialesRecibidos, asegúrate de actualizar el email en el nuevo header
function datosInicialesRecibidos(data) {
    document.getElementById("overlay").style.display = "none";
    console.log("Datos iniciales recibidos:", data);
    
    activeUserEmail = data.nombreUsuario || "";
    
    // Actualiza el campo de "Agent Gmail" en el formulario
    const salesAgentInput = document.getElementById("salesAgent");
    if(salesAgentInput) {
      salesAgentInput.value = activeUserEmail;
      actualizarInputClass(salesAgentInput);
    }

    // ¡NUEVO! Actualiza el email en el encabezado
    const headerUserEmailSpan = document.getElementById("header-user-email");
    if (headerUserEmailSpan) {
      headerUserEmailSpan.textContent = activeUserEmail;
    }
    
    // ... resto de tu función datosInicialesRecibidos sin cambios ...
    listaRucsBitacoraPermitidos = data.rucsBitacoraPermitidos || [];
    opcionesBitacora = data.opcionesBitacora || { toursPorAgencia: {}, operadoresPorTour: {} };
    if(data.optionsData) optionsData = data.optionsData;


    const agenciaSelect = document.getElementById("agencia");
    agenciaSelect.innerHTML = ""; 

    let agenciaEstablecidaConExito = false;

    if (!data.agencias || data.agencias.length === 0) {
        agenciaSelect.add(new Option("-- Sin Agencias Asignadas --", ""));
    } else {
        data.agencias.forEach(item => agenciaSelect.add(new Option(item.agencia, item.ruc)));
        
        if (data.agenciaSeleccionada && data.agencias.some(ag => ag.ruc === data.agenciaSeleccionada)) {
            agenciaSelect.value = data.agenciaSeleccionada;
            agenciaEstablecidaConExito = true;
        } else if (data.agencias.length > 0 && data.agencias[0].ruc) {
            agenciaSelect.value = data.agencias[0].ruc;
            agenciaEstablecidaConExito = true;
        }
    }
    actualizarInputClass(agenciaSelect);

    agenciaSelect.addEventListener("change", handleAgenciaChange);

    if (agenciaSelect.value && agenciaEstablecidaConExito) {
        isProgrammaticChange = true;
        handleAgenciaChange.call(agenciaSelect); // Pasa el RUC correcto
        isProgrammaticChange = false;
    } else {
        actualizarSucursales(null, ""); 
        actualizarUsuarios(null, "");   
        cargarListaVouchers("");      
        actualizarVisibilidadBitacora("");
        const tbodyBitacora = document.querySelector('#bitacoraTable tbody');
        if (tbodyBitacora) tbodyBitacora.innerHTML = `<tr><td colspan="28">Seleccione agencia y fecha.</td></tr>`;
        actualizarSumatoriasBitacora(); 
        bitacoraDataClient = [];
        poblarFiltroTourBitacora(); 
    }

    formInitialized = true;
    console.log("Formulario inicializado.");
}
/**
 * Obtiene el RUC de la agencia seleccionada, pide al servidor el enlace de su calendario
 * y lo abre en una nueva pestaña.
 */
function abrirMiCalendario() {
  console.log("Iniciando la apertura del calendario de la agencia.");
  toggleProfileDropdown(); // Cierra el menú desplegable

  const agenciaSelect = document.getElementById('agencia');
  const ruc = agenciaSelect.value;

  // Validar que una agencia esté seleccionada
  if (!ruc) {
    alert("Por favor, seleccione una agencia para ver su calendario.");
    return;
  }
  
  document.getElementById("overlay").style.display = "flex"; // Mostrar spinner de carga

  // Llamar a la nueva función del servidor
  google.script.run
    .withSuccessHandler(function(calendarioUrl) {
      document.getElementById("overlay").style.display = "none"; // Ocultar spinner
      
      // Validar la respuesta del servidor
      if (calendarioUrl && calendarioUrl.trim() !== "") {
        console.log("URL del calendario recibida:", calendarioUrl);
        // Abrir la URL en una nueva pestaña
        window.open(calendarioUrl, '_blank');
      } else {
        alert('La agencia seleccionada no tiene un calendario configurado.');
      }
    })
    .withFailureHandler(function(error) {
      document.getElementById("overlay").style.display = "none"; // Ocultar spinner en caso de error
      console.error("Error al obtener el calendario:", error);
      alert('Error al intentar obtener el calendario: ' + error.message);
    })
    .obtenerLinkCalendarioPorAgencia(ruc);
}
/**
 * Habilita o deshabilita los inputs de pasajeros (#Pax, Niños, Adultos) en una fila
 * basándose en si se ha seleccionado tanto un Tour como un Operador.
 * @param {HTMLTableRowElement} row La fila de la tabla a evaluar.
 */
function actualizarEstadoInputsPax(row) {
    if (!row) return;

    const tourSelect = row.querySelector('select[data-columna="tour"]');
    const operadorSelect = row.querySelector('select[data-columna="operador"]');
    
    // La condición es simple: ambos selectores deben existir y tener un valor seleccionado.
    const habilitar = tourSelect && tourSelect.value && operadorSelect && operadorSelect.value;

    const paxInputs = row.querySelectorAll('input[data-columna="pax"], input[data-columna="ninosAdultosMayores"], input[data-columna="adultos"]');
    
    paxInputs.forEach(input => {
        input.disabled = !habilitar;
    });

    // Opcional: Si deshabilitamos los campos, podemos resetear sus valores.
    if (!habilitar) {
        paxInputs.forEach(input => {
            input.value = '';
            // Si reseteas, también actualiza el dataClient para esa fila
            const clientIndex = parseInt(row.dataset.clientIndex, 10);
            const colKey = input.dataset.columna;
            if (!isNaN(clientIndex) && bitacoraDataClient[clientIndex] && colKey) {
                bitacoraDataClient[clientIndex][colKey] = 0;
            }
        });
        // Si reseteas, vuelve a calcular el ingreso (que será 0) y el total.
        recalcularIngresoFilaBitacora(row);
        recalcularTotalFilaBitacora(row);
        actualizarSumatoriasBitacora();
    }
}

/**
 * Valida un array de filas de la bitácora para asegurar que los campos requeridos (tour, operador) están llenos.
 * @param {Array<Object>} filasAValidar - Un array de objetos de fila del bitacoraDataClient.
 * @returns {boolean} - Devuelve true si todas las filas son válidas, de lo contrario false.
 */
function validarFilasBitacora(filasAValidar) {
  const tbody = document.querySelector('#bitacoraTable tbody');
  // Primero, quitar el resaltado de error de todas las filas
  tbody.querySelectorAll('tr.highlighted-error').forEach(row => row.classList.remove('highlighted-error'));

  for (const fila of filasAValidar) {
    if (!fila.tour || !fila.operador) {
      alert(`Error de validación: La fila con el nombre "${fila.nombre || 'Sin Nombre'}" debe tener un Tour y un Operador seleccionados para poder procesarla.`);
      
      // Encontrar y resaltar la fila con el error en la tabla
      const filaDOM = tbody.querySelector(`tr[data-client-index="${fila.clientIndex}"]`);
      if (filaDOM) {
        filaDOM.classList.add('highlighted-error');
        filaDOM.scrollIntoView({ behavior: 'smooth', block: 'center' });
      }
      return false; // Detiene la validación y la operación
    }
  }
  return true; // Todas las filas son válidas
}
/**
 * Recolecta los datos de las filas seleccionadas con el checkbox en la sección de Descripción (Agencia),
 * los envía al servidor para generar un archivo Excel y luego inicia la descarga del archivo.
 */
function descargarSRIDescripcionExcel() {
    console.log("Iniciando la exportación a Excel para SRI (Descripción Agencia)...");

    // 1. Encontrar todos los checkboxes de SRI que estén marcados en la tabla de descripción
    const checkboxes = document.querySelectorAll('#descripcionTableBody .sri-checkbox-descripcion:checked');

    if (checkboxes.length === 0) {
        alert("Por favor, seleccione con la casilla 'SRI' al menos una fila para generar el reporte de agencia.");
        return;
    }

    console.log(`Se encontraron ${checkboxes.length} filas para el reporte de agencia.`);

    // 2. Recolectar los datos de cada fila seleccionada
    const datosParaExcel = [];
    checkboxes.forEach(cb => {
        const row = cb.closest('tr');
        if (row) {
            const voucherData = {
                idVoucher: row.dataset.voucherId || '--',
                fechaCompra: row.cells[2]?.textContent || '--',
                sucursal: row.cells[3]?.textContent || '--',
                total: parseFloat(row.cells[6]?.dataset.total || 0),
                deposito: parseFloat(row.cells[5]?.textContent || 0),
                balance: parseFloat(row.cells[4]?.textContent || 0),
                costosOperacion: parseFloat(row.querySelector('input[data-columna="costosOperacion"]')?.value || 0),
                comisionTotal: parseFloat(row.querySelector('td[data-columna="comisionTotal"]')?.textContent || 0),
                comisionAgente: parseFloat(row.querySelector('input[data-columna="comisionAgente"]')?.value || 0),
                comisionAgencia: parseFloat(row.querySelector('input[data-columna="comisionAgencia"]')?.value || 0),
                estado: row.cells[11]?.textContent || '--',
                usuarioVenta: row.cells[12]?.textContent || '--', // Nombre correcto de la columna
                descripcion: row.querySelector('input[data-columna="descripcion"]')?.value || ''
            };
            datosParaExcel.push(voucherData);
        }
    });

    // 3. Mostrar el overlay y llamar al servidor
    document.getElementById("overlay").style.display = "flex";

    google.script.run
        .withSuccessHandler(function(result) {
            document.getElementById("overlay").style.display = "none";
            if (result && result.status === 'success' && result.excelBase64) {
                console.log("Archivo Excel de Agencia generado, iniciando descarga...");
                
                // Lógica para descargar el archivo Base64
                const byteCharacters = atob(result.excelBase64);
                const byteNumbers = new Array(byteCharacters.length);
                for (let i = 0; i < byteCharacters.length; i++) {
                    byteNumbers[i] = byteCharacters.charCodeAt(i);
                }
                const byteArray = new Uint8Array(byteNumbers);
                const excelBlob = new Blob([byteArray], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });

                const url = URL.createObjectURL(excelBlob);
                const a = document.createElement("a");
                a.href = url;
                const filename = `Reporte_SRI_Agencia_${obtenerTimestamp()}.xlsx`;
                a.download = filename;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
                
                alert("Reporte Excel de Agencia generado y descargado exitosamente.");

                // Opcional: Desmarcar los checkboxes después de la descarga
                checkboxes.forEach(cb => cb.checked = false);

            } else {
                alert("Error al generar el archivo Excel: " + (result.message || "Respuesta inválida del servidor."));
            }
        })
        .withFailureHandler(function(error) {
            document.getElementById("overlay").style.display = "none";
            alert("Error técnico al generar el archivo Excel de Agencia: " + error.message);
        })
        // Llamada a la función del servidor que ya tienes
        .generarExcelSRIDescripcion(datosParaExcel);
}
// ----- AÑADE ESTE BLOQUE COMPLETO AL FINAL DE TU SCRIPT -----

/**
 * Actualiza dinámicamente el contenido del <datalist> de vouchers
 * basándose en lo que el usuario escribe en el campo de texto.
 * @param {Event} event - El evento 'input' del campo de texto.
 */
function actualizarDatalistVoucherDinamico(event) {
    const input = event.target;
    const datalist = document.getElementById('listaVouchers');
    const valorActual = input.value.trim().toUpperCase();

    // Si el datalist no existe o la lista completa (miniRegistro) no está definida, no hacemos nada.
    if (!datalist || typeof miniRegistro === 'undefined') {
        return;
    }

    // Limpiamos las opciones actuales del datalist
    datalist.innerHTML = '';

    let opcionesFiltradas;

    if (valorActual === '') {
        // Si el campo está vacío, mostramos los primeros 10 (vista inicial)
        opcionesFiltradas = miniRegistro.slice(0, 10);
    } else {
        // Si hay texto, filtramos la lista COMPLETA de vouchers (miniRegistro)
        opcionesFiltradas = miniRegistro.filter(id => id.toUpperCase().includes(valorActual));
    }

    // Añadimos las nuevas opciones filtradas al datalist
    opcionesFiltradas.forEach(id => {
        const option = document.createElement('option');
        option.value = id;
        datalist.appendChild(option);
    });
}

// Añadimos el "escuchador de eventos" al campo de texto del Voucher ID
// para que llame a nuestra nueva función cada vez que el usuario escriba algo.
// Esto se debe hacer después de que el DOM esté cargado.
document.addEventListener('DOMContentLoaded', function() {
    const voucherIdInput = document.getElementById('voucherId');
    if (voucherIdInput) {
        voucherIdInput.addEventListener('input', actualizarDatalistVoucherDinamico);
    }
});
// AHORA (Flujo Asíncrono)
function iniciarGuardadoYGeneracionPDF() {
    const datosDelFormulario = recolectarDatos(); // Tu función para obtener los datos
    
    // Muestra un spinner o mensaje de "Guardando..."
    mostrarSpinner("Guardando datos...");

    // 1. Llama a la primera función para guardar rápidamente.
    google.script.run
        .withSuccessHandler(function(response) {
            // Esta es la función que se ejecuta cuando guardarDatosAsincrono responde
            if (response.status === 'success') {
                const voucherId = response.voucherId;
                
                // Actualiza la UI para mostrar que se guardó
                mostrarMensajeExito(`¡Guardado! ID: ${voucherId}. Ahora generando PDF...`);
                
                // 2. Ahora, llama a la segunda función para generar el PDF
                google.script.run
                    .withSuccessHandler(function(pdfResponse) {
                        // Esta es la función que se ejecuta cuando generarPdfPorId responde
                        if (pdfResponse.status === 'success') {
                            // Procesa el PDF (ej. forzar descarga)
                            descargarPdfDesdeBase64(pdfResponse.pdfBase64, `Voucher-${voucherId}.pdf`);
                            // Abre el enlace de WhatsApp si lo deseas
                            window.open(pdfResponse.whatsappLink, '_blank');
                            ocultarSpinner();
                        } else {
                            // Maneja el error de la generación del PDF
                            onFailure(pdfResponse); 
                        }
                    })
                    .withFailureHandler(onFailure)
                    .generarPdfPorId(voucherId);
                
            } else {
                // Maneja el error del guardado inicial
                onFailure(response);
            }
        })
        .withFailureHandler(onFailure)
        .guardarDatosAsincrono(datosDelFormulario);
}

// Función de ayuda para manejar el error
function onFailure(error) {
    console.error("Error del servidor:", error);
    mostrarMensajeError(error.message || "Ocurrió un error inesperado.");
    ocultarSpinner();
}
  </script>
</body>
</html> 
